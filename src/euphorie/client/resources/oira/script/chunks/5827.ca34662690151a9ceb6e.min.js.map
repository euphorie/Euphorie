{"version":3,"file":"chunks/5827.ca34662690151a9ceb6e.min.js","mappings":"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","sources":["webpack://@patternslib/patternslib/./node_modules/google-code-prettify/src/prettify.js"],"sourcesContent":["// Copyright (C) 2006 Google Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n\n/**\n * @fileoverview\n * some functions for browser-side pretty printing of code contained in html.\n *\n * <p>\n * For a fairly comprehensive set of languages see the\n * <a href=\"http://google-code-prettify.googlecode.com/svn/trunk/README.html#langs\">README</a>\n * file that came with this source.  At a minimum, the lexer should work on a\n * number of languages including C and friends, Java, Python, Bash, SQL, HTML,\n * XML, CSS, Javascript, and Makefiles.  It works passably on Ruby, PHP and Awk\n * and a subset of Perl, but, because of commenting conventions, doesn't work on\n * Smalltalk, Lisp-like, or CAML-like languages without an explicit lang class.\n * <p>\n * Usage: <ol>\n * <li> include this source file in an html page via\n *   {@code <script type=\"text/javascript\" src=\"/path/to/prettify.js\"></script>}\n * <li> define style rules.  See the example page for examples.\n * <li> mark the {@code <pre>} and {@code <code>} tags in your source with\n *    {@code class=prettyprint.}\n *    You can also use the (html deprecated) {@code <xmp>} tag, but the pretty\n *    printer needs to do more substantial DOM manipulations to support that, so\n *    some css styles may not be preserved.\n * </ol>\n * That's it.  I wanted to keep the API as simple as possible, so there's no\n * need to specify which language the code is in, but if you wish, you can add\n * another class to the {@code <pre>} or {@code <code>} element to specify the\n * language, as in {@code <pre class=\"prettyprint lang-java\">}.  Any class that\n * starts with \"lang-\" followed by a file extension, specifies the file type.\n * See the \"lang-*.js\" files in this directory for code that implements\n * per-language file handlers.\n * <p>\n * Change log:<br>\n * cbeust, 2006/08/22\n * <blockquote>\n *   Java annotations (start with \"@\") are now captured as literals (\"lit\")\n * </blockquote>\n * @requires console\n */\n\n// JSLint declarations\n/*global console, document, navigator, setTimeout, window, define */\n\n/** @define {boolean} */\nvar IN_GLOBAL_SCOPE = true;\n\n/**\n * Split {@code prettyPrint} into multiple timeouts so as not to interfere with\n * UI events.\n * If set to {@code false}, {@code prettyPrint()} is synchronous.\n */\nwindow['PR_SHOULD_USE_CONTINUATION'] = true;\n\n/**\n * Pretty print a chunk of code.\n * @param {string} sourceCodeHtml The HTML to pretty print.\n * @param {string} opt_langExtension The language name to use.\n *     Typically, a filename extension like 'cpp' or 'java'.\n * @param {number|boolean} opt_numberLines True to number lines,\n *     or the 1-indexed number of the first line in sourceCodeHtml.\n * @return {string} code as html, but prettier\n */\nvar prettyPrintOne;\n/**\n * Find all the {@code <pre>} and {@code <code>} tags in the DOM with\n * {@code class=prettyprint} and prettify them.\n *\n * @param {Function} opt_whenDone called when prettifying is done.\n * @param {HTMLElement|HTMLDocument} opt_root an element or document\n *   containing all the elements to pretty print.\n *   Defaults to {@code document.body}.\n */\nvar prettyPrint;\n\n\n(function () {\n  var win = window;\n  // Keyword lists for various languages.\n  // We use things that coerce to strings to make them compact when minified\n  // and to defeat aggressive optimizers that fold large string constants.\n  var FLOW_CONTROL_KEYWORDS = [\"break,continue,do,else,for,if,return,while\"];\n  var C_KEYWORDS = [FLOW_CONTROL_KEYWORDS,\"auto,case,char,const,default,\" + \n      \"double,enum,extern,float,goto,inline,int,long,register,short,signed,\" +\n      \"sizeof,static,struct,switch,typedef,union,unsigned,void,volatile\"];\n  var COMMON_KEYWORDS = [C_KEYWORDS,\"catch,class,delete,false,import,\" +\n      \"new,operator,private,protected,public,this,throw,true,try,typeof\"];\n  var CPP_KEYWORDS = [COMMON_KEYWORDS,\"alignof,align_union,asm,axiom,bool,\" +\n      \"concept,concept_map,const_cast,constexpr,decltype,delegate,\" +\n      \"dynamic_cast,explicit,export,friend,generic,late_check,\" +\n      \"mutable,namespace,nullptr,property,reinterpret_cast,static_assert,\" +\n      \"static_cast,template,typeid,typename,using,virtual,where\"];\n  var JAVA_KEYWORDS = [COMMON_KEYWORDS,\n      \"abstract,assert,boolean,byte,extends,final,finally,implements,import,\" +\n      \"instanceof,interface,null,native,package,strictfp,super,synchronized,\" +\n      \"throws,transient\"];\n  var CSHARP_KEYWORDS = [JAVA_KEYWORDS,\n      \"as,base,by,checked,decimal,delegate,descending,dynamic,event,\" +\n      \"fixed,foreach,from,group,implicit,in,internal,into,is,let,\" +\n      \"lock,object,out,override,orderby,params,partial,readonly,ref,sbyte,\" +\n      \"sealed,stackalloc,string,select,uint,ulong,unchecked,unsafe,ushort,\" +\n      \"var,virtual,where\"];\n  var COFFEE_KEYWORDS = \"all,and,by,catch,class,else,extends,false,finally,\" +\n      \"for,if,in,is,isnt,loop,new,no,not,null,of,off,on,or,return,super,then,\" +\n      \"throw,true,try,unless,until,when,while,yes\";\n  var JSCRIPT_KEYWORDS = [COMMON_KEYWORDS,\n      \"debugger,eval,export,function,get,null,set,undefined,var,with,\" +\n      \"Infinity,NaN\"];\n  var PERL_KEYWORDS = \"caller,delete,die,do,dump,elsif,eval,exit,foreach,for,\" +\n      \"goto,if,import,last,local,my,next,no,our,print,package,redo,require,\" +\n      \"sub,undef,unless,until,use,wantarray,while,BEGIN,END\";\n  var PYTHON_KEYWORDS = [FLOW_CONTROL_KEYWORDS, \"and,as,assert,class,def,del,\" +\n      \"elif,except,exec,finally,from,global,import,in,is,lambda,\" +\n      \"nonlocal,not,or,pass,print,raise,try,with,yield,\" +\n      \"False,True,None\"];\n  var RUBY_KEYWORDS = [FLOW_CONTROL_KEYWORDS, \"alias,and,begin,case,class,\" +\n      \"def,defined,elsif,end,ensure,false,in,module,next,nil,not,or,redo,\" +\n      \"rescue,retry,self,super,then,true,undef,unless,until,when,yield,\" +\n      \"BEGIN,END\"];\n   var RUST_KEYWORDS = [FLOW_CONTROL_KEYWORDS, \"as,assert,const,copy,drop,\" +\n      \"enum,extern,fail,false,fn,impl,let,log,loop,match,mod,move,mut,priv,\" +\n      \"pub,pure,ref,self,static,struct,true,trait,type,unsafe,use\"];\n  var SH_KEYWORDS = [FLOW_CONTROL_KEYWORDS, \"case,done,elif,esac,eval,fi,\" +\n      \"function,in,local,set,then,until\"];\n  var ALL_KEYWORDS = [\n      CPP_KEYWORDS, CSHARP_KEYWORDS, JSCRIPT_KEYWORDS, PERL_KEYWORDS,\n      PYTHON_KEYWORDS, RUBY_KEYWORDS, SH_KEYWORDS];\n  var C_TYPES = /^(DIR|FILE|vector|(de|priority_)?queue|list|stack|(const_)?iterator|(multi)?(set|map)|bitset|u?(int|float)\\d*)\\b/;\n\n  // token style names.  correspond to css classes\n  /**\n   * token style for a string literal\n   * @const\n   */\n  var PR_STRING = 'str';\n  /**\n   * token style for a keyword\n   * @const\n   */\n  var PR_KEYWORD = 'kwd';\n  /**\n   * token style for a comment\n   * @const\n   */\n  var PR_COMMENT = 'com';\n  /**\n   * token style for a type\n   * @const\n   */\n  var PR_TYPE = 'typ';\n  /**\n   * token style for a literal value.  e.g. 1, null, true.\n   * @const\n   */\n  var PR_LITERAL = 'lit';\n  /**\n   * token style for a punctuation string.\n   * @const\n   */\n  var PR_PUNCTUATION = 'pun';\n  /**\n   * token style for plain text.\n   * @const\n   */\n  var PR_PLAIN = 'pln';\n\n  /**\n   * token style for an sgml tag.\n   * @const\n   */\n  var PR_TAG = 'tag';\n  /**\n   * token style for a markup declaration such as a DOCTYPE.\n   * @const\n   */\n  var PR_DECLARATION = 'dec';\n  /**\n   * token style for embedded source.\n   * @const\n   */\n  var PR_SOURCE = 'src';\n  /**\n   * token style for an sgml attribute name.\n   * @const\n   */\n  var PR_ATTRIB_NAME = 'atn';\n  /**\n   * token style for an sgml attribute value.\n   * @const\n   */\n  var PR_ATTRIB_VALUE = 'atv';\n\n  /**\n   * A class that indicates a section of markup that is not code, e.g. to allow\n   * embedding of line numbers within code listings.\n   * @const\n   */\n  var PR_NOCODE = 'nocode';\n\n  \n  \n  /**\n   * A set of tokens that can precede a regular expression literal in\n   * javascript\n   * http://web.archive.org/web/20070717142515/http://www.mozilla.org/js/language/js20/rationale/syntax.html\n   * has the full list, but I've removed ones that might be problematic when\n   * seen in languages that don't support regular expression literals.\n   *\n   * <p>Specifically, I've removed any keywords that can't precede a regexp\n   * literal in a syntactically legal javascript program, and I've removed the\n   * \"in\" keyword since it's not a keyword in many languages, and might be used\n   * as a count of inches.\n   *\n   * <p>The link above does not accurately describe EcmaScript rules since\n   * it fails to distinguish between (a=++/b/i) and (a++/b/i) but it works\n   * very well in practice.\n   *\n   * @private\n   * @const\n   */\n  var REGEXP_PRECEDER_PATTERN = '(?:^^\\\\.?|[+-]|[!=]=?=?|\\\\#|%=?|&&?=?|\\\\(|\\\\*=?|[+\\\\-]=|->|\\\\/=?|::?|<<?=?|>>?>?=?|,|;|\\\\?|@|\\\\[|~|{|\\\\^\\\\^?=?|\\\\|\\\\|?=?|break|case|continue|delete|do|else|finally|instanceof|return|throw|try|typeof)\\\\s*';\n  \n  // CAVEAT: this does not properly handle the case where a regular\n  // expression immediately follows another since a regular expression may\n  // have flags for case-sensitivity and the like.  Having regexp tokens\n  // adjacent is not valid in any language I'm aware of, so I'm punting.\n  // TODO: maybe style special characters inside a regexp as punctuation.\n\n  /**\n   * Given a group of {@link RegExp}s, returns a {@code RegExp} that globally\n   * matches the union of the sets of strings matched by the input RegExp.\n   * Since it matches globally, if the input strings have a start-of-input\n   * anchor (/^.../), it is ignored for the purposes of unioning.\n   * @param {Array.<RegExp>} regexs non multiline, non-global regexs.\n   * @return {RegExp} a global regex.\n   */\n  function combinePrefixPatterns(regexs) {\n    var capturedGroupIndex = 0;\n  \n    var needToFoldCase = false;\n    var ignoreCase = false;\n    for (var i = 0, n = regexs.length; i < n; ++i) {\n      var regex = regexs[i];\n      if (regex.ignoreCase) {\n        ignoreCase = true;\n      } else if (/[a-z]/i.test(regex.source.replace(\n                     /\\\\u[0-9a-f]{4}|\\\\x[0-9a-f]{2}|\\\\[^ux]/gi, ''))) {\n        needToFoldCase = true;\n        ignoreCase = false;\n        break;\n      }\n    }\n  \n    var escapeCharToCodeUnit = {\n      'b': 8,\n      't': 9,\n      'n': 0xa,\n      'v': 0xb,\n      'f': 0xc,\n      'r': 0xd\n    };\n  \n    function decodeEscape(charsetPart) {\n      var cc0 = charsetPart.charCodeAt(0);\n      if (cc0 !== 92 /* \\\\ */) {\n        return cc0;\n      }\n      var c1 = charsetPart.charAt(1);\n      cc0 = escapeCharToCodeUnit[c1];\n      if (cc0) {\n        return cc0;\n      } else if ('0' <= c1 && c1 <= '7') {\n        return parseInt(charsetPart.substring(1), 8);\n      } else if (c1 === 'u' || c1 === 'x') {\n        return parseInt(charsetPart.substring(2), 16);\n      } else {\n        return charsetPart.charCodeAt(1);\n      }\n    }\n  \n    function encodeEscape(charCode) {\n      if (charCode < 0x20) {\n        return (charCode < 0x10 ? '\\\\x0' : '\\\\x') + charCode.toString(16);\n      }\n      var ch = String.fromCharCode(charCode);\n      return (ch === '\\\\' || ch === '-' || ch === ']' || ch === '^')\n          ? \"\\\\\" + ch : ch;\n    }\n  \n    function caseFoldCharset(charSet) {\n      var charsetParts = charSet.substring(1, charSet.length - 1).match(\n          new RegExp(\n              '\\\\\\\\u[0-9A-Fa-f]{4}'\n              + '|\\\\\\\\x[0-9A-Fa-f]{2}'\n              + '|\\\\\\\\[0-3][0-7]{0,2}'\n              + '|\\\\\\\\[0-7]{1,2}'\n              + '|\\\\\\\\[\\\\s\\\\S]'\n              + '|-'\n              + '|[^-\\\\\\\\]',\n              'g'));\n      var ranges = [];\n      var inverse = charsetParts[0] === '^';\n  \n      var out = ['['];\n      if (inverse) { out.push('^'); }\n  \n      for (var i = inverse ? 1 : 0, n = charsetParts.length; i < n; ++i) {\n        var p = charsetParts[i];\n        if (/\\\\[bdsw]/i.test(p)) {  // Don't muck with named groups.\n          out.push(p);\n        } else {\n          var start = decodeEscape(p);\n          var end;\n          if (i + 2 < n && '-' === charsetParts[i + 1]) {\n            end = decodeEscape(charsetParts[i + 2]);\n            i += 2;\n          } else {\n            end = start;\n          }\n          ranges.push([start, end]);\n          // If the range might intersect letters, then expand it.\n          // This case handling is too simplistic.\n          // It does not deal with non-latin case folding.\n          // It works for latin source code identifiers though.\n          if (!(end < 65 || start > 122)) {\n            if (!(end < 65 || start > 90)) {\n              ranges.push([Math.max(65, start) | 32, Math.min(end, 90) | 32]);\n            }\n            if (!(end < 97 || start > 122)) {\n              ranges.push([Math.max(97, start) & ~32, Math.min(end, 122) & ~32]);\n            }\n          }\n        }\n      }\n  \n      // [[1, 10], [3, 4], [8, 12], [14, 14], [16, 16], [17, 17]]\n      // -> [[1, 12], [14, 14], [16, 17]]\n      ranges.sort(function (a, b) { return (a[0] - b[0]) || (b[1]  - a[1]); });\n      var consolidatedRanges = [];\n      var lastRange = [];\n      for (var i = 0; i < ranges.length; ++i) {\n        var range = ranges[i];\n        if (range[0] <= lastRange[1] + 1) {\n          lastRange[1] = Math.max(lastRange[1], range[1]);\n        } else {\n          consolidatedRanges.push(lastRange = range);\n        }\n      }\n  \n      for (var i = 0; i < consolidatedRanges.length; ++i) {\n        var range = consolidatedRanges[i];\n        out.push(encodeEscape(range[0]));\n        if (range[1] > range[0]) {\n          if (range[1] + 1 > range[0]) { out.push('-'); }\n          out.push(encodeEscape(range[1]));\n        }\n      }\n      out.push(']');\n      return out.join('');\n    }\n  \n    function allowAnywhereFoldCaseAndRenumberGroups(regex) {\n      // Split into character sets, escape sequences, punctuation strings\n      // like ('(', '(?:', ')', '^'), and runs of characters that do not\n      // include any of the above.\n      var parts = regex.source.match(\n          new RegExp(\n              '(?:'\n              + '\\\\[(?:[^\\\\x5C\\\\x5D]|\\\\\\\\[\\\\s\\\\S])*\\\\]'  // a character set\n              + '|\\\\\\\\u[A-Fa-f0-9]{4}'  // a unicode escape\n              + '|\\\\\\\\x[A-Fa-f0-9]{2}'  // a hex escape\n              + '|\\\\\\\\[0-9]+'  // a back-reference or octal escape\n              + '|\\\\\\\\[^ux0-9]'  // other escape sequence\n              + '|\\\\(\\\\?[:!=]'  // start of a non-capturing group\n              + '|[\\\\(\\\\)\\\\^]'  // start/end of a group, or line start\n              + '|[^\\\\x5B\\\\x5C\\\\(\\\\)\\\\^]+'  // run of other characters\n              + ')',\n              'g'));\n      var n = parts.length;\n  \n      // Maps captured group numbers to the number they will occupy in\n      // the output or to -1 if that has not been determined, or to\n      // undefined if they need not be capturing in the output.\n      var capturedGroups = [];\n  \n      // Walk over and identify back references to build the capturedGroups\n      // mapping.\n      for (var i = 0, groupIndex = 0; i < n; ++i) {\n        var p = parts[i];\n        if (p === '(') {\n          // groups are 1-indexed, so max group index is count of '('\n          ++groupIndex;\n        } else if ('\\\\' === p.charAt(0)) {\n          var decimalValue = +p.substring(1);\n          if (decimalValue) {\n            if (decimalValue <= groupIndex) {\n              capturedGroups[decimalValue] = -1;\n            } else {\n              // Replace with an unambiguous escape sequence so that\n              // an octal escape sequence does not turn into a backreference\n              // to a capturing group from an earlier regex.\n              parts[i] = encodeEscape(decimalValue);\n            }\n          }\n        }\n      }\n  \n      // Renumber groups and reduce capturing groups to non-capturing groups\n      // where possible.\n      for (var i = 1; i < capturedGroups.length; ++i) {\n        if (-1 === capturedGroups[i]) {\n          capturedGroups[i] = ++capturedGroupIndex;\n        }\n      }\n      for (var i = 0, groupIndex = 0; i < n; ++i) {\n        var p = parts[i];\n        if (p === '(') {\n          ++groupIndex;\n          if (!capturedGroups[groupIndex]) {\n            parts[i] = '(?:';\n          }\n        } else if ('\\\\' === p.charAt(0)) {\n          var decimalValue = +p.substring(1);\n          if (decimalValue && decimalValue <= groupIndex) {\n            parts[i] = '\\\\' + capturedGroups[decimalValue];\n          }\n        }\n      }\n  \n      // Remove any prefix anchors so that the output will match anywhere.\n      // ^^ really does mean an anchored match though.\n      for (var i = 0; i < n; ++i) {\n        if ('^' === parts[i] && '^' !== parts[i + 1]) { parts[i] = ''; }\n      }\n  \n      // Expand letters to groups to handle mixing of case-sensitive and\n      // case-insensitive patterns if necessary.\n      if (regex.ignoreCase && needToFoldCase) {\n        for (var i = 0; i < n; ++i) {\n          var p = parts[i];\n          var ch0 = p.charAt(0);\n          if (p.length >= 2 && ch0 === '[') {\n            parts[i] = caseFoldCharset(p);\n          } else if (ch0 !== '\\\\') {\n            // TODO: handle letters in numeric escapes.\n            parts[i] = p.replace(\n                /[a-zA-Z]/g,\n                function (ch) {\n                  var cc = ch.charCodeAt(0);\n                  return '[' + String.fromCharCode(cc & ~32, cc | 32) + ']';\n                });\n          }\n        }\n      }\n  \n      return parts.join('');\n    }\n  \n    var rewritten = [];\n    for (var i = 0, n = regexs.length; i < n; ++i) {\n      var regex = regexs[i];\n      if (regex.global || regex.multiline) { throw new Error('' + regex); }\n      rewritten.push(\n          '(?:' + allowAnywhereFoldCaseAndRenumberGroups(regex) + ')');\n    }\n  \n    return new RegExp(rewritten.join('|'), ignoreCase ? 'gi' : 'g');\n  }\n\n  /**\n   * Split markup into a string of source code and an array mapping ranges in\n   * that string to the text nodes in which they appear.\n   *\n   * <p>\n   * The HTML DOM structure:</p>\n   * <pre>\n   * (Element   \"p\"\n   *   (Element \"b\"\n   *     (Text  \"print \"))       ; #1\n   *   (Text    \"'Hello '\")      ; #2\n   *   (Element \"br\")            ; #3\n   *   (Text    \"  + 'World';\")) ; #4\n   * </pre>\n   * <p>\n   * corresponds to the HTML\n   * {@code <p><b>print </b>'Hello '<br>  + 'World';</p>}.</p>\n   *\n   * <p>\n   * It will produce the output:</p>\n   * <pre>\n   * {\n   *   sourceCode: \"print 'Hello '\\n  + 'World';\",\n   *   //                     1          2\n   *   //           012345678901234 5678901234567\n   *   spans: [0, #1, 6, #2, 14, #3, 15, #4]\n   * }\n   * </pre>\n   * <p>\n   * where #1 is a reference to the {@code \"print \"} text node above, and so\n   * on for the other text nodes.\n   * </p>\n   *\n   * <p>\n   * The {@code} spans array is an array of pairs.  Even elements are the start\n   * indices of substrings, and odd elements are the text nodes (or BR elements)\n   * that contain the text for those substrings.\n   * Substrings continue until the next index or the end of the source.\n   * </p>\n   *\n   * @param {Node} node an HTML DOM subtree containing source-code.\n   * @param {boolean} isPreformatted true if white-space in text nodes should\n   *    be considered significant.\n   * @return {Object} source code and the text nodes in which they occur.\n   */\n  function extractSourceSpans(node, isPreformatted) {\n    var nocode = /(?:^|\\s)nocode(?:\\s|$)/;\n  \n    var chunks = [];\n    var length = 0;\n    var spans = [];\n    var k = 0;\n  \n    function walk(node) {\n      var type = node.nodeType;\n      if (type == 1) {  // Element\n        if (nocode.test(node.className)) { return; }\n        for (var child = node.firstChild; child; child = child.nextSibling) {\n          walk(child);\n        }\n        var nodeName = node.nodeName.toLowerCase();\n        if ('br' === nodeName || 'li' === nodeName) {\n          chunks[k] = '\\n';\n          spans[k << 1] = length++;\n          spans[(k++ << 1) | 1] = node;\n        }\n      } else if (type == 3 || type == 4) {  // Text\n        var text = node.nodeValue;\n        if (text.length) {\n          if (!isPreformatted) {\n            text = text.replace(/[ \\t\\r\\n]+/g, ' ');\n          } else {\n            text = text.replace(/\\r\\n?/g, '\\n');  // Normalize newlines.\n          }\n          // TODO: handle tabs here?\n          chunks[k] = text;\n          spans[k << 1] = length;\n          length += text.length;\n          spans[(k++ << 1) | 1] = node;\n        }\n      }\n    }\n  \n    walk(node);\n  \n    return {\n      sourceCode: chunks.join('').replace(/\\n$/, ''),\n      spans: spans\n    };\n  }\n\n  /**\n   * Apply the given language handler to sourceCode and add the resulting\n   * decorations to out.\n   * @param {number} basePos the index of sourceCode within the chunk of source\n   *    whose decorations are already present on out.\n   */\n  function appendDecorations(basePos, sourceCode, langHandler, out) {\n    if (!sourceCode) { return; }\n    var job = {\n      sourceCode: sourceCode,\n      basePos: basePos\n    };\n    langHandler(job);\n    out.push.apply(out, job.decorations);\n  }\n\n  var notWs = /\\S/;\n\n  /**\n   * Given an element, if it contains only one child element and any text nodes\n   * it contains contain only space characters, return the sole child element.\n   * Otherwise returns undefined.\n   * <p>\n   * This is meant to return the CODE element in {@code <pre><code ...>} when\n   * there is a single child element that contains all the non-space textual\n   * content, but not to return anything where there are multiple child elements\n   * as in {@code <pre><code>...</code><code>...</code></pre>} or when there\n   * is textual content.\n   */\n  function childContentWrapper(element) {\n    var wrapper = undefined;\n    for (var c = element.firstChild; c; c = c.nextSibling) {\n      var type = c.nodeType;\n      wrapper = (type === 1)  // Element Node\n          ? (wrapper ? element : c)\n          : (type === 3)  // Text Node\n          ? (notWs.test(c.nodeValue) ? element : wrapper)\n          : wrapper;\n    }\n    return wrapper === element ? undefined : wrapper;\n  }\n\n  /** Given triples of [style, pattern, context] returns a lexing function,\n    * The lexing function interprets the patterns to find token boundaries and\n    * returns a decoration list of the form\n    * [index_0, style_0, index_1, style_1, ..., index_n, style_n]\n    * where index_n is an index into the sourceCode, and style_n is a style\n    * constant like PR_PLAIN.  index_n-1 <= index_n, and style_n-1 applies to\n    * all characters in sourceCode[index_n-1:index_n].\n    *\n    * The stylePatterns is a list whose elements have the form\n    * [style : string, pattern : RegExp, DEPRECATED, shortcut : string].\n    *\n    * Style is a style constant like PR_PLAIN, or can be a string of the\n    * form 'lang-FOO', where FOO is a language extension describing the\n    * language of the portion of the token in $1 after pattern executes.\n    * E.g., if style is 'lang-lisp', and group 1 contains the text\n    * '(hello (world))', then that portion of the token will be passed to the\n    * registered lisp handler for formatting.\n    * The text before and after group 1 will be restyled using this decorator\n    * so decorators should take care that this doesn't result in infinite\n    * recursion.  For example, the HTML lexer rule for SCRIPT elements looks\n    * something like ['lang-js', /<[s]cript>(.+?)<\\/script>/].  This may match\n    * '<script>foo()<\\/script>', which would cause the current decorator to\n    * be called with '<script>' which would not match the same rule since\n    * group 1 must not be empty, so it would be instead styled as PR_TAG by\n    * the generic tag rule.  The handler registered for the 'js' extension would\n    * then be called with 'foo()', and finally, the current decorator would\n    * be called with '<\\/script>' which would not match the original rule and\n    * so the generic tag rule would identify it as a tag.\n    *\n    * Pattern must only match prefixes, and if it matches a prefix, then that\n    * match is considered a token with the same style.\n    *\n    * Context is applied to the last non-whitespace, non-comment token\n    * recognized.\n    *\n    * Shortcut is an optional string of characters, any of which, if the first\n    * character, gurantee that this pattern and only this pattern matches.\n    *\n    * @param {Array} shortcutStylePatterns patterns that always start with\n    *   a known character.  Must have a shortcut string.\n    * @param {Array} fallthroughStylePatterns patterns that will be tried in\n    *   order if the shortcut ones fail.  May have shortcuts.\n    *\n    * @return {function (Object)} a\n    *   function that takes source code and returns a list of decorations.\n    */\n  function createSimpleLexer(shortcutStylePatterns, fallthroughStylePatterns) {\n    var shortcuts = {};\n    var tokenizer;\n    (function () {\n      var allPatterns = shortcutStylePatterns.concat(fallthroughStylePatterns);\n      var allRegexs = [];\n      var regexKeys = {};\n      for (var i = 0, n = allPatterns.length; i < n; ++i) {\n        var patternParts = allPatterns[i];\n        var shortcutChars = patternParts[3];\n        if (shortcutChars) {\n          for (var c = shortcutChars.length; --c >= 0;) {\n            shortcuts[shortcutChars.charAt(c)] = patternParts;\n          }\n        }\n        var regex = patternParts[1];\n        var k = '' + regex;\n        if (!regexKeys.hasOwnProperty(k)) {\n          allRegexs.push(regex);\n          regexKeys[k] = null;\n        }\n      }\n      allRegexs.push(/[\\0-\\uffff]/);\n      tokenizer = combinePrefixPatterns(allRegexs);\n    })();\n\n    var nPatterns = fallthroughStylePatterns.length;\n\n    /**\n     * Lexes job.sourceCode and produces an output array job.decorations of\n     * style classes preceded by the position at which they start in\n     * job.sourceCode in order.\n     *\n     * @param {Object} job an object like <pre>{\n     *    sourceCode: {string} sourceText plain text,\n     *    basePos: {int} position of job.sourceCode in the larger chunk of\n     *        sourceCode.\n     * }</pre>\n     */\n    var decorate = function (job) {\n      var sourceCode = job.sourceCode, basePos = job.basePos;\n      /** Even entries are positions in source in ascending order.  Odd enties\n        * are style markers (e.g., PR_COMMENT) that run from that position until\n        * the end.\n        * @type {Array.<number|string>}\n        */\n      var decorations = [basePos, PR_PLAIN];\n      var pos = 0;  // index into sourceCode\n      var tokens = sourceCode.match(tokenizer) || [];\n      var styleCache = {};\n\n      for (var ti = 0, nTokens = tokens.length; ti < nTokens; ++ti) {\n        var token = tokens[ti];\n        var style = styleCache[token];\n        var match = void 0;\n\n        var isEmbedded;\n        if (typeof style === 'string') {\n          isEmbedded = false;\n        } else {\n          var patternParts = shortcuts[token.charAt(0)];\n          if (patternParts) {\n            match = token.match(patternParts[1]);\n            style = patternParts[0];\n          } else {\n            for (var i = 0; i < nPatterns; ++i) {\n              patternParts = fallthroughStylePatterns[i];\n              match = token.match(patternParts[1]);\n              if (match) {\n                style = patternParts[0];\n                break;\n              }\n            }\n\n            if (!match) {  // make sure that we make progress\n              style = PR_PLAIN;\n            }\n          }\n\n          isEmbedded = style.length >= 5 && 'lang-' === style.substring(0, 5);\n          if (isEmbedded && !(match && typeof match[1] === 'string')) {\n            isEmbedded = false;\n            style = PR_SOURCE;\n          }\n\n          if (!isEmbedded) { styleCache[token] = style; }\n        }\n\n        var tokenStart = pos;\n        pos += token.length;\n\n        if (!isEmbedded) {\n          decorations.push(basePos + tokenStart, style);\n        } else {  // Treat group 1 as an embedded block of source code.\n          var embeddedSource = match[1];\n          var embeddedSourceStart = token.indexOf(embeddedSource);\n          var embeddedSourceEnd = embeddedSourceStart + embeddedSource.length;\n          if (match[2]) {\n            // If embeddedSource can be blank, then it would match at the\n            // beginning which would cause us to infinitely recurse on the\n            // entire token, so we catch the right context in match[2].\n            embeddedSourceEnd = token.length - match[2].length;\n            embeddedSourceStart = embeddedSourceEnd - embeddedSource.length;\n          }\n          var lang = style.substring(5);\n          // Decorate the left of the embedded source\n          appendDecorations(\n              basePos + tokenStart,\n              token.substring(0, embeddedSourceStart),\n              decorate, decorations);\n          // Decorate the embedded source\n          appendDecorations(\n              basePos + tokenStart + embeddedSourceStart,\n              embeddedSource,\n              langHandlerForExtension(lang, embeddedSource),\n              decorations);\n          // Decorate the right of the embedded section\n          appendDecorations(\n              basePos + tokenStart + embeddedSourceEnd,\n              token.substring(embeddedSourceEnd),\n              decorate, decorations);\n        }\n      }\n      job.decorations = decorations;\n    };\n    return decorate;\n  }\n\n  /** returns a function that produces a list of decorations from source text.\n    *\n    * This code treats \", ', and ` as string delimiters, and \\ as a string\n    * escape.  It does not recognize perl's qq() style strings.\n    * It has no special handling for double delimiter escapes as in basic, or\n    * the tripled delimiters used in python, but should work on those regardless\n    * although in those cases a single string literal may be broken up into\n    * multiple adjacent string literals.\n    *\n    * It recognizes C, C++, and shell style comments.\n    *\n    * @param {Object} options a set of optional parameters.\n    * @return {function (Object)} a function that examines the source code\n    *     in the input job and builds the decoration list.\n    */\n  function sourceDecorator(options) {\n    var shortcutStylePatterns = [], fallthroughStylePatterns = [];\n    if (options['tripleQuotedStrings']) {\n      // '''multi-line-string''', 'single-line-string', and double-quoted\n      shortcutStylePatterns.push(\n          [PR_STRING,  /^(?:\\'\\'\\'(?:[^\\'\\\\]|\\\\[\\s\\S]|\\'{1,2}(?=[^\\']))*(?:\\'\\'\\'|$)|\\\"\\\"\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S]|\\\"{1,2}(?=[^\\\"]))*(?:\\\"\\\"\\\"|$)|\\'(?:[^\\\\\\']|\\\\[\\s\\S])*(?:\\'|$)|\\\"(?:[^\\\\\\\"]|\\\\[\\s\\S])*(?:\\\"|$))/,\n           null, '\\'\"']);\n    } else if (options['multiLineStrings']) {\n      // 'multi-line-string', \"multi-line-string\"\n      shortcutStylePatterns.push(\n          [PR_STRING,  /^(?:\\'(?:[^\\\\\\']|\\\\[\\s\\S])*(?:\\'|$)|\\\"(?:[^\\\\\\\"]|\\\\[\\s\\S])*(?:\\\"|$)|\\`(?:[^\\\\\\`]|\\\\[\\s\\S])*(?:\\`|$))/,\n           null, '\\'\"`']);\n    } else {\n      // 'single-line-string', \"single-line-string\"\n      shortcutStylePatterns.push(\n          [PR_STRING,\n           /^(?:\\'(?:[^\\\\\\'\\r\\n]|\\\\.)*(?:\\'|$)|\\\"(?:[^\\\\\\\"\\r\\n]|\\\\.)*(?:\\\"|$))/,\n           null, '\"\\'']);\n    }\n    if (options['verbatimStrings']) {\n      // verbatim-string-literal production from the C# grammar.  See issue 93.\n      fallthroughStylePatterns.push(\n          [PR_STRING, /^@\\\"(?:[^\\\"]|\\\"\\\")*(?:\\\"|$)/, null]);\n    }\n    var hc = options['hashComments'];\n    if (hc) {\n      if (options['cStyleComments']) {\n        if (hc > 1) {  // multiline hash comments\n          shortcutStylePatterns.push(\n              [PR_COMMENT, /^#(?:##(?:[^#]|#(?!##))*(?:###|$)|.*)/, null, '#']);\n        } else {\n          // Stop C preprocessor declarations at an unclosed open comment\n          shortcutStylePatterns.push(\n              [PR_COMMENT, /^#(?:(?:define|e(?:l|nd)if|else|error|ifn?def|include|line|pragma|undef|warning)\\b|[^\\r\\n]*)/,\n               null, '#']);\n        }\n        // #include <stdio.h>\n        fallthroughStylePatterns.push(\n            [PR_STRING,\n             /^<(?:(?:(?:\\.\\.\\/)*|\\/?)(?:[\\w-]+(?:\\/[\\w-]+)+)?[\\w-]+\\.h(?:h|pp|\\+\\+)?|[a-z]\\w*)>/,\n             null]);\n      } else {\n        shortcutStylePatterns.push([PR_COMMENT, /^#[^\\r\\n]*/, null, '#']);\n      }\n    }\n    if (options['cStyleComments']) {\n      fallthroughStylePatterns.push([PR_COMMENT, /^\\/\\/[^\\r\\n]*/, null]);\n      fallthroughStylePatterns.push(\n          [PR_COMMENT, /^\\/\\*[\\s\\S]*?(?:\\*\\/|$)/, null]);\n    }\n    var regexLiterals = options['regexLiterals'];\n    if (regexLiterals) {\n      /**\n       * @const\n       */\n      var regexExcls = regexLiterals > 1\n        ? ''  // Multiline regex literals\n        : '\\n\\r';\n      /**\n       * @const\n       */\n      var regexAny = regexExcls ? '.' : '[\\\\S\\\\s]';\n      /**\n       * @const\n       */\n      var REGEX_LITERAL = (\n          // A regular expression literal starts with a slash that is\n          // not followed by * or / so that it is not confused with\n          // comments.\n          '/(?=[^/*' + regexExcls + '])'\n          // and then contains any number of raw characters,\n          + '(?:[^/\\\\x5B\\\\x5C' + regexExcls + ']'\n          // escape sequences (\\x5C),\n          +    '|\\\\x5C' + regexAny\n          // or non-nesting character sets (\\x5B\\x5D);\n          +    '|\\\\x5B(?:[^\\\\x5C\\\\x5D' + regexExcls + ']'\n          +             '|\\\\x5C' + regexAny + ')*(?:\\\\x5D|$))+'\n          // finally closed by a /.\n          + '/');\n      fallthroughStylePatterns.push(\n          ['lang-regex',\n           RegExp('^' + REGEXP_PRECEDER_PATTERN + '(' + REGEX_LITERAL + ')')\n           ]);\n    }\n\n    var types = options['types'];\n    if (types) {\n      fallthroughStylePatterns.push([PR_TYPE, types]);\n    }\n\n    var keywords = (\"\" + options['keywords']).replace(/^ | $/g, '');\n    if (keywords.length) {\n      fallthroughStylePatterns.push(\n          [PR_KEYWORD,\n           new RegExp('^(?:' + keywords.replace(/[\\s,]+/g, '|') + ')\\\\b'),\n           null]);\n    }\n\n    shortcutStylePatterns.push([PR_PLAIN,       /^\\s+/, null, ' \\r\\n\\t\\xA0']);\n\n    var punctuation =\n      // The Bash man page says\n\n      // A word is a sequence of characters considered as a single\n      // unit by GRUB. Words are separated by metacharacters,\n      // which are the following plus space, tab, and newline: { }\n      // | & $ ; < >\n      // ...\n      \n      // A word beginning with # causes that word and all remaining\n      // characters on that line to be ignored.\n\n      // which means that only a '#' after /(?:^|[{}|&$;<>\\s])/ starts a\n      // comment but empirically\n      // $ echo {#}\n      // {#}\n      // $ echo \\$#\n      // $#\n      // $ echo }#\n      // }#\n\n      // so /(?:^|[|&;<>\\s])/ is more appropriate.\n\n      // http://gcc.gnu.org/onlinedocs/gcc-2.95.3/cpp_1.html#SEC3\n      // suggests that this definition is compatible with a\n      // default mode that tries to use a single token definition\n      // to recognize both bash/python style comments and C\n      // preprocessor directives.\n\n      // This definition of punctuation does not include # in the list of\n      // follow-on exclusions, so # will not be broken before if preceeded\n      // by a punctuation character.  We could try to exclude # after\n      // [|&;<>] but that doesn't seem to cause many major problems.\n      // If that does turn out to be a problem, we should change the below\n      // when hc is truthy to include # in the run of punctuation characters\n      // only when not followint [|&;<>].\n      '^.[^\\\\s\\\\w.$@\\'\"`/\\\\\\\\]*';\n    if (options['regexLiterals']) {\n      punctuation += '(?!\\s*\\/)';\n    }\n\n    fallthroughStylePatterns.push(\n        // TODO(mikesamuel): recognize non-latin letters and numerals in idents\n        [PR_LITERAL,     /^@[a-z_$][a-z_$@0-9]*/i, null],\n        [PR_TYPE,        /^(?:[@_]?[A-Z]+[a-z][A-Za-z_$@0-9]*|\\w+_t\\b)/, null],\n        [PR_PLAIN,       /^[a-z_$][a-z_$@0-9]*/i, null],\n        [PR_LITERAL,\n         new RegExp(\n             '^(?:'\n             // A hex number\n             + '0x[a-f0-9]+'\n             // or an octal or decimal number,\n             + '|(?:\\\\d(?:_\\\\d+)*\\\\d*(?:\\\\.\\\\d*)?|\\\\.\\\\d\\\\+)'\n             // possibly in scientific notation\n             + '(?:e[+\\\\-]?\\\\d+)?'\n             + ')'\n             // with an optional modifier like UL for unsigned long\n             + '[a-z]*', 'i'),\n         null, '0123456789'],\n        // Don't treat escaped quotes in bash as starting strings.\n        // See issue 144.\n        [PR_PLAIN,       /^\\\\[\\s\\S]?/, null],\n        [PR_PUNCTUATION, new RegExp(punctuation), null]);\n\n    return createSimpleLexer(shortcutStylePatterns, fallthroughStylePatterns);\n  }\n\n  var decorateSource = sourceDecorator({\n        'keywords': ALL_KEYWORDS,\n        'hashComments': true,\n        'cStyleComments': true,\n        'multiLineStrings': true,\n        'regexLiterals': true\n      });\n\n  /**\n   * Given a DOM subtree, wraps it in a list, and puts each line into its own\n   * list item.\n   *\n   * @param {Node} node modified in place.  Its content is pulled into an\n   *     HTMLOListElement, and each line is moved into a separate list item.\n   *     This requires cloning elements, so the input might not have unique\n   *     IDs after numbering.\n   * @param {boolean} isPreformatted true iff white-space in text nodes should\n   *     be treated as significant.\n   */\n  function numberLines(node, opt_startLineNum, isPreformatted) {\n    var nocode = /(?:^|\\s)nocode(?:\\s|$)/;\n    var lineBreak = /\\r\\n?|\\n/;\n  \n    var document = node.ownerDocument;\n  \n    var li = document.createElement('li');\n    while (node.firstChild) {\n      li.appendChild(node.firstChild);\n    }\n    // An array of lines.  We split below, so this is initialized to one\n    // un-split line.\n    var listItems = [li];\n  \n    function walk(node) {\n      var type = node.nodeType;\n      if (type == 1 && !nocode.test(node.className)) {  // Element\n        if ('br' === node.nodeName) {\n          breakAfter(node);\n          // Discard the <BR> since it is now flush against a </LI>.\n          if (node.parentNode) {\n            node.parentNode.removeChild(node);\n          }\n        } else {\n          for (var child = node.firstChild; child; child = child.nextSibling) {\n            walk(child);\n          }\n        }\n      } else if ((type == 3 || type == 4) && isPreformatted) {  // Text\n        var text = node.nodeValue;\n        var match = text.match(lineBreak);\n        if (match) {\n          var firstLine = text.substring(0, match.index);\n          node.nodeValue = firstLine;\n          var tail = text.substring(match.index + match[0].length);\n          if (tail) {\n            var parent = node.parentNode;\n            parent.insertBefore(\n              document.createTextNode(tail), node.nextSibling);\n          }\n          breakAfter(node);\n          if (!firstLine) {\n            // Don't leave blank text nodes in the DOM.\n            node.parentNode.removeChild(node);\n          }\n        }\n      }\n    }\n  \n    // Split a line after the given node.\n    function breakAfter(lineEndNode) {\n      // If there's nothing to the right, then we can skip ending the line\n      // here, and move root-wards since splitting just before an end-tag\n      // would require us to create a bunch of empty copies.\n      while (!lineEndNode.nextSibling) {\n        lineEndNode = lineEndNode.parentNode;\n        if (!lineEndNode) { return; }\n      }\n  \n      function breakLeftOf(limit, copy) {\n        // Clone shallowly if this node needs to be on both sides of the break.\n        var rightSide = copy ? limit.cloneNode(false) : limit;\n        var parent = limit.parentNode;\n        if (parent) {\n          // We clone the parent chain.\n          // This helps us resurrect important styling elements that cross lines.\n          // E.g. in <i>Foo<br>Bar</i>\n          // should be rewritten to <li><i>Foo</i></li><li><i>Bar</i></li>.\n          var parentClone = breakLeftOf(parent, 1);\n          // Move the clone and everything to the right of the original\n          // onto the cloned parent.\n          var next = limit.nextSibling;\n          parentClone.appendChild(rightSide);\n          for (var sibling = next; sibling; sibling = next) {\n            next = sibling.nextSibling;\n            parentClone.appendChild(sibling);\n          }\n        }\n        return rightSide;\n      }\n  \n      var copiedListItem = breakLeftOf(lineEndNode.nextSibling, 0);\n  \n      // Walk the parent chain until we reach an unattached LI.\n      for (var parent;\n           // Check nodeType since IE invents document fragments.\n           (parent = copiedListItem.parentNode) && parent.nodeType === 1;) {\n        copiedListItem = parent;\n      }\n      // Put it on the list of lines for later processing.\n      listItems.push(copiedListItem);\n    }\n  \n    // Split lines while there are lines left to split.\n    for (var i = 0;  // Number of lines that have been split so far.\n         i < listItems.length;  // length updated by breakAfter calls.\n         ++i) {\n      walk(listItems[i]);\n    }\n  \n    // Make sure numeric indices show correctly.\n    if (opt_startLineNum === (opt_startLineNum|0)) {\n      listItems[0].setAttribute('value', opt_startLineNum);\n    }\n  \n    var ol = document.createElement('ol');\n    ol.className = 'linenums';\n    var offset = Math.max(0, ((opt_startLineNum - 1 /* zero index */)) | 0) || 0;\n    for (var i = 0, n = listItems.length; i < n; ++i) {\n      li = listItems[i];\n      // Stick a class on the LIs so that stylesheets can\n      // color odd/even rows, or any other row pattern that\n      // is co-prime with 10.\n      li.className = 'L' + ((i + offset) % 10);\n      if (!li.firstChild) {\n        li.appendChild(document.createTextNode('\\xA0'));\n      }\n      ol.appendChild(li);\n    }\n  \n    node.appendChild(ol);\n  }\n  /**\n   * Breaks {@code job.sourceCode} around style boundaries in\n   * {@code job.decorations} and modifies {@code job.sourceNode} in place.\n   * @param {Object} job like <pre>{\n   *    sourceCode: {string} source as plain text,\n   *    sourceNode: {HTMLElement} the element containing the source,\n   *    spans: {Array.<number|Node>} alternating span start indices into source\n   *       and the text node or element (e.g. {@code <BR>}) corresponding to that\n   *       span.\n   *    decorations: {Array.<number|string} an array of style classes preceded\n   *       by the position at which they start in job.sourceCode in order\n   * }</pre>\n   * @private\n   */\n  function recombineTagsAndDecorations(job) {\n    var isIE8OrEarlier = /\\bMSIE\\s(\\d+)/.exec(navigator.userAgent);\n    isIE8OrEarlier = isIE8OrEarlier && +isIE8OrEarlier[1] <= 8;\n    var newlineRe = /\\n/g;\n  \n    var source = job.sourceCode;\n    var sourceLength = source.length;\n    // Index into source after the last code-unit recombined.\n    var sourceIndex = 0;\n  \n    var spans = job.spans;\n    var nSpans = spans.length;\n    // Index into spans after the last span which ends at or before sourceIndex.\n    var spanIndex = 0;\n  \n    var decorations = job.decorations;\n    var nDecorations = decorations.length;\n    // Index into decorations after the last decoration which ends at or before\n    // sourceIndex.\n    var decorationIndex = 0;\n  \n    // Remove all zero-length decorations.\n    decorations[nDecorations] = sourceLength;\n    var decPos, i;\n    for (i = decPos = 0; i < nDecorations;) {\n      if (decorations[i] !== decorations[i + 2]) {\n        decorations[decPos++] = decorations[i++];\n        decorations[decPos++] = decorations[i++];\n      } else {\n        i += 2;\n      }\n    }\n    nDecorations = decPos;\n  \n    // Simplify decorations.\n    for (i = decPos = 0; i < nDecorations;) {\n      var startPos = decorations[i];\n      // Conflate all adjacent decorations that use the same style.\n      var startDec = decorations[i + 1];\n      var end = i + 2;\n      while (end + 2 <= nDecorations && decorations[end + 1] === startDec) {\n        end += 2;\n      }\n      decorations[decPos++] = startPos;\n      decorations[decPos++] = startDec;\n      i = end;\n    }\n  \n    nDecorations = decorations.length = decPos;\n  \n    var sourceNode = job.sourceNode;\n    var oldDisplay;\n    if (sourceNode) {\n      oldDisplay = sourceNode.style.display;\n      sourceNode.style.display = 'none';\n    }\n    try {\n      var decoration = null;\n      while (spanIndex < nSpans) {\n        var spanStart = spans[spanIndex];\n        var spanEnd = spans[spanIndex + 2] || sourceLength;\n  \n        var decEnd = decorations[decorationIndex + 2] || sourceLength;\n  \n        var end = Math.min(spanEnd, decEnd);\n  \n        var textNode = spans[spanIndex + 1];\n        var styledText;\n        if (textNode.nodeType !== 1  // Don't muck with <BR>s or <LI>s\n            // Don't introduce spans around empty text nodes.\n            && (styledText = source.substring(sourceIndex, end))) {\n          // This may seem bizarre, and it is.  Emitting LF on IE causes the\n          // code to display with spaces instead of line breaks.\n          // Emitting Windows standard issue linebreaks (CRLF) causes a blank\n          // space to appear at the beginning of every line but the first.\n          // Emitting an old Mac OS 9 line separator makes everything spiffy.\n          if (isIE8OrEarlier) {\n            styledText = styledText.replace(newlineRe, '\\r');\n          }\n          textNode.nodeValue = styledText;\n          var document = textNode.ownerDocument;\n          var span = document.createElement('span');\n          span.className = decorations[decorationIndex + 1];\n          var parentNode = textNode.parentNode;\n          parentNode.replaceChild(span, textNode);\n          span.appendChild(textNode);\n          if (sourceIndex < spanEnd) {  // Split off a text node.\n            spans[spanIndex + 1] = textNode\n                // TODO: Possibly optimize by using '' if there's no flicker.\n                = document.createTextNode(source.substring(end, spanEnd));\n            parentNode.insertBefore(textNode, span.nextSibling);\n          }\n        }\n  \n        sourceIndex = end;\n  \n        if (sourceIndex >= spanEnd) {\n          spanIndex += 2;\n        }\n        if (sourceIndex >= decEnd) {\n          decorationIndex += 2;\n        }\n      }\n    } finally {\n      if (sourceNode) {\n        sourceNode.style.display = oldDisplay;\n      }\n    }\n  }\n\n  /** Maps language-specific file extensions to handlers. */\n  var langHandlerRegistry = {};\n  /** Register a language handler for the given file extensions.\n    * @param {function (Object)} handler a function from source code to a list\n    *      of decorations.  Takes a single argument job which describes the\n    *      state of the computation.   The single parameter has the form\n    *      {@code {\n    *        sourceCode: {string} as plain text.\n    *        decorations: {Array.<number|string>} an array of style classes\n    *                     preceded by the position at which they start in\n    *                     job.sourceCode in order.\n    *                     The language handler should assigned this field.\n    *        basePos: {int} the position of source in the larger source chunk.\n    *                 All positions in the output decorations array are relative\n    *                 to the larger source chunk.\n    *      } }\n    * @param {Array.<string>} fileExtensions\n    */\n  function registerLangHandler(handler, fileExtensions) {\n    for (var i = fileExtensions.length; --i >= 0;) {\n      var ext = fileExtensions[i];\n      if (!langHandlerRegistry.hasOwnProperty(ext)) {\n        langHandlerRegistry[ext] = handler;\n      } else if (win['console']) {\n        console['warn']('cannot override language handler %s', ext);\n      }\n    }\n  }\n  function langHandlerForExtension(extension, source) {\n    if (!(extension && langHandlerRegistry.hasOwnProperty(extension))) {\n      // Treat it as markup if the first non whitespace character is a < and\n      // the last non-whitespace character is a >.\n      extension = /^\\s*</.test(source)\n          ? 'default-markup'\n          : 'default-code';\n    }\n    return langHandlerRegistry[extension];\n  }\n  registerLangHandler(decorateSource, ['default-code']);\n  registerLangHandler(\n      createSimpleLexer(\n          [],\n          [\n           [PR_PLAIN,       /^[^<?]+/],\n           [PR_DECLARATION, /^<!\\w[^>]*(?:>|$)/],\n           [PR_COMMENT,     /^<\\!--[\\s\\S]*?(?:-\\->|$)/],\n           // Unescaped content in an unknown language\n           ['lang-',        /^<\\?([\\s\\S]+?)(?:\\?>|$)/],\n           ['lang-',        /^<%([\\s\\S]+?)(?:%>|$)/],\n           [PR_PUNCTUATION, /^(?:<[%?]|[%?]>)/],\n           ['lang-',        /^<xmp\\b[^>]*>([\\s\\S]+?)<\\/xmp\\b[^>]*>/i],\n           // Unescaped content in javascript.  (Or possibly vbscript).\n           ['lang-js',      /^<script\\b[^>]*>([\\s\\S]*?)(<\\/script\\b[^>]*>)/i],\n           // Contains unescaped stylesheet content\n           ['lang-css',     /^<style\\b[^>]*>([\\s\\S]*?)(<\\/style\\b[^>]*>)/i],\n           ['lang-in.tag',  /^(<\\/?[a-z][^<>]*>)/i]\n          ]),\n      ['default-markup', 'htm', 'html', 'mxml', 'xhtml', 'xml', 'xsl']);\n  registerLangHandler(\n      createSimpleLexer(\n          [\n           [PR_PLAIN,        /^[\\s]+/, null, ' \\t\\r\\n'],\n           [PR_ATTRIB_VALUE, /^(?:\\\"[^\\\"]*\\\"?|\\'[^\\']*\\'?)/, null, '\\\"\\'']\n           ],\n          [\n           [PR_TAG,          /^^<\\/?[a-z](?:[\\w.:-]*\\w)?|\\/?>$/i],\n           [PR_ATTRIB_NAME,  /^(?!style[\\s=]|on)[a-z](?:[\\w:-]*\\w)?/i],\n           ['lang-uq.val',   /^=\\s*([^>\\'\\\"\\s]*(?:[^>\\'\\\"\\s\\/]|\\/(?=\\s)))/],\n           [PR_PUNCTUATION,  /^[=<>\\/]+/],\n           ['lang-js',       /^on\\w+\\s*=\\s*\\\"([^\\\"]+)\\\"/i],\n           ['lang-js',       /^on\\w+\\s*=\\s*\\'([^\\']+)\\'/i],\n           ['lang-js',       /^on\\w+\\s*=\\s*([^\\\"\\'>\\s]+)/i],\n           ['lang-css',      /^style\\s*=\\s*\\\"([^\\\"]+)\\\"/i],\n           ['lang-css',      /^style\\s*=\\s*\\'([^\\']+)\\'/i],\n           ['lang-css',      /^style\\s*=\\s*([^\\\"\\'>\\s]+)/i]\n           ]),\n      ['in.tag']);\n  registerLangHandler(\n      createSimpleLexer([], [[PR_ATTRIB_VALUE, /^[\\s\\S]+/]]), ['uq.val']);\n  registerLangHandler(sourceDecorator({\n          'keywords': CPP_KEYWORDS,\n          'hashComments': true,\n          'cStyleComments': true,\n          'types': C_TYPES\n        }), ['c', 'cc', 'cpp', 'cxx', 'cyc', 'm']);\n  registerLangHandler(sourceDecorator({\n          'keywords': 'null,true,false'\n        }), ['json']);\n  registerLangHandler(sourceDecorator({\n          'keywords': CSHARP_KEYWORDS,\n          'hashComments': true,\n          'cStyleComments': true,\n          'verbatimStrings': true,\n          'types': C_TYPES\n        }), ['cs']);\n  registerLangHandler(sourceDecorator({\n          'keywords': JAVA_KEYWORDS,\n          'cStyleComments': true\n        }), ['java']);\n  registerLangHandler(sourceDecorator({\n          'keywords': SH_KEYWORDS,\n          'hashComments': true,\n          'multiLineStrings': true\n        }), ['bash', 'bsh', 'csh', 'sh']);\n  registerLangHandler(sourceDecorator({\n          'keywords': PYTHON_KEYWORDS,\n          'hashComments': true,\n          'multiLineStrings': true,\n          'tripleQuotedStrings': true\n        }), ['cv', 'py', 'python']);\n  registerLangHandler(sourceDecorator({\n          'keywords': PERL_KEYWORDS,\n          'hashComments': true,\n          'multiLineStrings': true,\n          'regexLiterals': 2  // multiline regex literals\n        }), ['perl', 'pl', 'pm']);\n  registerLangHandler(sourceDecorator({\n          'keywords': RUBY_KEYWORDS,\n          'hashComments': true,\n          'multiLineStrings': true,\n          'regexLiterals': true\n        }), ['rb', 'ruby']);\n  registerLangHandler(sourceDecorator({\n          'keywords': JSCRIPT_KEYWORDS,\n          'cStyleComments': true,\n          'regexLiterals': true\n        }), ['javascript', 'js']);\n  registerLangHandler(sourceDecorator({\n          'keywords': COFFEE_KEYWORDS,\n          'hashComments': 3,  // ### style block comments\n          'cStyleComments': true,\n          'multilineStrings': true,\n          'tripleQuotedStrings': true,\n          'regexLiterals': true\n        }), ['coffee']);\n  registerLangHandler(sourceDecorator({\n          'keywords': RUST_KEYWORDS,\n          'cStyleComments': true,\n          'multilineStrings': true\n        }), ['rc', 'rs', 'rust']);\n  registerLangHandler(\n      createSimpleLexer([], [[PR_STRING, /^[\\s\\S]+/]]), ['regex']);\n\n  function applyDecorator(job) {\n    var opt_langExtension = job.langExtension;\n\n    try {\n      // Extract tags, and convert the source code to plain text.\n      var sourceAndSpans = extractSourceSpans(job.sourceNode, job.pre);\n      /** Plain text. @type {string} */\n      var source = sourceAndSpans.sourceCode;\n      job.sourceCode = source;\n      job.spans = sourceAndSpans.spans;\n      job.basePos = 0;\n\n      // Apply the appropriate language handler\n      langHandlerForExtension(opt_langExtension, source)(job);\n\n      // Integrate the decorations and tags back into the source code,\n      // modifying the sourceNode in place.\n      recombineTagsAndDecorations(job);\n    } catch (e) {\n      if (win['console']) {\n        console['log'](e && e['stack'] || e);\n      }\n    }\n  }\n\n  /**\n   * Pretty print a chunk of code.\n   * @param sourceCodeHtml {string} The HTML to pretty print.\n   * @param opt_langExtension {string} The language name to use.\n   *     Typically, a filename extension like 'cpp' or 'java'.\n   * @param opt_numberLines {number|boolean} True to number lines,\n   *     or the 1-indexed number of the first line in sourceCodeHtml.\n   */\n  function $prettyPrintOne(sourceCodeHtml, opt_langExtension, opt_numberLines) {\n    var container = document.createElement('div');\n    // This could cause images to load and onload listeners to fire.\n    // E.g. <img onerror=\"alert(1337)\" src=\"nosuchimage.png\">.\n    // We assume that the inner HTML is from a trusted source.\n    // The pre-tag is required for IE8 which strips newlines from innerHTML\n    // when it is injected into a <pre> tag.\n    // http://stackoverflow.com/questions/451486/pre-tag-loses-line-breaks-when-setting-innerhtml-in-ie\n    // http://stackoverflow.com/questions/195363/inserting-a-newline-into-a-pre-tag-ie-javascript\n    container.innerHTML = '<pre>' + sourceCodeHtml + '</pre>';\n    container = container.firstChild;\n    if (opt_numberLines) {\n      numberLines(container, opt_numberLines, true);\n    }\n\n    var job = {\n      langExtension: opt_langExtension,\n      numberLines: opt_numberLines,\n      sourceNode: container,\n      pre: 1\n    };\n    applyDecorator(job);\n    return container.innerHTML;\n  }\n\n   /**\n    * Find all the {@code <pre>} and {@code <code>} tags in the DOM with\n    * {@code class=prettyprint} and prettify them.\n    *\n    * @param {Function} opt_whenDone called when prettifying is done.\n    * @param {HTMLElement|HTMLDocument} opt_root an element or document\n    *   containing all the elements to pretty print.\n    *   Defaults to {@code document.body}.\n    */\n  function $prettyPrint(opt_whenDone, opt_root) {\n    var root = opt_root || document.body;\n    var doc = root.ownerDocument || document;\n    function byTagName(tn) { return root.getElementsByTagName(tn); }\n    // fetch a list of nodes to rewrite\n    var codeSegments = [byTagName('pre'), byTagName('code'), byTagName('xmp')];\n    var elements = [];\n    for (var i = 0; i < codeSegments.length; ++i) {\n      for (var j = 0, n = codeSegments[i].length; j < n; ++j) {\n        elements.push(codeSegments[i][j]);\n      }\n    }\n    codeSegments = null;\n\n    var clock = Date;\n    if (!clock['now']) {\n      clock = { 'now': function () { return +(new Date); } };\n    }\n\n    // The loop is broken into a series of continuations to make sure that we\n    // don't make the browser unresponsive when rewriting a large page.\n    var k = 0;\n    var prettyPrintingJob;\n\n    var langExtensionRe = /\\blang(?:uage)?-([\\w.]+)(?!\\S)/;\n    var prettyPrintRe = /\\bprettyprint\\b/;\n    var prettyPrintedRe = /\\bprettyprinted\\b/;\n    var preformattedTagNameRe = /pre|xmp/i;\n    var codeRe = /^code$/i;\n    var preCodeXmpRe = /^(?:pre|code|xmp)$/i;\n    var EMPTY = {};\n\n    function doWork() {\n      var endTime = (win['PR_SHOULD_USE_CONTINUATION'] ?\n                     clock['now']() + 250 /* ms */ :\n                     Infinity);\n      for (; k < elements.length && clock['now']() < endTime; k++) {\n        var cs = elements[k];\n\n        // Look for a preceding comment like\n        // <?prettify lang=\"...\" linenums=\"...\"?>\n        var attrs = EMPTY;\n        {\n          for (var preceder = cs; (preceder = preceder.previousSibling);) {\n            var nt = preceder.nodeType;\n            // <?foo?> is parsed by HTML 5 to a comment node (8)\n            // like <!--?foo?-->, but in XML is a processing instruction\n            var value = (nt === 7 || nt === 8) && preceder.nodeValue;\n            if (value\n                ? !/^\\??prettify\\b/.test(value)\n                : (nt !== 3 || /\\S/.test(preceder.nodeValue))) {\n              // Skip over white-space text nodes but not others.\n              break;\n            }\n            if (value) {\n              attrs = {};\n              value.replace(\n                  /\\b(\\w+)=([\\w:.%+-]+)/g,\n                function (_, name, value) { attrs[name] = value; });\n              break;\n            }\n          }\n        }\n\n        var className = cs.className;\n        if ((attrs !== EMPTY || prettyPrintRe.test(className))\n            // Don't redo this if we've already done it.\n            // This allows recalling pretty print to just prettyprint elements\n            // that have been added to the page since last call.\n            && !prettyPrintedRe.test(className)) {\n\n          // make sure this is not nested in an already prettified element\n          var nested = false;\n          for (var p = cs.parentNode; p; p = p.parentNode) {\n            var tn = p.tagName;\n            if (preCodeXmpRe.test(tn)\n                && p.className && prettyPrintRe.test(p.className)) {\n              nested = true;\n              break;\n            }\n          }\n          if (!nested) {\n            // Mark done.  If we fail to prettyprint for whatever reason,\n            // we shouldn't try again.\n            cs.className += ' prettyprinted';\n\n            // If the classes includes a language extensions, use it.\n            // Language extensions can be specified like\n            //     <pre class=\"prettyprint lang-cpp\">\n            // the language extension \"cpp\" is used to find a language handler\n            // as passed to PR.registerLangHandler.\n            // HTML5 recommends that a language be specified using \"language-\"\n            // as the prefix instead.  Google Code Prettify supports both.\n            // http://dev.w3.org/html5/spec-author-view/the-code-element.html\n            var langExtension = attrs['lang'];\n            if (!langExtension) {\n              langExtension = className.match(langExtensionRe);\n              // Support <pre class=\"prettyprint\"><code class=\"language-c\">\n              var wrapper;\n              if (!langExtension && (wrapper = childContentWrapper(cs))\n                  && codeRe.test(wrapper.tagName)) {\n                langExtension = wrapper.className.match(langExtensionRe);\n              }\n\n              if (langExtension) { langExtension = langExtension[1]; }\n            }\n\n            var preformatted;\n            if (preformattedTagNameRe.test(cs.tagName)) {\n              preformatted = 1;\n            } else {\n              var currentStyle = cs['currentStyle'];\n              var defaultView = doc.defaultView;\n              var whitespace = (\n                  currentStyle\n                  ? currentStyle['whiteSpace']\n                  : (defaultView\n                     && defaultView.getComputedStyle)\n                  ? defaultView.getComputedStyle(cs, null)\n                  .getPropertyValue('white-space')\n                  : 0);\n              preformatted = whitespace\n                  && 'pre' === whitespace.substring(0, 3);\n            }\n\n            // Look for a class like linenums or linenums:<n> where <n> is the\n            // 1-indexed number of the first line.\n            var lineNums = attrs['linenums'];\n            if (!(lineNums = lineNums === 'true' || +lineNums)) {\n              lineNums = className.match(/\\blinenums\\b(?::(\\d+))?/);\n              lineNums =\n                lineNums\n                ? lineNums[1] && lineNums[1].length\n                  ? +lineNums[1] : true\n                : false;\n            }\n            if (lineNums) { numberLines(cs, lineNums, preformatted); }\n\n            // do the pretty printing\n            prettyPrintingJob = {\n              langExtension: langExtension,\n              sourceNode: cs,\n              numberLines: lineNums,\n              pre: preformatted\n            };\n            applyDecorator(prettyPrintingJob);\n          }\n        }\n      }\n      if (k < elements.length) {\n        // finish up in a continuation\n        setTimeout(doWork, 250);\n      } else if ('function' === typeof opt_whenDone) {\n        opt_whenDone();\n      }\n    }\n\n    doWork();\n  }\n\n  /**\n   * Contains functions for creating and registering new language handlers.\n   * @type {Object}\n   */\n  var PR = win['PR'] = {\n        'createSimpleLexer': createSimpleLexer,\n        'registerLangHandler': registerLangHandler,\n        'sourceDecorator': sourceDecorator,\n        'PR_ATTRIB_NAME': PR_ATTRIB_NAME,\n        'PR_ATTRIB_VALUE': PR_ATTRIB_VALUE,\n        'PR_COMMENT': PR_COMMENT,\n        'PR_DECLARATION': PR_DECLARATION,\n        'PR_KEYWORD': PR_KEYWORD,\n        'PR_LITERAL': PR_LITERAL,\n        'PR_NOCODE': PR_NOCODE,\n        'PR_PLAIN': PR_PLAIN,\n        'PR_PUNCTUATION': PR_PUNCTUATION,\n        'PR_SOURCE': PR_SOURCE,\n        'PR_STRING': PR_STRING,\n        'PR_TAG': PR_TAG,\n        'PR_TYPE': PR_TYPE,\n        'prettyPrintOne':\n           IN_GLOBAL_SCOPE\n             ? (win['prettyPrintOne'] = $prettyPrintOne)\n             : (prettyPrintOne = $prettyPrintOne),\n        'prettyPrint': prettyPrint =\n           IN_GLOBAL_SCOPE\n             ? (win['prettyPrint'] = $prettyPrint)\n             : (prettyPrint = $prettyPrint)\n      };\n\n  // Make PR available via the Asynchronous Module Definition (AMD) API.\n  // Per https://github.com/amdjs/amdjs-api/wiki/AMD:\n  // The Asynchronous Module Definition (AMD) API specifies a\n  // mechanism for defining modules such that the module and its\n  // dependencies can be asynchronously loaded.\n  // ...\n  // To allow a clear indicator that a global define function (as\n  // needed for script src browser loading) conforms to the AMD API,\n  // any global define function SHOULD have a property called \"amd\"\n  // whose value is an object. This helps avoid conflict with any\n  // other existing JavaScript code that could have defined a define()\n  // function that does not conform to the AMD API.\n  if (typeof define === \"function\" && define['amd']) {\n    define(\"google-code-prettify\", [], function () {\n      return PR; \n    });\n  }\n})();\n"],"names":["window","win","FLOW_CONTROL_KEYWORDS","COMMON_KEYWORDS","CPP_KEYWORDS","JAVA_KEYWORDS","CSHARP_KEYWORDS","JSCRIPT_KEYWORDS","PERL_KEYWORDS","PYTHON_KEYWORDS","RUBY_KEYWORDS","RUST_KEYWORDS","SH_KEYWORDS","C_TYPES","PR_STRING","PR_COMMENT","PR_TYPE","PR_LITERAL","PR_PUNCTUATION","PR_PLAIN","PR_ATTRIB_VALUE","appendDecorations","basePos","sourceCode","langHandler","out","job","push","apply","decorations","notWs","childContentWrapper","element","wrapper","undefined","c","firstChild","nextSibling","type","nodeType","test","nodeValue","createSimpleLexer","shortcutStylePatterns","fallthroughStylePatterns","tokenizer","shortcuts","allPatterns","concat","allRegexs","regexKeys","i","n","length","patternParts","shortcutChars","charAt","regex","k","hasOwnProperty","regexs","capturedGroupIndex","needToFoldCase","ignoreCase","source","replace","escapeCharToCodeUnit","decodeEscape","charsetPart","cc0","charCodeAt","c1","parseInt","substring","encodeEscape","charCode","toString","ch","String","fromCharCode","caseFoldCharset","charSet","charsetParts","match","RegExp","ranges","inverse","p","end","start","Math","max","min","sort","a","b","consolidatedRanges","lastRange","range","join","allowAnywhereFoldCaseAndRenumberGroups","parts","capturedGroups","groupIndex","decimalValue","ch0","cc","rewritten","global","multiline","Error","combinePrefixPatterns","nPatterns","decorate","pos","tokens","styleCache","ti","nTokens","isEmbedded","token","style","tokenStart","embeddedSource","embeddedSourceStart","indexOf","embeddedSourceEnd","lang","langHandlerForExtension","sourceDecorator","options","hc","regexLiterals","regexExcls","regexAny","REGEX_LITERAL","types","keywords","punctuation","decorateSource","numberLines","node","opt_startLineNum","isPreformatted","nocode","lineBreak","document","ownerDocument","li","createElement","appendChild","listItems","walk","className","text","firstLine","index","tail","parentNode","insertBefore","createTextNode","breakAfter","removeChild","nodeName","child","lineEndNode","parent","copiedListItem","breakLeftOf","limit","copy","rightSide","cloneNode","parentClone","next","sibling","setAttribute","ol","offset","langHandlerRegistry","registerLangHandler","handler","fileExtensions","ext","console","extension","applyDecorator","chunks","spans","opt_langExtension","langExtension","sourceAndSpans","sourceNode","pre","toLowerCase","isIE8OrEarlier","exec","navigator","userAgent","decPos","newlineRe","sourceLength","sourceIndex","nSpans","spanIndex","nDecorations","decorationIndex","startPos","startDec","oldDisplay","display","styledText","spanEnd","decEnd","textNode","span","replaceChild","recombineTagsAndDecorations","e","$prettyPrintOne","sourceCodeHtml","opt_numberLines","container","innerHTML","$prettyPrint","opt_whenDone","opt_root","root","body","doc","byTagName","tn","getElementsByTagName","codeSegments","elements","j","clock","Date","langExtensionRe","prettyPrintRe","prettyPrintedRe","preformattedTagNameRe","codeRe","preCodeXmpRe","EMPTY","doWork","endTime","Infinity","cs","attrs","preceder","previousSibling","nt","value","_","name","nested","tagName","preformatted","currentStyle","defaultView","whitespace","getComputedStyle","getPropertyValue","lineNums","setTimeout","PR"],"sourceRoot":""}