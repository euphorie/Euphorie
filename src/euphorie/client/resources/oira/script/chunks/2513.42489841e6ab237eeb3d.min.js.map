{"version":3,"file":"chunks/2513.42489841e6ab237eeb3d.min.js","mappings":"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","sources":["webpack://@patternslib/patternslib/./node_modules/@fullcalendar/luxon2/main.js"],"sourcesContent":["/*!\nFullCalendar v5.11.3\nDocs & License: https://fullcalendar.io/\n(c) 2022 Adam Shaw\n*/\nimport { __extends } from 'tslib';\nimport { DateTime, Duration } from 'luxon';\nimport { createPlugin, CalendarApi, NamedTimeZoneImpl } from '@fullcalendar/common';\n\nfunction toLuxonDateTime(date, calendar) {\n    if (!(calendar instanceof CalendarApi)) {\n        throw new Error('must supply a CalendarApi instance');\n    }\n    var dateEnv = calendar.getCurrentData().dateEnv;\n    return DateTime.fromJSDate(date, {\n        zone: dateEnv.timeZone,\n        locale: dateEnv.locale.codes[0],\n    });\n}\nfunction toLuxonDuration(duration, calendar) {\n    if (!(calendar instanceof CalendarApi)) {\n        throw new Error('must supply a CalendarApi instance');\n    }\n    var dateEnv = calendar.getCurrentData().dateEnv;\n    return Duration.fromObject(duration, {\n        locale: dateEnv.locale.codes[0],\n    });\n}\nvar LuxonNamedTimeZone = /** @class */ (function (_super) {\n    __extends(LuxonNamedTimeZone, _super);\n    function LuxonNamedTimeZone() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    LuxonNamedTimeZone.prototype.offsetForArray = function (a) {\n        return arrayToLuxon(a, this.timeZoneName).offset;\n    };\n    LuxonNamedTimeZone.prototype.timestampToArray = function (ms) {\n        return luxonToArray(DateTime.fromMillis(ms, {\n            zone: this.timeZoneName,\n        }));\n    };\n    return LuxonNamedTimeZone;\n}(NamedTimeZoneImpl));\nfunction formatWithCmdStr(cmdStr, arg) {\n    var cmd = parseCmdStr(cmdStr);\n    if (arg.end) {\n        var start = arrayToLuxon(arg.start.array, arg.timeZone, arg.localeCodes[0]);\n        var end = arrayToLuxon(arg.end.array, arg.timeZone, arg.localeCodes[0]);\n        return formatRange(cmd, start.toFormat.bind(start), end.toFormat.bind(end), arg.defaultSeparator);\n    }\n    return arrayToLuxon(arg.date.array, arg.timeZone, arg.localeCodes[0]).toFormat(cmd.whole);\n}\nvar main = createPlugin({\n    cmdFormatter: formatWithCmdStr,\n    namedTimeZonedImpl: LuxonNamedTimeZone,\n});\nfunction luxonToArray(datetime) {\n    return [\n        datetime.year,\n        datetime.month - 1,\n        datetime.day,\n        datetime.hour,\n        datetime.minute,\n        datetime.second,\n        datetime.millisecond,\n    ];\n}\nfunction arrayToLuxon(arr, timeZone, locale) {\n    return DateTime.fromObject({\n        year: arr[0],\n        month: arr[1] + 1,\n        day: arr[2],\n        hour: arr[3],\n        minute: arr[4],\n        second: arr[5],\n        millisecond: arr[6],\n    }, {\n        locale: locale,\n        zone: timeZone,\n    });\n}\nfunction parseCmdStr(cmdStr) {\n    var parts = cmdStr.match(/^(.*?)\\{(.*)\\}(.*)$/); // TODO: lookbehinds for escape characters\n    if (parts) {\n        var middle = parseCmdStr(parts[2]);\n        return {\n            head: parts[1],\n            middle: middle,\n            tail: parts[3],\n            whole: parts[1] + middle.whole + parts[3],\n        };\n    }\n    return {\n        head: null,\n        middle: null,\n        tail: null,\n        whole: cmdStr,\n    };\n}\nfunction formatRange(cmd, formatStart, formatEnd, separator) {\n    if (cmd.middle) {\n        var startHead = formatStart(cmd.head);\n        var startMiddle = formatRange(cmd.middle, formatStart, formatEnd, separator);\n        var startTail = formatStart(cmd.tail);\n        var endHead = formatEnd(cmd.head);\n        var endMiddle = formatRange(cmd.middle, formatStart, formatEnd, separator);\n        var endTail = formatEnd(cmd.tail);\n        if (startHead === endHead && startTail === endTail) {\n            return startHead +\n                (startMiddle === endMiddle ? startMiddle : startMiddle + separator + endMiddle) +\n                startTail;\n        }\n    }\n    var startWhole = formatStart(cmd.whole);\n    var endWhole = formatEnd(cmd.whole);\n    if (startWhole === endWhole) {\n        return startWhole;\n    }\n    return startWhole + separator + endWhole;\n}\n\nexport default main;\nexport { toLuxonDateTime, toLuxonDuration };\n//# sourceMappingURL=main.js.map\n"],"names":["toLuxonDateTime","date","calendar","Error","dateEnv","getCurrentData","DateTime","zone","timeZone","locale","codes","toLuxonDuration","duration","Duration","LuxonNamedTimeZone","_super","apply","this","arguments","prototype","offsetForArray","a","arrayToLuxon","timeZoneName","offset","timestampToArray","ms","datetime","year","month","day","hour","minute","second","millisecond","main","cmdFormatter","cmdStr","arg","cmd","parseCmdStr","end","start","array","localeCodes","formatRange","toFormat","bind","defaultSeparator","whole","namedTimeZonedImpl","arr","parts","match","middle","head","tail","formatStart","formatEnd","separator","startHead","startMiddle","startTail","endHead","endMiddle","endTail","startWhole","endWhole"],"sourceRoot":""}