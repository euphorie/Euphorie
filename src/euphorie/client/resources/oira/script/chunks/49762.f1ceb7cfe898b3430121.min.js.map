{"version":3,"file":"chunks/49762.f1ceb7cfe898b3430121.min.js","mappings":"2OAqEO,SAASA,EAAIC,GAAkB,IAAjB,IAAEC,EAAG,OAAEC,GAAQF,EAChCE,EAAOC,iBAAiB,SAAS,KAC7B,GAAIC,EAAAA,EAAIC,SAASJ,EAAIK,WAAY,kBAAmB,QAAUL,EAI1D,OAQJ,MAAMM,EA9Ed,SAAqBC,GAAU,IAAT,IAAEP,GAAKO,EACzB,MAAO,CACHC,KAAM,sBACNC,QAAST,EAAIU,QAAQC,YAErBb,IAAAA,CAAKc,IACDC,EAAAA,EAAAA,eAAcD,GAEd,MAAME,EAAcF,EAAaG,cAAc,wBAC/C,IAAKD,EAED,YADAE,EAAAA,GAAIC,KAAK,0CAIb,MAAMC,EAAiBN,EAAaG,cAAc,0CAGlDD,EAAYK,MAAQnB,EAAIoB,OAAOC,UAC/BP,EAAYQ,cAAc,IAAIC,MAAM,UAEpC,MAAMC,EAAmBC,IACrB,MAAMC,EAAM1B,EAAIoB,OAAOO,SACL,IAAdF,GACAC,EAAIE,QAERF,EAAIG,WAAWf,EAAYK,OAAO,GAClCO,EAAII,KAAK,EAIPC,EAAO5B,EAAAA,EAAI6B,sBAAsBpB,EAAc,UAAU,GAC3DmB,GACAE,EAAAA,EAAOC,mBACHH,EACA,SACA,wBACCI,IAGGA,EAAEC,gBAAgB,IAI1BlB,EAEAe,EAAAA,EAAOC,mBACHhB,EACA,QACA,yBACA,IAAMM,GAAgB,KAI1BS,EAAAA,EAAOC,mBACHpB,EACA,QACA,qBACAU,EAGZ,EAER,CAgBqCZ,CAAa,CAAEZ,IAAKA,IACjDqC,SAASnC,iBACL,6BACCiC,IACG7B,EAAqBR,KAAKqC,EAAEG,OAAOC,UAGnCvC,EAAIwC,cAActC,iBAAiB,6BAA6B,KAE5DI,EAAqBR,KAAKE,EAAIwC,cAAc,GAC9C,GAEN,CAAEC,MAAM,GACX,GAET,C,iIC/FO,MAAMC,EAAU,GAEhB,SAAS7B,EAAc8B,GAG1BA,EAAGC,aAAa,WAAY,MAC5BX,EAAAA,EAAOC,mBACHS,EACA,QACA,kBACAE,UACIC,EAAAA,EAAMC,QAAQ,GACdL,EAAQM,KAAKC,GAAOA,GAAIC,UAAUC,IAAI,iBAAgB,IAE1D,GAEJlB,EAAAA,EAAOC,mBACHS,EACA,OACA,mBACA,KACID,EAAQM,KAAKC,GAAOA,GAAIC,UAAUE,OAAO,iBAAgB,IAE7D,EAER,C","sources":["webpack://@patternslib/patternslib/./node_modules/@patternslib/pat-tiptap/src/extensions/source.js","webpack://@patternslib/patternslib/./node_modules/@patternslib/pat-tiptap/src/focus-handler.js"],"sourcesContent":["import { focus_handler } from \"../focus-handler\";\nimport { log } from \"../tiptap\";\nimport dom from \"@patternslib/patternslib/src/core/dom\";\nimport events from \"@patternslib/patternslib/src/core/events\";\n\nfunction source_panel({ app }) {\n    return {\n        name: \"tiptap-source-panel\",\n        trigger: app.options.sourcePanel,\n\n        init(source_panel) {\n            focus_handler(source_panel);\n\n            const source_text = source_panel.querySelector(\"[name=tiptap-source]\"); // prettier-ignore\n            if (!source_text) {\n                log.warn(\"No source input in source panel found.\");\n                return;\n            }\n\n            const source_confirm = source_panel.querySelector(\".tiptap-confirm, [name=tiptap-confirm]\"); // prettier-ignore\n\n            // set form to initial values\n            source_text.value = app.editor.getHTML();\n            source_text.dispatchEvent(new Event(\"input\"));\n\n            const update_callback = (set_focus) => {\n                const cmd = app.editor.chain();\n                if (set_focus === true) {\n                    cmd.focus();\n                }\n                cmd.setContent(source_text.value, true);\n                cmd.run();\n            };\n\n            // FORM UPDATE\n            const form = dom.querySelectorAllAndMe(source_panel, \"form\")?.[0];\n            if (form) {\n                events.add_event_listener(\n                    form,\n                    \"submit\",\n                    \"tiptap_source_submit\",\n                    (e) => {\n                        // Prevent form submission when hitting \"enter\" within the form.\n                        // The form is handled by JS only.\n                        e.preventDefault();\n                    }\n                );\n            }\n            if (source_confirm) {\n                // update on click on confirm\n                events.add_event_listener(\n                    source_confirm,\n                    \"click\",\n                    \"tiptap_source_confirm\",\n                    () => update_callback(true)\n                );\n            } else {\n                // update on input/change\n                events.add_event_listener(\n                    source_text,\n                    \"input\",\n                    \"tiptap_source_text\",\n                    update_callback\n                );\n            }\n        },\n    };\n}\n\nexport function init({ app, button }) {\n    button.addEventListener(\"click\", () => {\n        if (dom.get_data(app.toolbar_el, \"tiptap-instance\", null) !== app) {\n            // If this pat-tiptap instance is not the one which was last\n            // focused, just return and do nothing.\n            // This might be due to one toolbar shared by multiple editors.\n            return;\n        }\n\n        // Register the source-panel pattern.\n        // Multiple registrations from different tiptap instances are possible\n        // since we're registering it only after the toolbar's source button has\n        // been clicked and clicking in another tiptap instance would override\n        // previous registrations.\n        const source_panel_pattern = source_panel({ app: app });\n        document.addEventListener(\n            \"patterns-injected-delayed\",\n            (e) => {\n                source_panel_pattern.init(e.detail.injected);\n\n                // Register listener on modal for any DOM changes done by pat-inject.\n                app.current_modal.addEventListener(\"patterns-injected-delayed\", () => {\n                    // Re-init panel after injection.\n                    source_panel_pattern.init(app.current_modal);\n                });\n            },\n            { once: true }\n        );\n    });\n}\n","import events from \"@patternslib/patternslib/src/core/events\";\nimport utils from \"@patternslib/patternslib/src/core/utils\";\n\nexport const TARGETS = [];\n\nexport function focus_handler(el) {\n    // make element focusable\n    // See: https://javascript.info/focus-blur\n    el.setAttribute(\"tabindex\", \"-1\"); // not user-selectable but programmatically focusable.\n    events.add_event_listener(\n        el,\n        \"focus\",\n        \"tiptap-focusin\",\n        async () => {\n            utils.timeout(1); // short timeout to ensure focus class is set even if tiptap_blur_handler is called concurrently.\n            TARGETS.map((it) => it?.classList.add(\"tiptap-focus\"));\n        },\n        true\n    );\n    events.add_event_listener(\n        el,\n        \"blur\",\n        \"tiptap-focusout\",\n        () => {\n            TARGETS.map((it) => it?.classList.remove(\"tiptap-focus\"));\n        },\n        true\n    );\n}\n"],"names":["init","_ref2","app","button","addEventListener","dom","get_data","toolbar_el","source_panel_pattern","_ref","name","trigger","options","sourcePanel","source_panel","focus_handler","source_text","querySelector","log","warn","source_confirm","value","editor","getHTML","dispatchEvent","Event","update_callback","set_focus","cmd","chain","focus","setContent","run","form","querySelectorAllAndMe","events","add_event_listener","e","preventDefault","document","detail","injected","current_modal","once","TARGETS","el","setAttribute","async","utils","timeout","map","it","classList","add","remove"],"sourceRoot":""}