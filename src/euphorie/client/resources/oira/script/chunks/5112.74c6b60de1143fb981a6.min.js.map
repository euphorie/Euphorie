{"version":3,"file":"chunks/5112.74c6b60de1143fb981a6.min.js","mappings":"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","sources":["webpack://@patternslib/patternslib/./node_modules/prosemirror-tables/dist/index.es.js","webpack://@patternslib/patternslib/./node_modules/@tiptap/extension-table/dist/tiptap-extension-table.esm.js"],"sourcesContent":["import { PluginKey, TextSelection, Selection, SelectionRange, NodeSelection, Plugin } from 'prosemirror-state';\nimport { Fragment, Slice } from 'prosemirror-model';\nimport { keydownHandler } from 'prosemirror-keymap';\nimport { Decoration, DecorationSet } from 'prosemirror-view';\nimport { Transform } from 'prosemirror-transform';\n\n// Because working with row and column-spanning cells is not quite\n// trivial, this code builds up a descriptive structure for a given\n// table node. The structures are cached with the (persistent) table\n// nodes as key, so that they only have to be recomputed when the\n// content of the table changes.\n//\n// This does mean that they have to store table-relative, not\n// document-relative positions. So code that uses them will typically\n// compute the start position of the table and offset positions passed\n// to or gotten from this structure by that amount.\n\nvar readFromCache, addToCache;\n// Prefer using a weak map to cache table maps. Fall back on a\n// fixed-size cache if that's not supported.\nif (typeof WeakMap != \"undefined\") {\n  var cache = new WeakMap;\n  readFromCache = function (key) { return cache.get(key); };\n  addToCache = function (key, value) {\n    cache.set(key, value);\n    return value\n  };\n} else {\n  var cache$1 = [], cacheSize = 10, cachePos = 0;\n  readFromCache = function (key) {\n    for (var i = 0; i < cache$1.length; i += 2)\n      { if (cache$1[i] == key) { return cache$1[i + 1] } }\n  };\n  addToCache = function (key, value) {\n    if (cachePos == cacheSize) { cachePos = 0; }\n    cache$1[cachePos++] = key;\n    return cache$1[cachePos++] = value\n  };\n}\n\nvar Rect = function Rect(left, top, right, bottom) {\n  this.left = left; this.top = top; this.right = right; this.bottom = bottom;\n};\n\n// ::- A table map describes the structore of a given table. To avoid\n// recomputing them all the time, they are cached per table node. To\n// be able to do that, positions saved in the map are relative to the\n// start of the table, rather than the start of the document.\nvar TableMap = function TableMap(width, height, map, problems) {\n  // :: number The width of the table\n  this.width = width;\n  // :: number The table's height\n  this.height = height;\n  // :: [number] A width * height array with the start position of\n  // the cell covering that part of the table in each slot\n  this.map = map;\n  // An optional array of problems (cell overlap or non-rectangular\n  // shape) for the table, used by the table normalizer.\n  this.problems = problems;\n};\n\n// :: (number) → Rect\n// Find the dimensions of the cell at the given position.\nTableMap.prototype.findCell = function findCell (pos) {\n  for (var i = 0; i < this.map.length; i++) {\n    var curPos = this.map[i];\n    if (curPos != pos) { continue }\n    var left = i % this.width, top = (i / this.width) | 0;\n    var right = left + 1, bottom = top + 1;\n    for (var j = 1; right < this.width && this.map[i + j] == curPos; j++) { right++; }\n    for (var j$1 = 1; bottom < this.height && this.map[i + (this.width * j$1)] == curPos; j$1++) { bottom++; }\n    return new Rect(left, top, right, bottom)\n  }\n  throw new RangeError(\"No cell with offset \" + pos + \" found\")\n};\n\n// :: (number) → number\n// Find the left side of the cell at the given position.\nTableMap.prototype.colCount = function colCount (pos) {\n  for (var i = 0; i < this.map.length; i++)\n    { if (this.map[i] == pos) { return i % this.width } }\n  throw new RangeError(\"No cell with offset \" + pos + \" found\")\n};\n\n// :: (number, string, number) → ?number\n// Find the next cell in the given direction, starting from the cell\n// at `pos`, if any.\nTableMap.prototype.nextCell = function nextCell (pos, axis, dir) {\n  var ref = this.findCell(pos);\n    var left = ref.left;\n    var right = ref.right;\n    var top = ref.top;\n    var bottom = ref.bottom;\n  if (axis == \"horiz\") {\n    if (dir < 0 ? left == 0 : right == this.width) { return null }\n    return this.map[top * this.width + (dir < 0 ? left - 1 : right)]\n  } else {\n    if (dir < 0 ? top == 0 : bottom == this.height) { return null }\n    return this.map[left + this.width * (dir < 0 ? top - 1 : bottom)]\n  }\n};\n\n// :: (number, number) → Rect\n// Get the rectangle spanning the two given cells.\nTableMap.prototype.rectBetween = function rectBetween (a, b) {\n  var ref = this.findCell(a);\n    var leftA = ref.left;\n    var rightA = ref.right;\n    var topA = ref.top;\n    var bottomA = ref.bottom;\n  var ref$1 = this.findCell(b);\n    var leftB = ref$1.left;\n    var rightB = ref$1.right;\n    var topB = ref$1.top;\n    var bottomB = ref$1.bottom;\n  return new Rect(Math.min(leftA, leftB), Math.min(topA, topB),\n                  Math.max(rightA, rightB), Math.max(bottomA, bottomB))\n};\n\n// :: (Rect) → [number]\n// Return the position of all cells that have the top left corner in\n// the given rectangle.\nTableMap.prototype.cellsInRect = function cellsInRect (rect) {\n  var result = [], seen = {};\n  for (var row = rect.top; row < rect.bottom; row++) {\n    for (var col = rect.left; col < rect.right; col++) {\n      var index = row * this.width + col, pos = this.map[index];\n      if (seen[pos]) { continue }\n      seen[pos] = true;\n      if ((col != rect.left || !col || this.map[index - 1] != pos) &&\n          (row != rect.top || !row || this.map[index - this.width] != pos))\n        { result.push(pos); }\n    }\n  }\n  return result\n};\n\n// :: (number, number, Node) → number\n// Return the position at which the cell at the given row and column\n// starts, or would start, if a cell started there.\nTableMap.prototype.positionAt = function positionAt (row, col, table) {\n  for (var i = 0, rowStart = 0;; i++) {\n    var rowEnd = rowStart + table.child(i).nodeSize;\n    if (i == row) {\n      var index = col + row * this.width, rowEndIndex = (row + 1) * this.width;\n      // Skip past cells from previous rows (via rowspan)\n      while (index < rowEndIndex && this.map[index] < rowStart) { index++; }\n      return index == rowEndIndex ? rowEnd - 1 : this.map[index]\n    }\n    rowStart = rowEnd;\n  }\n};\n\n// :: (Node) → TableMap\n// Find the table map for the given table node.\nTableMap.get = function get (table) {\n  return readFromCache(table) || addToCache(table, computeMap(table))\n};\n\n// Compute a table map.\nfunction computeMap(table) {\n  if (table.type.spec.tableRole != \"table\") { throw new RangeError(\"Not a table node: \" + table.type.name) }\n  var width = findWidth(table), height = table.childCount;\n  var map = [], mapPos = 0, problems = null, colWidths = [];\n  for (var i = 0, e = width * height; i < e; i++) { map[i] = 0; }\n\n  for (var row = 0, pos = 0; row < height; row++) {\n    var rowNode = table.child(row);\n    pos++;\n    for (var i$1 = 0;; i$1++) {\n      while (mapPos < map.length && map[mapPos] != 0) { mapPos++; }\n      if (i$1 == rowNode.childCount) { break }\n      var cellNode = rowNode.child(i$1);\n      var ref = cellNode.attrs;\n      var colspan = ref.colspan;\n      var rowspan = ref.rowspan;\n      var colwidth = ref.colwidth;\n      for (var h = 0; h < rowspan; h++) {\n        if (h + row >= height) {\n          (problems || (problems = [])).push({type: \"overlong_rowspan\", pos: pos, n: rowspan - h});\n          break\n        }\n        var start = mapPos + (h * width);\n        for (var w = 0; w < colspan; w++) {\n          if (map[start + w] == 0)\n            { map[start + w] = pos; }\n          else\n            { (problems || (problems = [])).push({type: \"collision\", row: row, pos: pos, n: colspan - w}); }\n          var colW = colwidth && colwidth[w];\n          if (colW) {\n            var widthIndex = ((start + w) % width) * 2, prev = colWidths[widthIndex];\n            if (prev == null || (prev != colW && colWidths[widthIndex + 1] == 1)) {\n              colWidths[widthIndex] = colW;\n              colWidths[widthIndex + 1] = 1;\n            } else if (prev == colW) {\n              colWidths[widthIndex + 1]++;\n            }\n          }\n        }\n      }\n      mapPos += colspan;\n      pos += cellNode.nodeSize;\n    }\n    var expectedPos = (row + 1) * width, missing = 0;\n    while (mapPos < expectedPos) { if (map[mapPos++] == 0) { missing++; } }\n    if (missing) { (problems || (problems = [])).push({type: \"missing\", row: row, n: missing}); }\n    pos++;\n  }\n\n  var tableMap = new TableMap(width, height, map, problems), badWidths = false;\n\n  // For columns that have defined widths, but whose widths disagree\n  // between rows, fix up the cells whose width doesn't match the\n  // computed one.\n  for (var i$2 = 0; !badWidths && i$2 < colWidths.length; i$2 += 2)\n    { if (colWidths[i$2] != null && colWidths[i$2 + 1] < height) { badWidths = true; } }\n  if (badWidths) { findBadColWidths(tableMap, colWidths, table); }\n\n  return tableMap\n}\n\nfunction findWidth(table) {\n  var width = -1, hasRowSpan = false;\n  for (var row = 0; row < table.childCount; row++) {\n    var rowNode = table.child(row), rowWidth = 0;\n    if (hasRowSpan) { for (var j = 0; j < row; j++) {\n      var prevRow = table.child(j);\n      for (var i = 0; i < prevRow.childCount; i++) {\n        var cell = prevRow.child(i);\n        if (j + cell.attrs.rowspan > row) { rowWidth += cell.attrs.colspan; }\n      }\n    } }\n    for (var i$1 = 0; i$1 < rowNode.childCount; i$1++) {\n      var cell$1 = rowNode.child(i$1);\n      rowWidth += cell$1.attrs.colspan;\n      if (cell$1.attrs.rowspan > 1) { hasRowSpan = true; }\n    }\n    if (width == -1)\n      { width = rowWidth; }\n    else if (width != rowWidth)\n      { width = Math.max(width, rowWidth); }\n  }\n  return width\n}\n\nfunction findBadColWidths(map, colWidths, table) {\n  if (!map.problems) { map.problems = []; }\n  for (var i = 0, seen = {}; i < map.map.length; i++) {\n    var pos = map.map[i];\n    if (seen[pos]) { continue }\n    seen[pos] = true;\n    var node = table.nodeAt(pos), updated = null;\n    for (var j = 0; j < node.attrs.colspan; j++) {\n      var col = (i + j) % map.width, colWidth = colWidths[col * 2];\n      if (colWidth != null && (!node.attrs.colwidth || node.attrs.colwidth[j] != colWidth))\n        { (updated || (updated = freshColWidth(node.attrs)))[j] = colWidth; }\n    }\n    if (updated) { map.problems.unshift({type: \"colwidth mismatch\", pos: pos, colwidth: updated}); }\n  }\n}\n\nfunction freshColWidth(attrs) {\n  if (attrs.colwidth) { return attrs.colwidth.slice() }\n  var result = [];\n  for (var i = 0; i < attrs.colspan; i++) { result.push(0); }\n  return result\n}\n\n// Helper for creating a schema that supports tables.\n\nfunction getCellAttrs(dom, extraAttrs) {\n  var widthAttr = dom.getAttribute(\"data-colwidth\");\n  var widths = widthAttr && /^\\d+(,\\d+)*$/.test(widthAttr) ? widthAttr.split(\",\").map(function (s) { return Number(s); }) : null;\n  var colspan = Number(dom.getAttribute(\"colspan\") || 1);\n  var result = {\n    colspan: colspan,\n    rowspan: Number(dom.getAttribute(\"rowspan\") || 1),\n    colwidth: widths && widths.length == colspan ? widths : null\n  };\n  for (var prop in extraAttrs) {\n    var getter = extraAttrs[prop].getFromDOM;\n    var value = getter && getter(dom);\n    if (value != null) { result[prop] = value; }\n  }\n  return result\n}\n\nfunction setCellAttrs(node, extraAttrs) {\n  var attrs = {};\n  if (node.attrs.colspan != 1) { attrs.colspan = node.attrs.colspan; }\n  if (node.attrs.rowspan != 1) { attrs.rowspan = node.attrs.rowspan; }\n  if (node.attrs.colwidth)\n    { attrs[\"data-colwidth\"] = node.attrs.colwidth.join(\",\"); }\n  for (var prop in extraAttrs) {\n    var setter = extraAttrs[prop].setDOMAttr;\n    if (setter) { setter(node.attrs[prop], attrs); }\n  }\n  return attrs\n}\n\n// :: (Object) → Object\n//\n// This function creates a set of [node\n// specs](http://prosemirror.net/docs/ref/#model.SchemaSpec.nodes) for\n// `table`, `table_row`, and `table_cell` nodes types as used by this\n// module. The result can then be added to the set of nodes when\n// creating a a schema.\n//\n//   options::- The following options are understood:\n//\n//     tableGroup:: ?string\n//     A group name (something like `\"block\"`) to add to the table\n//     node type.\n//\n//     cellContent:: string\n//     The content expression for table cells.\n//\n//     cellAttributes:: ?Object\n//     Additional attributes to add to cells. Maps attribute names to\n//     objects with the following properties:\n//\n//       default:: any\n//       The attribute's default value.\n//\n//       getFromDOM:: ?(dom.Node) → any\n//       A function to read the attribute's value from a DOM node.\n//\n//       setDOMAttr:: ?(value: any, attrs: Object)\n//       A function to add the attribute's value to an attribute\n//       object that's used to render the cell's DOM.\nfunction tableNodes(options) {\n  var extraAttrs = options.cellAttributes || {};\n  var cellAttrs = {\n    colspan: {default: 1},\n    rowspan: {default: 1},\n    colwidth: {default: null}\n  };\n  for (var prop in extraAttrs)\n    { cellAttrs[prop] = {default: extraAttrs[prop].default}; }\n\n  return {\n    table: {\n      content: \"table_row+\",\n      tableRole: \"table\",\n      isolating: true,\n      group: options.tableGroup,\n      parseDOM: [{tag: \"table\"}],\n      toDOM: function toDOM() { return [\"table\", [\"tbody\", 0]] }\n    },\n    table_row: {\n      content: \"(table_cell | table_header)*\",\n      tableRole: \"row\",\n      parseDOM: [{tag: \"tr\"}],\n      toDOM: function toDOM() { return [\"tr\", 0] }\n    },\n    table_cell: {\n      content: options.cellContent,\n      attrs: cellAttrs,\n      tableRole: \"cell\",\n      isolating: true,\n      parseDOM: [{tag: \"td\", getAttrs: function (dom) { return getCellAttrs(dom, extraAttrs); }}],\n      toDOM: function toDOM(node) { return [\"td\", setCellAttrs(node, extraAttrs), 0] }\n    },\n    table_header: {\n      content: options.cellContent,\n      attrs: cellAttrs,\n      tableRole: \"header_cell\",\n      isolating: true,\n      parseDOM: [{tag: \"th\", getAttrs: function (dom) { return getCellAttrs(dom, extraAttrs); }}],\n      toDOM: function toDOM(node) { return [\"th\", setCellAttrs(node, extraAttrs), 0] }\n    }\n  }\n}\n\nfunction tableNodeTypes(schema) {\n  var result = schema.cached.tableNodeTypes;\n  if (!result) {\n    result = schema.cached.tableNodeTypes = {};\n    for (var name in schema.nodes) {\n      var type = schema.nodes[name], role = type.spec.tableRole;\n      if (role) { result[role] = type; }\n    }\n  }\n  return result\n}\n\n// Various helper function for working with tables\n\nvar key = new PluginKey(\"selectingCells\");\n\nfunction cellAround($pos) {\n  for (var d = $pos.depth - 1; d > 0; d--)\n    { if ($pos.node(d).type.spec.tableRole == \"row\") { return $pos.node(0).resolve($pos.before(d + 1)) } }\n  return null\n}\n\nfunction cellWrapping($pos) {\n  for (var d = $pos.depth; d > 0; d--) { // Sometimes the cell can be in the same depth.\n    var role = $pos.node(d).type.spec.tableRole;\n    if (role === \"cell\" || role === 'header_cell') { return $pos.node(d) }\n  }\n  return null\n}\n\nfunction isInTable(state) {\n  var $head = state.selection.$head;\n  for (var d = $head.depth; d > 0; d--) { if ($head.node(d).type.spec.tableRole == \"row\") { return true } }\n  return false\n}\n\nfunction selectionCell(state) {\n  var sel = state.selection;\n  if (sel.$anchorCell) {\n    return sel.$anchorCell.pos > sel.$headCell.pos ? sel.$anchorCell : sel.$headCell;\n  } else if (sel.node && sel.node.type.spec.tableRole == \"cell\") {\n    return sel.$anchor\n  }\n  return cellAround(sel.$head) || cellNear(sel.$head)\n}\n\nfunction cellNear($pos) {\n  for (var after = $pos.nodeAfter, pos = $pos.pos; after; after = after.firstChild, pos++) {\n    var role = after.type.spec.tableRole;\n    if (role == \"cell\" || role == \"header_cell\") { return $pos.doc.resolve(pos) }\n  }\n  for (var before = $pos.nodeBefore, pos$1 = $pos.pos; before; before = before.lastChild, pos$1--) {\n    var role$1 = before.type.spec.tableRole;\n    if (role$1 == \"cell\" || role$1 == \"header_cell\") { return $pos.doc.resolve(pos$1 - before.nodeSize) }\n  }\n}\n\nfunction pointsAtCell($pos) {\n  return $pos.parent.type.spec.tableRole == \"row\" && $pos.nodeAfter\n}\n\nfunction moveCellForward($pos) {\n  return $pos.node(0).resolve($pos.pos + $pos.nodeAfter.nodeSize)\n}\n\nfunction inSameTable($a, $b) {\n  return $a.depth == $b.depth && $a.pos >= $b.start(-1) && $a.pos <= $b.end(-1)\n}\n\nfunction findCell($pos) {\n  return TableMap.get($pos.node(-1)).findCell($pos.pos - $pos.start(-1))\n}\n\nfunction colCount($pos) {\n  return TableMap.get($pos.node(-1)).colCount($pos.pos - $pos.start(-1))\n}\n\nfunction nextCell($pos, axis, dir) {\n  var start = $pos.start(-1), map = TableMap.get($pos.node(-1));\n  var moved = map.nextCell($pos.pos - start, axis, dir);\n  return moved == null ? null : $pos.node(0).resolve(start + moved)\n}\n\nfunction setAttr(attrs, name, value) {\n  var result = {};\n  for (var prop in attrs) { result[prop] = attrs[prop]; }\n  result[name] = value;\n  return result\n}\n\nfunction removeColSpan(attrs, pos, n) {\n  if ( n === void 0 ) n=1;\n\n  var result = setAttr(attrs, \"colspan\", attrs.colspan - n);\n  if (result.colwidth) {\n    result.colwidth = result.colwidth.slice();\n    result.colwidth.splice(pos, n);\n    if (!result.colwidth.some(function (w) { return w > 0; })) { result.colwidth = null; }\n  }\n  return result\n}\n\nfunction addColSpan(attrs, pos, n) {\n  if ( n === void 0 ) n=1;\n\n  var result = setAttr(attrs, \"colspan\", attrs.colspan + n);\n  if (result.colwidth) {\n    result.colwidth = result.colwidth.slice();\n    for (var i = 0; i < n; i++) { result.colwidth.splice(pos, 0, 0); }\n  }\n  return result\n}\n\nfunction columnIsHeader(map, table, col) {\n  var headerCell = tableNodeTypes(table.type.schema).header_cell;\n  for (var row = 0; row < map.height; row++)\n    { if (table.nodeAt(map.map[col + row * map.width]).type != headerCell)\n      { return false } }\n  return true\n}\n\n// This file defines a ProseMirror selection subclass that models\n\n// ::- A [`Selection`](http://prosemirror.net/docs/ref/#state.Selection)\n// subclass that represents a cell selection spanning part of a table.\n// With the plugin enabled, these will be created when the user\n// selects across cells, and will be drawn by giving selected cells a\n// `selectedCell` CSS class.\nvar CellSelection = /*@__PURE__*/(function (Selection) {\n  function CellSelection($anchorCell, $headCell) {\n    if ( $headCell === void 0 ) $headCell = $anchorCell;\n\n    var table = $anchorCell.node(-1), map = TableMap.get(table), start = $anchorCell.start(-1);\n    var rect = map.rectBetween($anchorCell.pos - start, $headCell.pos - start);\n    var doc = $anchorCell.node(0);\n    var cells = map.cellsInRect(rect).filter(function (p) { return p != $headCell.pos - start; });\n    // Make the head cell the first range, so that it counts as the\n    // primary part of the selection\n    cells.unshift($headCell.pos - start);\n    var ranges = cells.map(function (pos) {\n      var cell = table.nodeAt(pos), from = pos + start + 1;\n      return new SelectionRange(doc.resolve(from), doc.resolve(from + cell.content.size))\n    });\n    Selection.call(this, ranges[0].$from, ranges[0].$to, ranges);\n    // :: ResolvedPos\n    // A resolved position pointing _in front of_ the anchor cell (the one\n    // that doesn't move when extending the selection).\n    this.$anchorCell = $anchorCell;\n    // :: ResolvedPos\n    // A resolved position pointing in front of the head cell (the one\n    // moves when extending the selection).\n    this.$headCell = $headCell;\n  }\n\n  if ( Selection ) CellSelection.__proto__ = Selection;\n  CellSelection.prototype = Object.create( Selection && Selection.prototype );\n  CellSelection.prototype.constructor = CellSelection;\n\n  CellSelection.prototype.map = function map (doc, mapping) {\n    var $anchorCell = doc.resolve(mapping.map(this.$anchorCell.pos));\n    var $headCell = doc.resolve(mapping.map(this.$headCell.pos));\n    if (pointsAtCell($anchorCell) && pointsAtCell($headCell) && inSameTable($anchorCell, $headCell)) {\n      var tableChanged = this.$anchorCell.node(-1) != $anchorCell.node(-1);\n      if (tableChanged && this.isRowSelection())\n        { return CellSelection.rowSelection($anchorCell, $headCell) }\n      else if (tableChanged && this.isColSelection())\n        { return CellSelection.colSelection($anchorCell, $headCell) }\n      else\n        { return new CellSelection($anchorCell, $headCell) }\n    }\n    return TextSelection.between($anchorCell, $headCell)\n  };\n\n  // :: () → Slice\n  // Returns a rectangular slice of table rows containing the selected\n  // cells.\n  CellSelection.prototype.content = function content () {\n    var table = this.$anchorCell.node(-1), map = TableMap.get(table), start = this.$anchorCell.start(-1);\n    var rect = map.rectBetween(this.$anchorCell.pos - start, this.$headCell.pos - start);\n    var seen = {}, rows = [];\n    for (var row = rect.top; row < rect.bottom; row++) {\n      var rowContent = [];\n      for (var index = row * map.width + rect.left, col = rect.left; col < rect.right; col++, index++) {\n        var pos = map.map[index];\n        if (!seen[pos]) {\n          seen[pos] = true;\n          var cellRect = map.findCell(pos), cell = table.nodeAt(pos);\n          var extraLeft = rect.left - cellRect.left, extraRight = cellRect.right - rect.right;\n          if (extraLeft > 0 || extraRight > 0) {\n            var attrs = cell.attrs;\n            if (extraLeft > 0) { attrs = removeColSpan(attrs, 0, extraLeft); }\n            if (extraRight > 0) { attrs = removeColSpan(attrs, attrs.colspan - extraRight, extraRight); }\n            if (cellRect.left < rect.left) { cell = cell.type.createAndFill(attrs); }\n            else { cell = cell.type.create(attrs, cell.content); }\n          }\n          if (cellRect.top < rect.top || cellRect.bottom > rect.bottom) {\n            var attrs$1 = setAttr(cell.attrs, \"rowspan\", Math.min(cellRect.bottom, rect.bottom) - Math.max(cellRect.top, rect.top));\n            if (cellRect.top < rect.top) { cell = cell.type.createAndFill(attrs$1); }\n            else { cell = cell.type.create(attrs$1, cell.content); }\n          }\n          rowContent.push(cell);\n        }\n      }\n      rows.push(table.child(row).copy(Fragment.from(rowContent)));\n    }\n\n    var fragment = this.isColSelection() && this.isRowSelection() ? table : rows;\n    return new Slice(Fragment.from(fragment), 1, 1)\n  };\n\n  CellSelection.prototype.replace = function replace (tr, content) {\n    if ( content === void 0 ) content = Slice.empty;\n\n    var mapFrom = tr.steps.length, ranges = this.ranges;\n    for (var i = 0; i < ranges.length; i++) {\n      var ref = ranges[i];\n      var $from = ref.$from;\n      var $to = ref.$to;\n      var mapping = tr.mapping.slice(mapFrom);\n      tr.replace(mapping.map($from.pos), mapping.map($to.pos), i ? Slice.empty : content);\n    }\n    var sel = Selection.findFrom(tr.doc.resolve(tr.mapping.slice(mapFrom).map(this.to)), -1);\n    if (sel) { tr.setSelection(sel); }\n  };\n\n  CellSelection.prototype.replaceWith = function replaceWith (tr, node) {\n    this.replace(tr, new Slice(Fragment.from(node), 0, 0));\n  };\n\n  CellSelection.prototype.forEachCell = function forEachCell (f) {\n    var table = this.$anchorCell.node(-1), map = TableMap.get(table), start = this.$anchorCell.start(-1);\n    var cells = map.cellsInRect(map.rectBetween(this.$anchorCell.pos - start, this.$headCell.pos - start));\n    for (var i = 0; i < cells.length; i++)\n      { f(table.nodeAt(cells[i]), start + cells[i]); }\n  };\n\n  // :: () → bool\n  // True if this selection goes all the way from the top to the\n  // bottom of the table.\n  CellSelection.prototype.isColSelection = function isColSelection () {\n    var anchorTop = this.$anchorCell.index(-1), headTop = this.$headCell.index(-1);\n    if (Math.min(anchorTop, headTop) > 0) { return false }\n    var anchorBot = anchorTop + this.$anchorCell.nodeAfter.attrs.rowspan,\n        headBot = headTop + this.$headCell.nodeAfter.attrs.rowspan;\n    return Math.max(anchorBot, headBot) == this.$headCell.node(-1).childCount\n  };\n\n  // :: (ResolvedPos, ?ResolvedPos) → CellSelection\n  // Returns the smallest column selection that covers the given anchor\n  // and head cell.\n  CellSelection.colSelection = function colSelection ($anchorCell, $headCell) {\n    if ( $headCell === void 0 ) $headCell = $anchorCell;\n\n    var map = TableMap.get($anchorCell.node(-1)), start = $anchorCell.start(-1);\n    var anchorRect = map.findCell($anchorCell.pos - start), headRect = map.findCell($headCell.pos - start);\n    var doc = $anchorCell.node(0);\n    if (anchorRect.top <= headRect.top) {\n      if (anchorRect.top > 0)\n        { $anchorCell = doc.resolve(start + map.map[anchorRect.left]); }\n      if (headRect.bottom < map.height)\n        { $headCell = doc.resolve(start + map.map[map.width * (map.height - 1) + headRect.right - 1]); }\n    } else {\n      if (headRect.top > 0)\n        { $headCell = doc.resolve(start + map.map[headRect.left]); }\n      if (anchorRect.bottom < map.height)\n        { $anchorCell = doc.resolve(start + map.map[map.width * (map.height - 1) + anchorRect.right - 1]); }\n    }\n    return new CellSelection($anchorCell, $headCell)\n  };\n\n  // :: () → bool\n  // True if this selection goes all the way from the left to the\n  // right of the table.\n  CellSelection.prototype.isRowSelection = function isRowSelection () {\n    var map = TableMap.get(this.$anchorCell.node(-1)), start = this.$anchorCell.start(-1);\n    var anchorLeft = map.colCount(this.$anchorCell.pos - start),\n        headLeft = map.colCount(this.$headCell.pos - start);\n    if (Math.min(anchorLeft, headLeft) > 0) { return false }\n    var anchorRight = anchorLeft + this.$anchorCell.nodeAfter.attrs.colspan,\n        headRight = headLeft + this.$headCell.nodeAfter.attrs.colspan;\n    return Math.max(anchorRight, headRight) == map.width\n  };\n\n  CellSelection.prototype.eq = function eq (other) {\n    return other instanceof CellSelection && other.$anchorCell.pos == this.$anchorCell.pos &&\n      other.$headCell.pos == this.$headCell.pos\n  };\n\n  // :: (ResolvedPos, ?ResolvedPos) → CellSelection\n  // Returns the smallest row selection that covers the given anchor\n  // and head cell.\n  CellSelection.rowSelection = function rowSelection ($anchorCell, $headCell) {\n    if ( $headCell === void 0 ) $headCell = $anchorCell;\n\n    var map = TableMap.get($anchorCell.node(-1)), start = $anchorCell.start(-1);\n    var anchorRect = map.findCell($anchorCell.pos - start), headRect = map.findCell($headCell.pos - start);\n    var doc = $anchorCell.node(0);\n    if (anchorRect.left <= headRect.left) {\n      if (anchorRect.left > 0)\n        { $anchorCell = doc.resolve(start + map.map[anchorRect.top * map.width]); }\n      if (headRect.right < map.width)\n        { $headCell = doc.resolve(start + map.map[map.width * (headRect.top + 1) - 1]); }\n    } else {\n      if (headRect.left > 0)\n        { $headCell = doc.resolve(start + map.map[headRect.top * map.width]); }\n      if (anchorRect.right < map.width)\n        { $anchorCell = doc.resolve(start + map.map[map.width * (anchorRect.top + 1) - 1]); }\n    }\n    return new CellSelection($anchorCell, $headCell)\n  };\n\n  CellSelection.prototype.toJSON = function toJSON () {\n    return {type: \"cell\", anchor: this.$anchorCell.pos, head: this.$headCell.pos}\n  };\n\n  CellSelection.fromJSON = function fromJSON (doc, json) {\n    return new CellSelection(doc.resolve(json.anchor), doc.resolve(json.head))\n  };\n\n  // :: (Node, number, ?number) → CellSelection\n  CellSelection.create = function create (doc, anchorCell, headCell) {\n    if ( headCell === void 0 ) headCell = anchorCell;\n\n    return new CellSelection(doc.resolve(anchorCell), doc.resolve(headCell))\n  };\n\n  CellSelection.prototype.getBookmark = function getBookmark () { return new CellBookmark(this.$anchorCell.pos, this.$headCell.pos) };\n\n  return CellSelection;\n}(Selection));\n\nCellSelection.prototype.visible = false;\n\nSelection.jsonID(\"cell\", CellSelection);\n\nvar CellBookmark = function CellBookmark(anchor, head) {\n  this.anchor = anchor;\n  this.head = head;\n};\nCellBookmark.prototype.map = function map (mapping) {\n  return new CellBookmark(mapping.map(this.anchor), mapping.map(this.head))\n};\nCellBookmark.prototype.resolve = function resolve (doc) {\n  var $anchorCell = doc.resolve(this.anchor), $headCell = doc.resolve(this.head);\n  if ($anchorCell.parent.type.spec.tableRole == \"row\" &&\n      $headCell.parent.type.spec.tableRole == \"row\" &&\n      $anchorCell.index() < $anchorCell.parent.childCount &&\n      $headCell.index() < $headCell.parent.childCount &&\n      inSameTable($anchorCell, $headCell))\n    { return new CellSelection($anchorCell, $headCell) }\n  else\n    { return Selection.near($headCell, 1) }\n};\n\nfunction drawCellSelection(state) {\n  if (!(state.selection instanceof CellSelection)) { return null }\n  var cells = [];\n  state.selection.forEachCell(function (node, pos) {\n    cells.push(Decoration.node(pos, pos + node.nodeSize, {class: \"selectedCell\"}));\n  });\n  return DecorationSet.create(state.doc, cells)\n}\n\nfunction isCellBoundarySelection(ref) {\n  var $from = ref.$from;\n  var $to = ref.$to;\n\n  if ($from.pos == $to.pos || $from.pos < $from.pos - 6) { return false } // Cheap elimination\n  var afterFrom = $from.pos, beforeTo = $to.pos, depth = $from.depth;\n  for (; depth >= 0; depth--, afterFrom++)\n    { if ($from.after(depth + 1) < $from.end(depth)) { break } }\n  for (var d = $to.depth; d >= 0; d--, beforeTo--)\n    { if ($to.before(d + 1) > $to.start(d)) { break } }\n  return afterFrom == beforeTo && /row|table/.test($from.node(depth).type.spec.tableRole)\n}\n\nfunction isTextSelectionAcrossCells(ref) {\n  var $from = ref.$from;\n  var $to = ref.$to;\n\n  var fromCellBoundaryNode;\n  var toCellBoundaryNode;\n\n  for (var i = $from.depth; i > 0; i--) {\n    var node = $from.node(i);\n    if (node.type.spec.tableRole === 'cell' || node.type.spec.tableRole === 'header_cell') {\n      fromCellBoundaryNode = node;\n      break;\n    }\n  }\n\n  for (var i$1 = $to.depth; i$1 > 0; i$1--) {\n    var node$1 = $to.node(i$1);\n    if (node$1.type.spec.tableRole === 'cell' || node$1.type.spec.tableRole === 'header_cell') {\n      toCellBoundaryNode = node$1;\n      break;\n    }\n  }\n\n  return fromCellBoundaryNode !== toCellBoundaryNode && $to.parentOffset === 0\n}\n\nfunction normalizeSelection(state, tr, allowTableNodeSelection) {\n  var sel = (tr || state).selection, doc = (tr || state).doc, normalize, role;\n  if (sel instanceof NodeSelection && (role = sel.node.type.spec.tableRole)) {\n    if (role == \"cell\" || role == \"header_cell\") {\n      normalize = CellSelection.create(doc, sel.from);\n    } else if (role == \"row\") {\n      var $cell = doc.resolve(sel.from + 1);\n      normalize = CellSelection.rowSelection($cell, $cell);\n    } else if (!allowTableNodeSelection) {\n      var map = TableMap.get(sel.node), start = sel.from + 1;\n      var lastCell = start + map.map[map.width * map.height - 1];\n      normalize = CellSelection.create(doc, start + 1, lastCell);\n    }\n  } else if (sel instanceof TextSelection && isCellBoundarySelection(sel)) {\n    normalize = TextSelection.create(doc, sel.from);\n  } else if (sel instanceof TextSelection && isTextSelectionAcrossCells(sel)) {\n    normalize = TextSelection.create(doc, sel.$from.start(), sel.$from.end());\n  }\n  if (normalize)\n    { (tr || (tr = state.tr)).setSelection(normalize); }\n  return tr\n}\n\n// Utilities used for copy/paste handling.\n\n// Utilities to help with copying and pasting table cells\n\n// : (Slice) → ?{width: number, height: number, rows: [Fragment]}\n// Get a rectangular area of cells from a slice, or null if the outer\n// nodes of the slice aren't table cells or rows.\nfunction pastedCells(slice) {\n  if (!slice.size) { return null }\n  var content = slice.content;\n  var openStart = slice.openStart;\n  var openEnd = slice.openEnd;\n  while (content.childCount == 1 && (openStart > 0 && openEnd > 0 || content.firstChild.type.spec.tableRole == \"table\")) {\n    openStart--;\n    openEnd--;\n    content = content.firstChild.content;\n  }\n  var first = content.firstChild, role = first.type.spec.tableRole;\n  var schema = first.type.schema, rows = [];\n  if (role == \"row\") {\n    for (var i = 0; i < content.childCount; i++) {\n      var cells = content.child(i).content;\n      var left = i ? 0 : Math.max(0, openStart - 1);\n      var right = i < content.childCount - 1 ? 0 : Math.max(0, openEnd - 1);\n      if (left || right) { cells = fitSlice(tableNodeTypes(schema).row, new Slice(cells, left, right)).content; }\n      rows.push(cells);\n    }\n  } else if (role == \"cell\" || role == \"header_cell\") {\n    rows.push(openStart || openEnd ? fitSlice(tableNodeTypes(schema).row, new Slice(content, openStart, openEnd)).content : content);\n  } else {\n    return null\n  }\n  return ensureRectangular(schema, rows)\n}\n\n// : (Schema, [Fragment]) → {width: number, height: number, rows: [Fragment]}\n// Compute the width and height of a set of cells, and make sure each\n// row has the same number of cells.\nfunction ensureRectangular(schema, rows) {\n  var widths = [];\n  for (var i = 0; i < rows.length; i++) {\n    var row = rows[i];\n    for (var j = row.childCount - 1; j >= 0; j--) {\n      var ref = row.child(j).attrs;\n      var rowspan = ref.rowspan;\n      var colspan = ref.colspan;\n      for (var r = i; r < i + rowspan; r++)\n        { widths[r] = (widths[r] || 0) + colspan; }\n    }\n  }\n  var width = 0;\n  for (var r$1 = 0; r$1 < widths.length; r$1++) { width = Math.max(width, widths[r$1]); }\n  for (var r$2 = 0; r$2 < widths.length; r$2++) {\n    if (r$2 >= rows.length) { rows.push(Fragment.empty); }\n    if (widths[r$2] < width) {\n      var empty = tableNodeTypes(schema).cell.createAndFill(), cells = [];\n      for (var i$1 = widths[r$2]; i$1 < width; i$1++) { cells.push(empty); }\n      rows[r$2] = rows[r$2].append(Fragment.from(cells));\n    }\n  }\n  return {height: rows.length, width: width, rows: rows}\n}\n\nfunction fitSlice(nodeType, slice) {\n  var node = nodeType.createAndFill();\n  var tr = new Transform(node).replace(0, node.content.size, slice);\n  return tr.doc\n}\n\n// : ({width: number, height: number, rows: [Fragment]}, number, number) → {width: number, height: number, rows: [Fragment]}\n// Clip or extend (repeat) the given set of cells to cover the given\n// width and height. Will clip rowspan/colspan cells at the edges when\n// they stick out.\nfunction clipCells(ref, newWidth, newHeight) {\n  var width = ref.width;\n  var height = ref.height;\n  var rows = ref.rows;\n\n  if (width != newWidth) {\n    var added = [], newRows = [];\n    for (var row = 0; row < rows.length; row++) {\n      var frag = rows[row], cells = [];\n      for (var col = added[row] || 0, i = 0; col < newWidth; i++) {\n        var cell = frag.child(i % frag.childCount);\n        if (col + cell.attrs.colspan > newWidth)\n          { cell = cell.type.create(removeColSpan(cell.attrs, cell.attrs.colspan, col + cell.attrs.colspan - newWidth), cell.content); }\n        cells.push(cell);\n        col += cell.attrs.colspan;\n        for (var j = 1; j < cell.attrs.rowspan; j++)\n          { added[row + j] = (added[row + j] || 0) + cell.attrs.colspan; }\n      }\n      newRows.push(Fragment.from(cells));\n    }\n    rows = newRows;\n    width = newWidth;\n  }\n\n  if (height != newHeight) {\n    var newRows$1 = [];\n    for (var row$1 = 0, i$1 = 0; row$1 < newHeight; row$1++, i$1++) {\n      var cells$1 = [], source = rows[i$1 % height];\n      for (var j$1 = 0; j$1 < source.childCount; j$1++) {\n        var cell$1 = source.child(j$1);\n        if (row$1 + cell$1.attrs.rowspan > newHeight)\n          { cell$1 = cell$1.type.create(setAttr(cell$1.attrs, \"rowspan\", Math.max(1, newHeight - cell$1.attrs.rowspan)), cell$1.content); }\n        cells$1.push(cell$1);\n      }\n      newRows$1.push(Fragment.from(cells$1));\n    }\n    rows = newRows$1;\n    height = newHeight;\n  }\n\n  return {width: width, height: height, rows: rows}\n}\n\n// Make sure a table has at least the given width and height. Return\n// true if something was changed.\nfunction growTable(tr, map, table, start, width, height, mapFrom) {\n  var schema = tr.doc.type.schema, types = tableNodeTypes(schema), empty, emptyHead;\n  if (width > map.width) {\n    for (var row = 0, rowEnd = 0; row < map.height; row++) {\n      var rowNode = table.child(row);\n      rowEnd += rowNode.nodeSize;\n      var cells = [], add = (void 0);\n      if (rowNode.lastChild == null || rowNode.lastChild.type == types.cell)\n        { add = empty || (empty = types.cell.createAndFill()); }\n      else\n        { add = emptyHead || (emptyHead = types.header_cell.createAndFill()); }\n      for (var i = map.width; i < width; i++) { cells.push(add); }\n      tr.insert(tr.mapping.slice(mapFrom).map(rowEnd - 1 + start), cells);\n    }\n  }\n  if (height > map.height) {\n    var cells$1 = [];\n    for (var i$1 = 0, start$1 = (map.height - 1) * map.width; i$1 < Math.max(map.width, width); i$1++) {\n      var header = i$1 >= map.width ? false :\n          table.nodeAt(map.map[start$1 + i$1]).type == types.header_cell;\n      cells$1.push(header\n                 ? (emptyHead || (emptyHead = types.header_cell.createAndFill()))\n                 : (empty || (empty = types.cell.createAndFill())));\n    }\n\n    var emptyRow = types.row.create(null, Fragment.from(cells$1)), rows = [];\n    for (var i$2 = map.height; i$2 < height; i$2++) { rows.push(emptyRow); }\n    tr.insert(tr.mapping.slice(mapFrom).map(start + table.nodeSize - 2), rows);\n  }\n  return !!(empty || emptyHead)\n}\n\n// Make sure the given line (left, top) to (right, top) doesn't cross\n// any rowspan cells by splitting cells that cross it. Return true if\n// something changed.\nfunction isolateHorizontal(tr, map, table, start, left, right, top, mapFrom) {\n  if (top == 0 || top == map.height) { return false }\n  var found = false;\n  for (var col = left; col < right; col++) {\n    var index = top * map.width + col, pos = map.map[index];\n    if (map.map[index - map.width] == pos) {\n      found = true;\n      var cell = table.nodeAt(pos);\n      var ref = map.findCell(pos);\n      var cellTop = ref.top;\n      var cellLeft = ref.left;\n      tr.setNodeMarkup(tr.mapping.slice(mapFrom).map(pos + start), null, setAttr(cell.attrs, \"rowspan\", top - cellTop));\n      tr.insert(tr.mapping.slice(mapFrom).map(map.positionAt(top, cellLeft, table)),\n                cell.type.createAndFill(setAttr(cell.attrs, \"rowspan\", (cellTop + cell.attrs.rowspan) - top)));\n      col += cell.attrs.colspan - 1;\n    }\n  }\n  return found\n}\n\n// Make sure the given line (left, top) to (left, bottom) doesn't\n// cross any colspan cells by splitting cells that cross it. Return\n// true if something changed.\nfunction isolateVertical(tr, map, table, start, top, bottom, left, mapFrom) {\n  if (left == 0 || left == map.width) { return false }\n  var found = false;\n  for (var row = top; row < bottom; row++) {\n    var index = row * map.width + left, pos = map.map[index];\n    if (map.map[index - 1] == pos) {\n      found = true;\n      var cell = table.nodeAt(pos), cellLeft = map.colCount(pos);\n      var updatePos = tr.mapping.slice(mapFrom).map(pos + start);\n      tr.setNodeMarkup(updatePos, null, removeColSpan(cell.attrs, left - cellLeft, cell.attrs.colspan - (left - cellLeft)));\n      tr.insert(updatePos + cell.nodeSize, cell.type.createAndFill(removeColSpan(cell.attrs, 0, left - cellLeft)));\n      row += cell.attrs.rowspan - 1;\n    }\n  }\n  return found\n}\n\n// Insert the given set of cells (as returned by `pastedCells`) into a\n// table, at the position pointed at by rect.\nfunction insertCells(state, dispatch, tableStart, rect, cells) {\n  var table = tableStart ? state.doc.nodeAt(tableStart - 1) : state.doc, map = TableMap.get(table);\n  var top = rect.top;\n  var left = rect.left;\n  var right = left + cells.width, bottom = top + cells.height;\n  var tr = state.tr, mapFrom = 0;\n  function recomp() {\n    table = tableStart ? tr.doc.nodeAt(tableStart - 1) : tr.doc;\n    map = TableMap.get(table);\n    mapFrom = tr.mapping.maps.length;\n  }\n  // Prepare the table to be large enough and not have any cells\n  // crossing the boundaries of the rectangle that we want to\n  // insert into. If anything about it changes, recompute the table\n  // map so that subsequent operations can see the current shape.\n  if (growTable(tr, map, table, tableStart, right, bottom, mapFrom)) { recomp(); }\n  if (isolateHorizontal(tr, map, table, tableStart, left, right, top, mapFrom)) { recomp(); }\n  if (isolateHorizontal(tr, map, table, tableStart, left, right, bottom, mapFrom)) { recomp(); }\n  if (isolateVertical(tr, map, table, tableStart, top, bottom, left, mapFrom)) { recomp(); }\n  if (isolateVertical(tr, map, table, tableStart, top, bottom, right, mapFrom)) { recomp(); }\n\n  for (var row = top; row < bottom; row++) {\n    var from = map.positionAt(row, left, table), to = map.positionAt(row, right, table);\n    tr.replace(tr.mapping.slice(mapFrom).map(from + tableStart), tr.mapping.slice(mapFrom).map(to + tableStart),\n               new Slice(cells.rows[row - top], 0, 0));\n  }\n  recomp();\n  tr.setSelection(new CellSelection(tr.doc.resolve(tableStart + map.positionAt(top, left, table)),\n                                    tr.doc.resolve(tableStart + map.positionAt(bottom - 1, right - 1, table))));\n  dispatch(tr);\n}\n\n// This file defines a number of helpers for wiring up user input to\n\nvar handleKeyDown = keydownHandler({\n  \"ArrowLeft\": arrow(\"horiz\", -1),\n  \"ArrowRight\": arrow(\"horiz\", 1),\n  \"ArrowUp\": arrow(\"vert\", -1),\n  \"ArrowDown\": arrow(\"vert\", 1),\n\n  \"Shift-ArrowLeft\": shiftArrow(\"horiz\", -1),\n  \"Shift-ArrowRight\": shiftArrow(\"horiz\", 1),\n  \"Shift-ArrowUp\": shiftArrow(\"vert\", -1),\n  \"Shift-ArrowDown\": shiftArrow(\"vert\", 1),\n\n  \"Backspace\": deleteCellSelection,\n  \"Mod-Backspace\": deleteCellSelection,\n  \"Delete\": deleteCellSelection,\n  \"Mod-Delete\": deleteCellSelection\n});\n\nfunction maybeSetSelection(state, dispatch, selection) {\n  if (selection.eq(state.selection)) { return false }\n  if (dispatch) { dispatch(state.tr.setSelection(selection).scrollIntoView()); }\n  return true\n}\n\nfunction arrow(axis, dir) {\n  return function (state, dispatch, view) {\n    var sel = state.selection;\n    if (sel instanceof CellSelection) {\n      return maybeSetSelection(state, dispatch, Selection.near(sel.$headCell, dir))\n    }\n    if (axis != \"horiz\" && !sel.empty) { return false }\n    var end = atEndOfCell(view, axis, dir);\n    if (end == null) { return false }\n    if (axis == \"horiz\") {\n      return maybeSetSelection(state, dispatch, Selection.near(state.doc.resolve(sel.head + dir), dir))\n    } else {\n      var $cell = state.doc.resolve(end), $next = nextCell($cell, axis, dir), newSel;\n      if ($next) { newSel = Selection.near($next, 1); }\n      else if (dir < 0) { newSel = Selection.near(state.doc.resolve($cell.before(-1)), -1); }\n      else { newSel = Selection.near(state.doc.resolve($cell.after(-1)), 1); }\n      return maybeSetSelection(state, dispatch, newSel)\n    }\n  }\n}\n\nfunction shiftArrow(axis, dir) {\n  return function (state, dispatch, view) {\n    var sel = state.selection;\n    if (!(sel instanceof CellSelection)) {\n      var end = atEndOfCell(view, axis, dir);\n      if (end == null) { return false }\n      sel = new CellSelection(state.doc.resolve(end));\n    }\n    var $head = nextCell(sel.$headCell, axis, dir);\n    if (!$head) { return false }\n    return maybeSetSelection(state, dispatch, new CellSelection(sel.$anchorCell, $head))\n  }\n}\n\nfunction deleteCellSelection(state, dispatch) {\n  var sel = state.selection;\n  if (!(sel instanceof CellSelection)) { return false }\n  if (dispatch) {\n    var tr = state.tr, baseContent = tableNodeTypes(state.schema).cell.createAndFill().content;\n    sel.forEachCell(function (cell, pos) {\n      if (!cell.content.eq(baseContent))\n        { tr.replace(tr.mapping.map(pos + 1), tr.mapping.map(pos + cell.nodeSize - 1),\n                   new Slice(baseContent, 0, 0)); }\n    });\n    if (tr.docChanged) { dispatch(tr); }\n  }\n  return true\n}\n\nfunction handleTripleClick(view, pos) {\n  var doc = view.state.doc, $cell = cellAround(doc.resolve(pos));\n  if (!$cell) { return false }\n  view.dispatch(view.state.tr.setSelection(new CellSelection($cell)));\n  return true\n}\n\nfunction handlePaste(view, _, slice) {\n  if (!isInTable(view.state)) { return false }\n  var cells = pastedCells(slice), sel = view.state.selection;\n  if (sel instanceof CellSelection) {\n    if (!cells) { cells = {width: 1, height: 1, rows: [Fragment.from(fitSlice(tableNodeTypes(view.state.schema).cell, slice))]}; }\n    var table = sel.$anchorCell.node(-1), start = sel.$anchorCell.start(-1);\n    var rect = TableMap.get(table).rectBetween(sel.$anchorCell.pos - start, sel.$headCell.pos - start);\n    cells = clipCells(cells, rect.right - rect.left, rect.bottom - rect.top);\n    insertCells(view.state, view.dispatch, start, rect, cells);\n    return true\n  } else if (cells) {\n    var $cell = selectionCell(view.state), start$1 = $cell.start(-1);\n    insertCells(view.state, view.dispatch, start$1, TableMap.get($cell.node(-1)).findCell($cell.pos - start$1), cells);\n    return true\n  } else {\n    return false\n  }\n}\n\nfunction handleMouseDown(view, startEvent) {\n  if (startEvent.ctrlKey || startEvent.metaKey) { return }\n\n  var startDOMCell = domInCell(view, startEvent.target), $anchor;\n  if (startEvent.shiftKey && (view.state.selection instanceof CellSelection)) {\n    // Adding to an existing cell selection\n    setCellSelection(view.state.selection.$anchorCell, startEvent);\n    startEvent.preventDefault();\n  } else if (startEvent.shiftKey && startDOMCell &&\n             ($anchor = cellAround(view.state.selection.$anchor)) != null &&\n             cellUnderMouse(view, startEvent).pos != $anchor.pos) {\n    // Adding to a selection that starts in another cell (causing a\n    // cell selection to be created).\n    setCellSelection($anchor, startEvent);\n    startEvent.preventDefault();\n  } else if (!startDOMCell) {\n    // Not in a cell, let the default behavior happen.\n    return\n  }\n\n  // Create and dispatch a cell selection between the given anchor and\n  // the position under the mouse.\n  function setCellSelection($anchor, event) {\n    var $head = cellUnderMouse(view, event);\n    var starting = key.getState(view.state) == null;\n    if (!$head || !inSameTable($anchor, $head)) {\n      if (starting) { $head = $anchor; }\n      else { return }\n    }\n    var selection = new CellSelection($anchor, $head);\n    if (starting || !view.state.selection.eq(selection)) {\n      var tr = view.state.tr.setSelection(selection);\n      if (starting) { tr.setMeta(key, $anchor.pos); }\n      view.dispatch(tr);\n    }\n  }\n\n  // Stop listening to mouse motion events.\n  function stop() {\n    view.root.removeEventListener(\"mouseup\", stop);\n    view.root.removeEventListener(\"dragstart\", stop);\n    view.root.removeEventListener(\"mousemove\", move);\n    if (key.getState(view.state) != null) { view.dispatch(view.state.tr.setMeta(key, -1)); }\n  }\n\n  function move(event) {\n    var anchor = key.getState(view.state), $anchor;\n    if (anchor != null) {\n      // Continuing an existing cross-cell selection\n      $anchor = view.state.doc.resolve(anchor);\n    } else if (domInCell(view, event.target) != startDOMCell) {\n      // Moving out of the initial cell -- start a new cell selection\n      $anchor = cellUnderMouse(view, startEvent);\n      if (!$anchor) { return stop() }\n    }\n    if ($anchor) { setCellSelection($anchor, event); }\n  }\n  view.root.addEventListener(\"mouseup\", stop);\n  view.root.addEventListener(\"dragstart\", stop);\n  view.root.addEventListener(\"mousemove\", move);\n}\n\n// Check whether the cursor is at the end of a cell (so that further\n// motion would move out of the cell)\nfunction atEndOfCell(view, axis, dir) {\n  if (!(view.state.selection instanceof TextSelection)) { return null }\n  var ref = view.state.selection;\n  var $head = ref.$head;\n  for (var d = $head.depth - 1; d >= 0; d--) {\n    var parent = $head.node(d), index = dir < 0 ? $head.index(d) : $head.indexAfter(d);\n    if (index != (dir < 0 ? 0 : parent.childCount)) { return null }\n    if (parent.type.spec.tableRole == \"cell\" || parent.type.spec.tableRole == \"header_cell\") {\n      var cellPos = $head.before(d);\n      var dirStr = axis == \"vert\" ? (dir > 0 ? \"down\" : \"up\") : (dir > 0 ? \"right\" : \"left\");\n      return view.endOfTextblock(dirStr) ? cellPos : null\n    }\n  }\n  return null\n}\n\nfunction domInCell(view, dom) {\n  for (; dom && dom != view.dom; dom = dom.parentNode)\n    { if (dom.nodeName == \"TD\" || dom.nodeName == \"TH\") { return dom } }\n}\n\nfunction cellUnderMouse(view, event) {\n  var mousePos = view.posAtCoords({left: event.clientX, top: event.clientY});\n  if (!mousePos) { return null }\n  return mousePos ? cellAround(view.state.doc.resolve(mousePos.pos)) : null\n}\n\n// This file defines helpers for normalizing tables, making sure no\n\nvar fixTablesKey = new PluginKey(\"fix-tables\");\n\n// Helper for iterating through the nodes in a document that changed\n// compared to the given previous document. Useful for avoiding\n// duplicate work on each transaction.\nfunction changedDescendants(old, cur, offset, f) {\n  var oldSize = old.childCount, curSize = cur.childCount;\n  outer: for (var i = 0, j = 0; i < curSize; i++) {\n    var child = cur.child(i);\n    for (var scan = j, e = Math.min(oldSize, i + 3); scan < e; scan++) {\n      if (old.child(scan) == child) {\n        j = scan + 1;\n        offset += child.nodeSize;\n        continue outer\n      }\n    }\n    f(child, offset);\n    if (j < oldSize && old.child(j).sameMarkup(child))\n      { changedDescendants(old.child(j), child, offset + 1, f); }\n    else\n      { child.nodesBetween(0, child.content.size, f, offset + 1); }\n    offset += child.nodeSize;\n  }\n}\n\n// :: (EditorState, ?EditorState) → ?Transaction\n// Inspect all tables in the given state's document and return a\n// transaction that fixes them, if necessary. If `oldState` was\n// provided, that is assumed to hold a previous, known-good state,\n// which will be used to avoid re-scanning unchanged parts of the\n// document.\nfunction fixTables(state, oldState) {\n  var tr, check = function (node, pos) {\n    if (node.type.spec.tableRole == \"table\") { tr = fixTable(state, node, pos, tr); }\n  };\n  if (!oldState) { state.doc.descendants(check); }\n  else if (oldState.doc != state.doc) { changedDescendants(oldState.doc, state.doc, 0, check); }\n  return tr\n}\n\n// : (EditorState, Node, number, ?Transaction) → ?Transaction\n// Fix the given table, if necessary. Will append to the transaction\n// it was given, if non-null, or create a new one if necessary.\nfunction fixTable(state, table, tablePos, tr) {\n  var map = TableMap.get(table);\n  if (!map.problems) { return tr }\n  if (!tr) { tr = state.tr; }\n\n  // Track which rows we must add cells to, so that we can adjust that\n  // when fixing collisions.\n  var mustAdd = [];\n  for (var i = 0; i < map.height; i++) { mustAdd.push(0); }\n  for (var i$1 = 0; i$1 < map.problems.length; i$1++) {\n    var prob = map.problems[i$1];\n    if (prob.type == \"collision\") {\n      var cell = table.nodeAt(prob.pos);\n      for (var j = 0; j < cell.attrs.rowspan; j++) { mustAdd[prob.row + j] += prob.n; }\n      tr.setNodeMarkup(tr.mapping.map(tablePos + 1 + prob.pos), null, removeColSpan(cell.attrs, cell.attrs.colspan - prob.n, prob.n));\n    } else if (prob.type == \"missing\") {\n      mustAdd[prob.row] += prob.n;\n    } else if (prob.type == \"overlong_rowspan\") {\n      var cell$1 = table.nodeAt(prob.pos);\n      tr.setNodeMarkup(tr.mapping.map(tablePos + 1 + prob.pos), null, setAttr(cell$1.attrs, \"rowspan\", cell$1.attrs.rowspan - prob.n));\n    } else if (prob.type == \"colwidth mismatch\") {\n      var cell$2 = table.nodeAt(prob.pos);\n      tr.setNodeMarkup(tr.mapping.map(tablePos + 1 + prob.pos), null, setAttr(cell$2.attrs, \"colwidth\", prob.colwidth));\n    }\n  }\n  var first, last;\n  for (var i$2 = 0; i$2 < mustAdd.length; i$2++) { if (mustAdd[i$2]) {\n    if (first == null) { first = i$2; }\n    last = i$2;\n  } }\n  // Add the necessary cells, using a heuristic for whether to add the\n  // cells at the start or end of the rows (if it looks like a 'bite'\n  // was taken out of the table, add cells at the start of the row\n  // after the bite. Otherwise add them at the end).\n  for (var i$3 = 0, pos = tablePos + 1; i$3 < map.height; i$3++) {\n    var row = table.child(i$3);\n    var end = pos + row.nodeSize;\n    var add = mustAdd[i$3];\n    if (add > 0) {\n      var tableNodeType = 'cell';\n      if (row.firstChild) {\n        tableNodeType = row.firstChild.type.spec.tableRole;\n      }\n      var nodes = [];\n      for (var j$1 = 0; j$1 < add; j$1++)\n        { nodes.push(tableNodeTypes(state.schema)[tableNodeType].createAndFill()); }\n      var side = (i$3 == 0 || first == i$3 - 1) && last == i$3 ? pos + 1 : end - 1;\n      tr.insert(tr.mapping.map(side), nodes);\n    }\n    pos = end;\n  }\n  return tr.setMeta(fixTablesKey, { fixTables: true })\n}\n\n// This file defines a number of table-related commands.\n\n// Helper to get the selected rectangle in a table, if any. Adds table\n// map, table node, and table start offset to the object for\n// convenience.\nfunction selectedRect(state) {\n  var sel = state.selection, $pos = selectionCell(state);\n  var table = $pos.node(-1), tableStart = $pos.start(-1), map = TableMap.get(table);\n  var rect;\n  if (sel instanceof CellSelection)\n    { rect = map.rectBetween(sel.$anchorCell.pos - tableStart, sel.$headCell.pos - tableStart); }\n  else\n    { rect = map.findCell($pos.pos - tableStart); }\n  rect.tableStart = tableStart;\n  rect.map = map;\n  rect.table = table;\n  return rect\n}\n\n// Add a column at the given position in a table.\nfunction addColumn(tr, ref, col) {\n  var map = ref.map;\n  var tableStart = ref.tableStart;\n  var table = ref.table;\n\n  var refColumn = col > 0 ? -1 : 0;\n  if (columnIsHeader(map, table, col + refColumn))\n    { refColumn = col == 0 || col == map.width ? null : 0; }\n\n  for (var row = 0; row < map.height; row++) {\n    var index = row * map.width + col;\n    // If this position falls inside a col-spanning cell\n    if (col > 0 && col < map.width && map.map[index - 1] == map.map[index]) {\n      var pos = map.map[index], cell = table.nodeAt(pos);\n      tr.setNodeMarkup(tr.mapping.map(tableStart + pos), null,\n                       addColSpan(cell.attrs, col - map.colCount(pos)));\n      // Skip ahead if rowspan > 1\n      row += cell.attrs.rowspan - 1;\n    } else {\n      var type = refColumn == null ? tableNodeTypes(table.type.schema).cell\n          : table.nodeAt(map.map[index + refColumn]).type;\n      var pos$1 = map.positionAt(row, col, table);\n      tr.insert(tr.mapping.map(tableStart + pos$1), type.createAndFill());\n    }\n  }\n  return tr\n}\n\n// :: (EditorState, dispatch: ?(tr: Transaction)) → bool\n// Command to add a column before the column with the selection.\nfunction addColumnBefore(state, dispatch) {\n  if (!isInTable(state)) { return false }\n  if (dispatch) {\n    var rect = selectedRect(state);\n    dispatch(addColumn(state.tr, rect, rect.left));\n  }\n  return true\n}\n\n// :: (EditorState, dispatch: ?(tr: Transaction)) → bool\n// Command to add a column after the column with the selection.\nfunction addColumnAfter(state, dispatch) {\n  if (!isInTable(state)) { return false }\n  if (dispatch) {\n    var rect = selectedRect(state);\n    dispatch(addColumn(state.tr, rect, rect.right));\n  }\n  return true\n}\n\nfunction removeColumn(tr, ref, col) {\n  var map = ref.map;\n  var table = ref.table;\n  var tableStart = ref.tableStart;\n\n  var mapStart = tr.mapping.maps.length;\n  for (var row = 0; row < map.height;) {\n    var index = row * map.width + col, pos = map.map[index], cell = table.nodeAt(pos);\n    // If this is part of a col-spanning cell\n    if ((col > 0 && map.map[index - 1] == pos) || (col < map.width - 1 && map.map[index + 1] == pos)) {\n      tr.setNodeMarkup(tr.mapping.slice(mapStart).map(tableStart + pos), null,\n                       removeColSpan(cell.attrs, col - map.colCount(pos)));\n    } else {\n      var start = tr.mapping.slice(mapStart).map(tableStart + pos);\n      tr.delete(start, start + cell.nodeSize);\n    }\n    row += cell.attrs.rowspan;\n  }\n}\n\n// :: (EditorState, dispatch: ?(tr: Transaction)) → bool\n// Command function that removes the selected columns from a table.\nfunction deleteColumn(state, dispatch) {\n  if (!isInTable(state)) { return false }\n  if (dispatch) {\n    var rect = selectedRect(state), tr = state.tr;\n    if (rect.left == 0 && rect.right == rect.map.width) { return false }\n    for (var i = rect.right - 1;; i--) {\n      removeColumn(tr, rect, i);\n      if (i == rect.left) { break }\n      rect.table = rect.tableStart ? tr.doc.nodeAt(rect.tableStart - 1) : tr.doc;\n      rect.map = TableMap.get(rect.table);\n    }\n    dispatch(tr);\n  }\n  return true\n}\n\nfunction rowIsHeader(map, table, row) {\n  var headerCell = tableNodeTypes(table.type.schema).header_cell;\n  for (var col = 0; col < map.width; col++)\n    { if (table.nodeAt(map.map[col + row * map.width]).type != headerCell)\n      { return false } }\n  return true\n}\n\nfunction addRow(tr, ref, row) {\n  var map = ref.map;\n  var tableStart = ref.tableStart;\n  var table = ref.table;\n\n  var rowPos = tableStart;\n  for (var i = 0; i < row; i++) { rowPos += table.child(i).nodeSize; }\n  var cells = [], refRow = row > 0 ? -1 : 0;\n  if (rowIsHeader(map, table, row + refRow))\n    { refRow = row == 0 || row == map.height ? null : 0; }\n  for (var col = 0, index = map.width * row; col < map.width; col++, index++) {\n    // Covered by a rowspan cell\n    if (row > 0 && row < map.height && map.map[index] == map.map[index - map.width]) {\n      var pos = map.map[index], attrs = table.nodeAt(pos).attrs;\n      tr.setNodeMarkup(tableStart + pos, null, setAttr(attrs, \"rowspan\", attrs.rowspan + 1));\n      col += attrs.colspan - 1;\n    } else {\n      var type = refRow == null ? tableNodeTypes(table.type.schema).cell\n          : table.nodeAt(map.map[index + refRow * map.width]).type;\n      cells.push(type.createAndFill());\n    }\n  }\n  tr.insert(rowPos, tableNodeTypes(table.type.schema).row.create(null, cells));\n  return tr\n}\n\n// :: (EditorState, dispatch: ?(tr: Transaction)) → bool\n// Add a table row before the selection.\nfunction addRowBefore(state, dispatch) {\n  if (!isInTable(state)) { return false }\n  if (dispatch) {\n    var rect = selectedRect(state);\n    dispatch(addRow(state.tr, rect, rect.top));\n  }\n  return true\n}\n\n// :: (EditorState, dispatch: ?(tr: Transaction)) → bool\n// Add a table row after the selection.\nfunction addRowAfter(state, dispatch) {\n  if (!isInTable(state)) { return false }\n  if (dispatch) {\n    var rect = selectedRect(state);\n    dispatch(addRow(state.tr, rect, rect.bottom));\n  }\n  return true\n}\n\nfunction removeRow(tr, ref, row) {\n  var map = ref.map;\n  var table = ref.table;\n  var tableStart = ref.tableStart;\n\n  var rowPos = 0;\n  for (var i = 0; i < row; i++) { rowPos += table.child(i).nodeSize; }\n  var nextRow = rowPos + table.child(row).nodeSize;\n\n  var mapFrom = tr.mapping.maps.length;\n  tr.delete(rowPos + tableStart, nextRow + tableStart);\n\n  for (var col = 0, index = row * map.width; col < map.width; col++, index++) {\n    var pos = map.map[index];\n    if (row > 0 && pos == map.map[index - map.width]) {\n      // If this cell starts in the row above, simply reduce its rowspan\n      var attrs = table.nodeAt(pos).attrs;\n      tr.setNodeMarkup(tr.mapping.slice(mapFrom).map(pos + tableStart), null, setAttr(attrs, \"rowspan\", attrs.rowspan - 1));\n      col += attrs.colspan - 1;\n    } else if (row < map.width && pos == map.map[index + map.width]) {\n      // Else, if it continues in the row below, it has to be moved down\n      var cell = table.nodeAt(pos);\n      var copy = cell.type.create(setAttr(cell.attrs, \"rowspan\", cell.attrs.rowspan - 1), cell.content);\n      var newPos = map.positionAt(row + 1, col, table);\n      tr.insert(tr.mapping.slice(mapFrom).map(tableStart + newPos), copy);\n      col += cell.attrs.colspan - 1;\n    }\n  }\n}\n\n// :: (EditorState, dispatch: ?(tr: Transaction)) → bool\n// Remove the selected rows from a table.\nfunction deleteRow(state, dispatch) {\n  if (!isInTable(state)) { return false }\n  if (dispatch) {\n    var rect = selectedRect(state), tr = state.tr;\n    if (rect.top == 0 && rect.bottom == rect.map.height) { return false }\n    for (var i = rect.bottom - 1;; i--) {\n      removeRow(tr, rect, i);\n      if (i == rect.top) { break }\n      rect.table = rect.tableStart ? tr.doc.nodeAt(rect.tableStart - 1) : tr.doc;\n      rect.map = TableMap.get(rect.table);\n    }\n    dispatch(tr);\n  }\n  return true\n}\n\nfunction isEmpty(cell) {\n  var c = cell.content;\n  return c.childCount == 1 && c.firstChild.isTextblock && c.firstChild.childCount == 0\n}\n\nfunction cellsOverlapRectangle(ref, rect) {\n  var width = ref.width;\n  var height = ref.height;\n  var map = ref.map;\n\n  var indexTop = rect.top * width + rect.left, indexLeft = indexTop;\n  var indexBottom = (rect.bottom - 1) * width + rect.left, indexRight = indexTop + (rect.right - rect.left - 1);\n  for (var i = rect.top; i < rect.bottom; i++) {\n    if (rect.left > 0 && map[indexLeft] == map[indexLeft - 1] ||\n        rect.right < width && map[indexRight] == map[indexRight + 1]) { return true }\n    indexLeft += width; indexRight += width;\n  }\n  for (var i$1 = rect.left; i$1 < rect.right; i$1++) {\n    if (rect.top > 0 && map[indexTop] == map[indexTop - width] ||\n        rect.bottom < height && map[indexBottom] == map[indexBottom + width]) { return true }\n    indexTop++; indexBottom++;\n  }\n  return false\n}\n\n// :: (EditorState, dispatch: ?(tr: Transaction)) → bool\n// Merge the selected cells into a single cell. Only available when\n// the selected cells' outline forms a rectangle.\nfunction mergeCells(state, dispatch) {\n  var sel = state.selection;\n  if (!(sel instanceof CellSelection) || sel.$anchorCell.pos == sel.$headCell.pos) { return false }\n  var rect = selectedRect(state);\n  var map = rect.map;\n  if (cellsOverlapRectangle(map, rect)) { return false }\n  if (dispatch) {\n    var tr = state.tr, seen = {}, content = Fragment.empty, mergedPos, mergedCell;\n    for (var row = rect.top; row < rect.bottom; row++) {\n      for (var col = rect.left; col < rect.right; col++) {\n        var cellPos = map.map[row * map.width + col], cell = rect.table.nodeAt(cellPos);\n        if (seen[cellPos]) { continue }\n        seen[cellPos] = true;\n        if (mergedPos == null) {\n          mergedPos = cellPos;\n          mergedCell = cell;\n        } else {\n          if (!isEmpty(cell)) { content = content.append(cell.content); }\n          var mapped = tr.mapping.map(cellPos + rect.tableStart);\n          tr.delete(mapped, mapped + cell.nodeSize);\n        }\n      }\n    }\n    tr.setNodeMarkup(mergedPos + rect.tableStart, null,\n                     setAttr(addColSpan(mergedCell.attrs, mergedCell.attrs.colspan, (rect.right - rect.left) - mergedCell.attrs.colspan),\n                             \"rowspan\", rect.bottom - rect.top));\n    if (content.size) {\n      var end = mergedPos + 1 + mergedCell.content.size;\n      var start = isEmpty(mergedCell) ? mergedPos + 1 : end;\n      tr.replaceWith(start + rect.tableStart, end + rect.tableStart, content);\n    }\n    tr.setSelection(new CellSelection(tr.doc.resolve(mergedPos + rect.tableStart)));\n    dispatch(tr);\n  }\n  return true\n}\n// :: (EditorState, dispatch: ?(tr: Transaction)) → bool\n// Split a selected cell, whose rowpan or colspan is greater than one,\n// into smaller cells. Use the first cell type for the new cells.\nfunction splitCell(state, dispatch) {\n  var nodeTypes = tableNodeTypes(state.schema);\n  return splitCellWithType(function (ref) {\n    var node = ref.node;\n\n    return nodeTypes[node.type.spec.tableRole]\n  })(state, dispatch)\n}\n\n// :: (getCellType: ({ row: number, col: number, node: Node}) → NodeType) → (EditorState, dispatch: ?(tr: Transaction)) → bool\n// Split a selected cell, whose rowpan or colspan is greater than one,\n// into smaller cells with the cell type (th, td) returned by getType function.\nfunction splitCellWithType(getCellType) {\n  return function (state, dispatch) {\n    var sel = state.selection;\n    var cellNode, cellPos;\n    if (!(sel instanceof CellSelection)) {\n      cellNode = cellWrapping(sel.$from);\n      if (!cellNode) { return false }\n      cellPos = cellAround(sel.$from).pos;\n    } else {\n      if (sel.$anchorCell.pos != sel.$headCell.pos) { return false }\n      cellNode = sel.$anchorCell.nodeAfter;\n      cellPos = sel.$anchorCell.pos;\n    }\n    if (cellNode.attrs.colspan == 1 && cellNode.attrs.rowspan == 1) {return false}\n    if (dispatch) {\n      var baseAttrs = cellNode.attrs, attrs = [], colwidth = baseAttrs.colwidth;\n      if (baseAttrs.rowspan > 1) { baseAttrs = setAttr(baseAttrs, \"rowspan\", 1); }\n      if (baseAttrs.colspan > 1) { baseAttrs = setAttr(baseAttrs, \"colspan\", 1); }\n      var rect = selectedRect(state), tr = state.tr;\n      for (var i = 0; i < rect.right - rect.left; i++)\n        { attrs.push(colwidth ? setAttr(baseAttrs, \"colwidth\", colwidth && colwidth[i] ? [colwidth[i]] : null) : baseAttrs); }\n      var lastCell;\n      for (var row = rect.top; row < rect.bottom; row++) {\n        var pos = rect.map.positionAt(row, rect.left, rect.table);\n        if (row == rect.top) { pos += cellNode.nodeSize; }\n        for (var col = rect.left, i$1 = 0; col < rect.right; col++, i$1++) {\n          if (col == rect.left && row == rect.top) { continue }\n          tr.insert(lastCell = tr.mapping.map(pos + rect.tableStart, 1), getCellType({ node: cellNode, row: row, col: col}).createAndFill(attrs[i$1]));\n        }\n      }\n      tr.setNodeMarkup(cellPos, getCellType({ node: cellNode, row: rect.top, col: rect.left}), attrs[0]);\n      if (sel instanceof CellSelection)\n        { tr.setSelection(new CellSelection(tr.doc.resolve(sel.$anchorCell.pos),\n                                          lastCell && tr.doc.resolve(lastCell))); }\n      dispatch(tr);\n    }\n    return true\n  }\n}\n\n// :: (string, any) → (EditorState, dispatch: ?(tr: Transaction)) → bool\n// Returns a command that sets the given attribute to the given value,\n// and is only available when the currently selected cell doesn't\n// already have that attribute set to that value.\nfunction setCellAttr(name, value) {\n  return function(state, dispatch) {\n    if (!isInTable(state)) { return false }\n    var $cell = selectionCell(state);\n    if ($cell.nodeAfter.attrs[name] === value) { return false }\n    if (dispatch) {\n      var tr = state.tr;\n      if (state.selection instanceof CellSelection)\n        { state.selection.forEachCell(function (node, pos) {\n          if (node.attrs[name] !== value)\n            { tr.setNodeMarkup(pos, null, setAttr(node.attrs, name, value)); }\n        }); }\n      else\n        { tr.setNodeMarkup($cell.pos, null, setAttr($cell.nodeAfter.attrs, name, value)); }\n      dispatch(tr);\n    }\n    return true\n  }\n}\n\nfunction deprecated_toggleHeader(type) {\n  return function(state, dispatch) {\n    if (!isInTable(state)) { return false }\n    if (dispatch) {\n      var types = tableNodeTypes(state.schema);\n      var rect = selectedRect(state), tr = state.tr;\n      var cells = rect.map.cellsInRect(type == \"column\" ? new Rect(rect.left, 0, rect.right, rect.map.height) :\n                                       type == \"row\" ? new Rect(0, rect.top, rect.map.width, rect.bottom) : rect);\n      var nodes = cells.map(function (pos) { return rect.table.nodeAt(pos); });\n      for (var i = 0; i < cells.length; i++) // Remove headers, if any\n        { if (nodes[i].type == types.header_cell)\n          { tr.setNodeMarkup(rect.tableStart + cells[i], types.cell, nodes[i].attrs); } }\n      if (tr.steps.length == 0) { for (var i$1 = 0; i$1 < cells.length; i$1++) // No headers removed, add instead\n        { tr.setNodeMarkup(rect.tableStart + cells[i$1], types.header_cell, nodes[i$1].attrs); } }\n      dispatch(tr);\n    }\n    return true\n  }\n}\n\nfunction isHeaderEnabledByType(type, rect, types) {\n  // Get cell positions for first row or first column\n  var cellPositions = rect.map.cellsInRect({\n    left: 0,\n    top: 0,\n    right: type == \"row\" ? rect.map.width : 1,\n    bottom: type == \"column\" ? rect.map.height : 1,\n  });\n\n  for (var i = 0; i < cellPositions.length; i++) {\n    var cell = rect.table.nodeAt(cellPositions[i]);\n    if (cell && cell.type !== types.header_cell) {\n      return false\n    }\n  }\n\n  return true\n}\n\n// :: (string, ?{ useDeprecatedLogic: bool }) → (EditorState, dispatch: ?(tr: Transaction)) → bool\n// Toggles between row/column header and normal cells (Only applies to first row/column).\n// For deprecated behavior pass `useDeprecatedLogic` in options with true.\nfunction toggleHeader(type, options) {\n  options = options || { useDeprecatedLogic: false };\n\n  if (options.useDeprecatedLogic)\n    { return deprecated_toggleHeader(type) }\n\n  return function(state, dispatch) {\n    if (!isInTable(state)) { return false }\n    if (dispatch) {\n      var types = tableNodeTypes(state.schema);\n      var rect = selectedRect(state), tr = state.tr;\n\n      var isHeaderRowEnabled = isHeaderEnabledByType(\"row\", rect, types);\n      var isHeaderColumnEnabled = isHeaderEnabledByType(\"column\", rect, types);\n\n      var isHeaderEnabled = type === \"column\" ? isHeaderRowEnabled :\n                            type === \"row\"    ? isHeaderColumnEnabled : false;\n\n      var selectionStartsAt = isHeaderEnabled ? 1 : 0;\n\n      var cellsRect = type == \"column\" ? new Rect(0, selectionStartsAt, 1, rect.map.height) :\n                      type == \"row\" ? new Rect(selectionStartsAt, 0, rect.map.width, 1) : rect;\n\n      var newType = type == \"column\" ? isHeaderColumnEnabled ? types.cell : types.header_cell :\n                    type == \"row\" ? isHeaderRowEnabled ? types.cell : types.header_cell : types.cell;\n\n      rect.map.cellsInRect(cellsRect).forEach(function (relativeCellPos) {\n        var cellPos = relativeCellPos + rect.tableStart;\n        var cell = tr.doc.nodeAt(cellPos);\n\n        if (cell) {\n          tr.setNodeMarkup(cellPos, newType, cell.attrs);\n        }\n      });\n\n      dispatch(tr);\n    }\n    return true\n  }\n}\n\n// :: (EditorState, dispatch: ?(tr: Transaction)) → bool\n// Toggles whether the selected row contains header cells.\nvar toggleHeaderRow = toggleHeader(\"row\", { useDeprecatedLogic: true });\n\n// :: (EditorState, dispatch: ?(tr: Transaction)) → bool\n// Toggles whether the selected column contains header cells.\nvar toggleHeaderColumn = toggleHeader(\"column\", { useDeprecatedLogic: true });\n\n// :: (EditorState, dispatch: ?(tr: Transaction)) → bool\n// Toggles whether the selected cells are header cells.\nvar toggleHeaderCell = toggleHeader(\"cell\", { useDeprecatedLogic: true });\n\nfunction findNextCell($cell, dir) {\n  if (dir < 0) {\n    var before = $cell.nodeBefore;\n    if (before) { return $cell.pos - before.nodeSize }\n    for (var row = $cell.index(-1) - 1, rowEnd = $cell.before(); row >= 0; row--) {\n      var rowNode = $cell.node(-1).child(row);\n      if (rowNode.childCount) { return rowEnd - 1 - rowNode.lastChild.nodeSize }\n      rowEnd -= rowNode.nodeSize;\n    }\n  } else {\n    if ($cell.index() < $cell.parent.childCount - 1) { return $cell.pos + $cell.nodeAfter.nodeSize }\n    var table = $cell.node(-1);\n    for (var row$1 = $cell.indexAfter(-1), rowStart = $cell.after(); row$1 < table.childCount; row$1++) {\n      var rowNode$1 = table.child(row$1);\n      if (rowNode$1.childCount) { return rowStart + 1 }\n      rowStart += rowNode$1.nodeSize;\n    }\n  }\n}\n\n// :: (number) → (EditorState, dispatch: ?(tr: Transaction)) → bool\n// Returns a command for selecting the next (direction=1) or previous\n// (direction=-1) cell in a table.\nfunction goToNextCell(direction) {\n  return function(state, dispatch) {\n    if (!isInTable(state)) { return false }\n    var cell = findNextCell(selectionCell(state), direction);\n    if (cell == null) { return }\n    if (dispatch) {\n      var $cell = state.doc.resolve(cell);\n      dispatch(state.tr.setSelection(TextSelection.between($cell, moveCellForward($cell))).scrollIntoView());\n    }\n    return true\n  }\n}\n\n// :: (EditorState, ?(tr: Transaction)) → bool\n// Deletes the table around the selection, if any.\nfunction deleteTable(state, dispatch) {\n  var $pos = state.selection.$anchor;\n  for (var d = $pos.depth; d > 0; d--) {\n    var node = $pos.node(d);\n    if (node.type.spec.tableRole == \"table\") {\n      if (dispatch) { dispatch(state.tr.delete($pos.before(d), $pos.after(d)).scrollIntoView()); }\n      return true\n    }\n  }\n  return false\n}\n\nvar TableView = function TableView(node, cellMinWidth) {\n  this.node = node;\n  this.cellMinWidth = cellMinWidth;\n  this.dom = document.createElement(\"div\");\n  this.dom.className = \"tableWrapper\";\n  this.table = this.dom.appendChild(document.createElement(\"table\"));\n  this.colgroup = this.table.appendChild(document.createElement(\"colgroup\"));\n  updateColumns(node, this.colgroup, this.table, cellMinWidth);\n  this.contentDOM = this.table.appendChild(document.createElement(\"tbody\"));\n};\n\nTableView.prototype.update = function update (node) {\n  if (node.type != this.node.type) { return false }\n  this.node = node;\n  updateColumns(node, this.colgroup, this.table, this.cellMinWidth);\n  return true\n};\n\nTableView.prototype.ignoreMutation = function ignoreMutation (record) {\n  return record.type == \"attributes\" && (record.target == this.table || this.colgroup.contains(record.target))\n};\n\nfunction updateColumns(node, colgroup, table, cellMinWidth, overrideCol, overrideValue) {\n  var totalWidth = 0, fixedWidth = true;\n  var nextDOM = colgroup.firstChild, row = node.firstChild;\n  for (var i = 0, col = 0; i < row.childCount; i++) {\n    var ref = row.child(i).attrs;\n    var colspan = ref.colspan;\n    var colwidth = ref.colwidth;\n    for (var j = 0; j < colspan; j++, col++) {\n      var hasWidth = overrideCol == col ? overrideValue : colwidth && colwidth[j];\n      var cssWidth = hasWidth ? hasWidth + \"px\" : \"\";\n      totalWidth += hasWidth || cellMinWidth;\n      if (!hasWidth) { fixedWidth = false; }\n      if (!nextDOM) {\n        colgroup.appendChild(document.createElement(\"col\")).style.width = cssWidth;\n      } else {\n        if (nextDOM.style.width != cssWidth) { nextDOM.style.width = cssWidth; }\n        nextDOM = nextDOM.nextSibling;\n      }\n    }\n  }\n\n  while (nextDOM) {\n    var after = nextDOM.nextSibling;\n    nextDOM.parentNode.removeChild(nextDOM);\n    nextDOM = after;\n  }\n\n  if (fixedWidth) {\n    table.style.width = totalWidth + \"px\";\n    table.style.minWidth = \"\";\n  } else {\n    table.style.width = \"\";\n    table.style.minWidth = totalWidth + \"px\";\n  }\n}\n\nvar key$1 = new PluginKey(\"tableColumnResizing\");\n\nfunction columnResizing(ref) {\n  if ( ref === void 0 ) ref = {};\n  var handleWidth = ref.handleWidth; if ( handleWidth === void 0 ) handleWidth = 5;\n  var cellMinWidth = ref.cellMinWidth; if ( cellMinWidth === void 0 ) cellMinWidth = 25;\n  var View = ref.View; if ( View === void 0 ) View = TableView;\n  var lastColumnResizable = ref.lastColumnResizable; if ( lastColumnResizable === void 0 ) lastColumnResizable = true;\n\n  var plugin = new Plugin({\n    key: key$1,\n    state: {\n      init: function init(_, state) {\n        this.spec.props.nodeViews[tableNodeTypes(state.schema).table.name] =\n          function (node, view) { return new View(node, cellMinWidth, view); };\n        return new ResizeState(-1, false)\n      },\n      apply: function apply(tr, prev) {\n        return prev.apply(tr)\n      }\n    },\n    props: {\n      attributes: function attributes(state) {\n        var pluginState = key$1.getState(state);\n        return pluginState.activeHandle > -1 ? {class: \"resize-cursor\"} : null\n      },\n\n      handleDOMEvents: {\n        mousemove: function mousemove(view, event) { handleMouseMove(view, event, handleWidth, cellMinWidth, lastColumnResizable); },\n        mouseleave: function mouseleave(view) { handleMouseLeave(view); },\n        mousedown: function mousedown(view, event) { handleMouseDown$1(view, event, cellMinWidth); }\n      },\n\n      decorations: function decorations(state) {\n        var pluginState = key$1.getState(state);\n        if (pluginState.activeHandle > -1) { return handleDecorations(state, pluginState.activeHandle) }\n      },\n\n      nodeViews: {}\n    }\n  });\n  return plugin\n}\n\nvar ResizeState = function ResizeState(activeHandle, dragging) {\n  this.activeHandle = activeHandle;\n  this.dragging = dragging;\n};\n\nResizeState.prototype.apply = function apply (tr) {\n  var state = this, action = tr.getMeta(key$1);\n  if (action && action.setHandle != null)\n    { return new ResizeState(action.setHandle, null) }\n  if (action && action.setDragging !== undefined)\n    { return new ResizeState(state.activeHandle, action.setDragging) }\n  if (state.activeHandle > -1 && tr.docChanged) {\n    var handle = tr.mapping.map(state.activeHandle, -1);\n    if (!pointsAtCell(tr.doc.resolve(handle))) { handle = null; }\n    state = new ResizeState(handle, state.dragging);\n  }\n  return state\n};\n\nfunction handleMouseMove(view, event, handleWidth, cellMinWidth, lastColumnResizable) {\n  var pluginState = key$1.getState(view.state);\n\n  if (!pluginState.dragging) {\n    var target = domCellAround(event.target), cell = -1;\n    if (target) {\n      var ref = target.getBoundingClientRect();\n      var left = ref.left;\n      var right = ref.right;\n      if (event.clientX - left <= handleWidth)\n        { cell = edgeCell(view, event, \"left\"); }\n      else if (right - event.clientX <= handleWidth)\n        { cell = edgeCell(view, event, \"right\"); }\n    }\n\n    if (cell != pluginState.activeHandle) {\n      if (!lastColumnResizable && cell !== -1) {\n        var $cell = view.state.doc.resolve(cell);\n        var table = $cell.node(-1), map = TableMap.get(table), start = $cell.start(-1);\n        var col = map.colCount($cell.pos - start) + $cell.nodeAfter.attrs.colspan - 1;\n\n        if (col == map.width - 1) {\n          return\n        }\n      }\n\n      updateHandle(view, cell);\n    }\n  }\n}\n\nfunction handleMouseLeave(view) {\n  var pluginState = key$1.getState(view.state);\n  if (pluginState.activeHandle > -1 && !pluginState.dragging) { updateHandle(view, -1); }\n}\n\nfunction handleMouseDown$1(view, event, cellMinWidth) {\n  var pluginState = key$1.getState(view.state);\n  if (pluginState.activeHandle == -1 || pluginState.dragging) { return false }\n\n  var cell = view.state.doc.nodeAt(pluginState.activeHandle);\n  var width = currentColWidth(view, pluginState.activeHandle, cell.attrs);\n  view.dispatch(view.state.tr.setMeta(key$1, {setDragging: {startX: event.clientX, startWidth: width}}));\n\n  function finish(event) {\n    window.removeEventListener(\"mouseup\", finish);\n    window.removeEventListener(\"mousemove\", move);\n    var pluginState = key$1.getState(view.state);\n    if (pluginState.dragging) {\n      updateColumnWidth(view, pluginState.activeHandle, draggedWidth(pluginState.dragging, event, cellMinWidth));\n      view.dispatch(view.state.tr.setMeta(key$1, {setDragging: null}));\n    }\n  }\n  function move(event) {\n    if (!event.which) { return finish(event) }\n    var pluginState = key$1.getState(view.state);\n    var dragged = draggedWidth(pluginState.dragging, event, cellMinWidth);\n    displayColumnWidth(view, pluginState.activeHandle, dragged, cellMinWidth);\n  }\n\n  window.addEventListener(\"mouseup\", finish);\n  window.addEventListener(\"mousemove\", move);\n  event.preventDefault();\n  return true\n}\n\nfunction currentColWidth(view, cellPos, ref) {\n  var colspan = ref.colspan;\n  var colwidth = ref.colwidth;\n\n  var width = colwidth && colwidth[colwidth.length - 1];\n  if (width) { return width }\n  var dom = view.domAtPos(cellPos);\n  var node = dom.node.childNodes[dom.offset];\n  var domWidth = node.offsetWidth, parts = colspan;\n  if (colwidth) { for (var i = 0; i < colspan; i++) { if (colwidth[i]) {\n    domWidth -= colwidth[i];\n    parts--;\n  } } }\n  return domWidth / parts\n}\n\nfunction domCellAround(target) {\n  while (target && target.nodeName != \"TD\" && target.nodeName != \"TH\")\n    { target = target.classList.contains(\"ProseMirror\") ? null : target.parentNode; }\n  return target\n}\n\nfunction edgeCell(view, event, side) {\n  var found = view.posAtCoords({left: event.clientX, top: event.clientY});\n  if (!found) { return -1 }\n  var pos = found.pos;\n  var $cell = cellAround(view.state.doc.resolve(pos));\n  if (!$cell) { return -1 }\n  if (side == \"right\") { return $cell.pos }\n  var map = TableMap.get($cell.node(-1)), start = $cell.start(-1);\n  var index = map.map.indexOf($cell.pos - start);\n  return index % map.width == 0 ? -1 : start + map.map[index - 1]\n}\n\nfunction draggedWidth(dragging, event, cellMinWidth) {\n  var offset = event.clientX - dragging.startX;\n  return Math.max(cellMinWidth, dragging.startWidth + offset)\n}\n\nfunction updateHandle(view, value) {\n  view.dispatch(view.state.tr.setMeta(key$1, {setHandle: value}));\n}\n\nfunction updateColumnWidth(view, cell, width) {\n  var $cell = view.state.doc.resolve(cell);\n  var table = $cell.node(-1), map = TableMap.get(table), start = $cell.start(-1);\n  var col = map.colCount($cell.pos - start) + $cell.nodeAfter.attrs.colspan - 1;\n  var tr = view.state.tr;\n  for (var row = 0; row < map.height; row++) {\n    var mapIndex = row * map.width + col;\n    // Rowspanning cell that has already been handled\n    if (row && map.map[mapIndex] == map.map[mapIndex - map.width]) { continue }\n    var pos = map.map[mapIndex];\n    var ref = table.nodeAt(pos);\n    var attrs = ref.attrs;\n    var index = attrs.colspan == 1 ? 0 : col - map.colCount(pos);\n    if (attrs.colwidth && attrs.colwidth[index] == width) { continue }\n    var colwidth = attrs.colwidth ? attrs.colwidth.slice() : zeroes(attrs.colspan);\n    colwidth[index] = width;\n    tr.setNodeMarkup(start + pos, null, setAttr(attrs, \"colwidth\", colwidth));\n  }\n  if (tr.docChanged) { view.dispatch(tr); }\n}\n\nfunction displayColumnWidth(view, cell, width, cellMinWidth) {\n  var $cell = view.state.doc.resolve(cell);\n  var table = $cell.node(-1), start = $cell.start(-1);\n  var col = TableMap.get(table).colCount($cell.pos - start) + $cell.nodeAfter.attrs.colspan - 1;\n  var dom = view.domAtPos($cell.start(-1)).node;\n  while (dom.nodeName != \"TABLE\") { dom = dom.parentNode; }\n  updateColumns(table, dom.firstChild, dom, cellMinWidth, col, width);\n}\n\nfunction zeroes(n) {\n  var result = [];\n  for (var i = 0; i < n; i++) { result.push(0); }\n  return result\n}\n\nfunction handleDecorations(state, cell) {\n  var decorations = [];\n  var $cell = state.doc.resolve(cell);\n  var table = $cell.node(-1), map = TableMap.get(table), start = $cell.start(-1);\n  var col = map.colCount($cell.pos - start) + $cell.nodeAfter.attrs.colspan;\n  for (var row = 0; row < map.height; row++) {\n    var index = col + row * map.width - 1;\n    // For positions that are have either a different cell or the end\n    // of the table to their right, and either the top of the table or\n    // a different cell above them, add a decoration\n    if ((col == map.width || map.map[index] != map.map[index + 1]) &&\n        (row == 0 || map.map[index - 1] != map.map[index - 1 - map.width])) {\n      var cellPos = map.map[index];\n      var pos = start + cellPos + table.nodeAt(cellPos).nodeSize - 1;\n      var dom = document.createElement(\"div\");\n      dom.className = \"column-resize-handle\";\n      decorations.push(Decoration.widget(pos, dom));\n    }\n  }\n  return DecorationSet.create(state.doc, decorations)\n}\n\n// This file defines a plugin that handles the drawing of cell\n\n// :: () → Plugin\n//\n// Creates a [plugin](http://prosemirror.net/docs/ref/#state.Plugin)\n// that, when added to an editor, enables cell-selection, handles\n// cell-based copy/paste, and makes sure tables stay well-formed (each\n// row has the same width, and cells don't overlap).\n//\n// You should probably put this plugin near the end of your array of\n// plugins, since it handles mouse and arrow key events in tables\n// rather broadly, and other plugins, like the gap cursor or the\n// column-width dragging plugin, might want to get a turn first to\n// perform more specific behavior.\nfunction tableEditing(ref) {\n  if ( ref === void 0 ) ref = {};\n  var allowTableNodeSelection = ref.allowTableNodeSelection; if ( allowTableNodeSelection === void 0 ) allowTableNodeSelection = false;\n\n  return new Plugin({\n    key: key,\n\n    // This piece of state is used to remember when a mouse-drag\n    // cell-selection is happening, so that it can continue even as\n    // transactions (which might move its anchor cell) come in.\n    state: {\n      init: function init() { return null },\n      apply: function apply(tr, cur) {\n        var set = tr.getMeta(key);\n        if (set != null) { return set == -1 ? null : set }\n        if (cur == null || !tr.docChanged) { return cur }\n        var ref = tr.mapping.mapResult(cur);\n        var deleted = ref.deleted;\n        var pos = ref.pos;\n        return deleted ? null : pos\n      }\n    },\n\n    props: {\n      decorations: drawCellSelection,\n\n      handleDOMEvents: {\n        mousedown: handleMouseDown\n      },\n\n      createSelectionBetween: function createSelectionBetween(view) {\n        if (key.getState(view.state) != null) { return view.state.selection }\n      },\n\n      handleTripleClick: handleTripleClick,\n\n      handleKeyDown: handleKeyDown,\n\n      handlePaste: handlePaste\n    },\n\n    appendTransaction: function appendTransaction(_, oldState, state) {\n      return normalizeSelection(state, fixTables(state, oldState), allowTableNodeSelection)\n    }\n  })\n}\n\nexport { CellSelection, TableMap, TableView, clipCells as __clipCells, insertCells as __insertCells, pastedCells as __pastedCells, addColSpan, addColumn, addColumnAfter, addColumnBefore, addRow, addRowAfter, addRowBefore, cellAround, colCount, columnIsHeader, columnResizing, key$1 as columnResizingPluginKey, deleteColumn, deleteRow, deleteTable, findCell, fixTables, fixTablesKey, goToNextCell, handlePaste, inSameTable, isInTable, mergeCells, moveCellForward, nextCell, pointsAtCell, removeColSpan, removeColumn, removeRow, rowIsHeader, selectedRect, selectionCell, setAttr, setCellAttr, splitCell, splitCellWithType, tableEditing, key as tableEditingKey, tableNodeTypes, tableNodes, toggleHeader, toggleHeaderCell, toggleHeaderColumn, toggleHeaderRow, updateColumns as updateColumnsOnResize };\n//# sourceMappingURL=index.es.js.map\n","import { findParentNodeClosestToPos, Node, mergeAttributes, callOrReturn, getExtensionField } from '@tiptap/core';\nimport { CellSelection, addColumnBefore, addColumnAfter, deleteColumn, addRowBefore, addRowAfter, deleteRow, deleteTable, mergeCells, splitCell, toggleHeader, toggleHeaderCell, setCellAttr, goToNextCell, fixTables, columnResizing, tableEditing } from 'prosemirror-tables';\nimport { TextSelection } from 'prosemirror-state';\n\nfunction createCell(cellType, cellContent) {\r\n    if (cellContent) {\r\n        return cellType.createChecked(null, cellContent);\r\n    }\r\n    return cellType.createAndFill();\r\n}\n\nfunction getTableNodeTypes(schema) {\r\n    if (schema.cached.tableNodeTypes) {\r\n        return schema.cached.tableNodeTypes;\r\n    }\r\n    const roles = {};\r\n    Object.keys(schema.nodes).forEach(type => {\r\n        const nodeType = schema.nodes[type];\r\n        if (nodeType.spec.tableRole) {\r\n            roles[nodeType.spec.tableRole] = nodeType;\r\n        }\r\n    });\r\n    schema.cached.tableNodeTypes = roles;\r\n    return roles;\r\n}\n\nfunction createTable(schema, rowsCount, colsCount, withHeaderRow, cellContent) {\r\n    const types = getTableNodeTypes(schema);\r\n    const headerCells = [];\r\n    const cells = [];\r\n    for (let index = 0; index < colsCount; index += 1) {\r\n        const cell = createCell(types.cell, cellContent);\r\n        if (cell) {\r\n            cells.push(cell);\r\n        }\r\n        if (withHeaderRow) {\r\n            const headerCell = createCell(types.header_cell, cellContent);\r\n            if (headerCell) {\r\n                headerCells.push(headerCell);\r\n            }\r\n        }\r\n    }\r\n    const rows = [];\r\n    for (let index = 0; index < rowsCount; index += 1) {\r\n        rows.push(types.row.createChecked(null, withHeaderRow && index === 0 ? headerCells : cells));\r\n    }\r\n    return types.table.createChecked(null, rows);\r\n}\n\nfunction isCellSelection(value) {\r\n    return value instanceof CellSelection;\r\n}\n\nconst deleteTableWhenAllCellsSelected = ({ editor }) => {\r\n    const { selection } = editor.state;\r\n    if (!isCellSelection(selection)) {\r\n        return false;\r\n    }\r\n    let cellCount = 0;\r\n    const table = findParentNodeClosestToPos(selection.ranges[0].$from, node => {\r\n        return node.type.name === 'table';\r\n    });\r\n    table === null || table === void 0 ? void 0 : table.node.descendants(node => {\r\n        if (node.type.name === 'table') {\r\n            return false;\r\n        }\r\n        if (['tableCell', 'tableHeader'].includes(node.type.name)) {\r\n            cellCount += 1;\r\n        }\r\n    });\r\n    const allCellsSelected = cellCount === selection.ranges.length;\r\n    if (!allCellsSelected) {\r\n        return false;\r\n    }\r\n    editor.commands.deleteTable();\r\n    return true;\r\n};\n\nfunction updateColumns(node, colgroup, table, cellMinWidth, overrideCol, overrideValue) {\r\n    let totalWidth = 0;\r\n    let fixedWidth = true;\r\n    let nextDOM = colgroup.firstChild;\r\n    const row = node.firstChild;\r\n    for (let i = 0, col = 0; i < row.childCount; i += 1) {\r\n        const { colspan, colwidth } = row.child(i).attrs;\r\n        for (let j = 0; j < colspan; j += 1, col += 1) {\r\n            const hasWidth = overrideCol === col ? overrideValue : colwidth && colwidth[j];\r\n            const cssWidth = hasWidth ? `${hasWidth}px` : '';\r\n            totalWidth += hasWidth || cellMinWidth;\r\n            if (!hasWidth) {\r\n                fixedWidth = false;\r\n            }\r\n            if (!nextDOM) {\r\n                colgroup.appendChild(document.createElement('col')).style.width = cssWidth;\r\n            }\r\n            else {\r\n                if (nextDOM.style.width !== cssWidth) {\r\n                    nextDOM.style.width = cssWidth;\r\n                }\r\n                nextDOM = nextDOM.nextSibling;\r\n            }\r\n        }\r\n    }\r\n    while (nextDOM) {\r\n        const after = nextDOM.nextSibling;\r\n        nextDOM.parentNode.removeChild(nextDOM);\r\n        nextDOM = after;\r\n    }\r\n    if (fixedWidth) {\r\n        table.style.width = `${totalWidth}px`;\r\n        table.style.minWidth = '';\r\n    }\r\n    else {\r\n        table.style.width = '';\r\n        table.style.minWidth = `${totalWidth}px`;\r\n    }\r\n}\r\nclass TableView {\r\n    constructor(node, cellMinWidth) {\r\n        this.node = node;\r\n        this.cellMinWidth = cellMinWidth;\r\n        this.dom = document.createElement('div');\r\n        this.dom.className = 'tableWrapper';\r\n        this.table = this.dom.appendChild(document.createElement('table'));\r\n        this.colgroup = this.table.appendChild(document.createElement('colgroup'));\r\n        updateColumns(node, this.colgroup, this.table, cellMinWidth);\r\n        this.contentDOM = this.table.appendChild(document.createElement('tbody'));\r\n    }\r\n    update(node) {\r\n        if (node.type !== this.node.type) {\r\n            return false;\r\n        }\r\n        this.node = node;\r\n        updateColumns(node, this.colgroup, this.table, this.cellMinWidth);\r\n        return true;\r\n    }\r\n    ignoreMutation(mutation) {\r\n        return mutation.type === 'attributes' && (mutation.target === this.table || this.colgroup.contains(mutation.target));\r\n    }\r\n}\n\nconst Table = Node.create({\r\n    name: 'table',\r\n    // @ts-ignore\r\n    addOptions() {\r\n        return {\r\n            HTMLAttributes: {},\r\n            resizable: false,\r\n            handleWidth: 5,\r\n            cellMinWidth: 25,\r\n            // TODO: fix\r\n            View: TableView,\r\n            lastColumnResizable: true,\r\n            allowTableNodeSelection: false,\r\n        };\r\n    },\r\n    content: 'tableRow+',\r\n    tableRole: 'table',\r\n    isolating: true,\r\n    group: 'block',\r\n    parseHTML() {\r\n        return [\r\n            { tag: 'table' },\r\n        ];\r\n    },\r\n    renderHTML({ HTMLAttributes }) {\r\n        return ['table', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), ['tbody', 0]];\r\n    },\r\n    addCommands() {\r\n        return {\r\n            insertTable: ({ rows = 3, cols = 3, withHeaderRow = true } = {}) => ({ tr, dispatch, editor }) => {\r\n                const node = createTable(editor.schema, rows, cols, withHeaderRow);\r\n                if (dispatch) {\r\n                    const offset = tr.selection.anchor + 1;\r\n                    tr.replaceSelectionWith(node)\r\n                        .scrollIntoView()\r\n                        .setSelection(TextSelection.near(tr.doc.resolve(offset)));\r\n                }\r\n                return true;\r\n            },\r\n            addColumnBefore: () => ({ state, dispatch }) => {\r\n                return addColumnBefore(state, dispatch);\r\n            },\r\n            addColumnAfter: () => ({ state, dispatch }) => {\r\n                return addColumnAfter(state, dispatch);\r\n            },\r\n            deleteColumn: () => ({ state, dispatch }) => {\r\n                return deleteColumn(state, dispatch);\r\n            },\r\n            addRowBefore: () => ({ state, dispatch }) => {\r\n                return addRowBefore(state, dispatch);\r\n            },\r\n            addRowAfter: () => ({ state, dispatch }) => {\r\n                return addRowAfter(state, dispatch);\r\n            },\r\n            deleteRow: () => ({ state, dispatch }) => {\r\n                return deleteRow(state, dispatch);\r\n            },\r\n            deleteTable: () => ({ state, dispatch }) => {\r\n                return deleteTable(state, dispatch);\r\n            },\r\n            mergeCells: () => ({ state, dispatch }) => {\r\n                return mergeCells(state, dispatch);\r\n            },\r\n            splitCell: () => ({ state, dispatch }) => {\r\n                return splitCell(state, dispatch);\r\n            },\r\n            toggleHeaderColumn: () => ({ state, dispatch }) => {\r\n                return toggleHeader('column')(state, dispatch);\r\n            },\r\n            toggleHeaderRow: () => ({ state, dispatch }) => {\r\n                return toggleHeader('row')(state, dispatch);\r\n            },\r\n            toggleHeaderCell: () => ({ state, dispatch }) => {\r\n                return toggleHeaderCell(state, dispatch);\r\n            },\r\n            mergeOrSplit: () => ({ state, dispatch }) => {\r\n                if (mergeCells(state, dispatch)) {\r\n                    return true;\r\n                }\r\n                return splitCell(state, dispatch);\r\n            },\r\n            setCellAttribute: (name, value) => ({ state, dispatch }) => {\r\n                return setCellAttr(name, value)(state, dispatch);\r\n            },\r\n            goToNextCell: () => ({ state, dispatch }) => {\r\n                return goToNextCell(1)(state, dispatch);\r\n            },\r\n            goToPreviousCell: () => ({ state, dispatch }) => {\r\n                return goToNextCell(-1)(state, dispatch);\r\n            },\r\n            fixTables: () => ({ state, dispatch }) => {\r\n                if (dispatch) {\r\n                    fixTables(state);\r\n                }\r\n                return true;\r\n            },\r\n            setCellSelection: position => ({ tr, dispatch }) => {\r\n                if (dispatch) {\r\n                    const selection = CellSelection.create(tr.doc, position.anchorCell, position.headCell);\r\n                    // @ts-ignore\r\n                    tr.setSelection(selection);\r\n                }\r\n                return true;\r\n            },\r\n        };\r\n    },\r\n    addKeyboardShortcuts() {\r\n        return {\r\n            Tab: () => {\r\n                if (this.editor.commands.goToNextCell()) {\r\n                    return true;\r\n                }\r\n                if (!this.editor.can().addRowAfter()) {\r\n                    return false;\r\n                }\r\n                return this.editor\r\n                    .chain()\r\n                    .addRowAfter()\r\n                    .goToNextCell()\r\n                    .run();\r\n            },\r\n            'Shift-Tab': () => this.editor.commands.goToPreviousCell(),\r\n            Backspace: deleteTableWhenAllCellsSelected,\r\n            'Mod-Backspace': deleteTableWhenAllCellsSelected,\r\n            Delete: deleteTableWhenAllCellsSelected,\r\n            'Mod-Delete': deleteTableWhenAllCellsSelected,\r\n        };\r\n    },\r\n    addProseMirrorPlugins() {\r\n        const isResizable = this.options.resizable && this.editor.isEditable;\r\n        return [\r\n            ...(isResizable ? [columnResizing({\r\n                    handleWidth: this.options.handleWidth,\r\n                    cellMinWidth: this.options.cellMinWidth,\r\n                    View: this.options.View,\r\n                    // TODO: PR for @types/prosemirror-tables\r\n                    // @ts-ignore (incorrect type)\r\n                    lastColumnResizable: this.options.lastColumnResizable,\r\n                })] : []),\r\n            tableEditing({\r\n                allowTableNodeSelection: this.options.allowTableNodeSelection,\r\n            }),\r\n        ];\r\n    },\r\n    extendNodeSchema(extension) {\r\n        const context = {\r\n            name: extension.name,\r\n            options: extension.options,\r\n            storage: extension.storage,\r\n        };\r\n        return {\r\n            tableRole: callOrReturn(getExtensionField(extension, 'tableRole', context)),\r\n        };\r\n    },\r\n});\n\nexport { Table, createTable, Table as default };\n//# sourceMappingURL=tiptap-extension-table.esm.js.map\n"],"names":["readFromCache","addToCache","WeakMap","cache","key","get","value","set","cache$1","cachePos","i","length","Rect","left","top","right","bottom","this","TableMap","width","height","map","problems","freshColWidth","attrs","colwidth","slice","result","colspan","push","tableNodeTypes","schema","cached","name","nodes","type","role","spec","tableRole","prototype","findCell","pos","curPos","j","j$1","RangeError","colCount","nextCell","axis","dir","ref","rectBetween","a","b","leftA","rightA","topA","bottomA","ref$1","leftB","rightB","topB","bottomB","Math","min","max","cellsInRect","rect","seen","row","col","index","positionAt","table","rowStart","rowEnd","child","nodeSize","rowEndIndex","hasRowSpan","childCount","rowNode","rowWidth","prevRow","cell","rowspan","i$1","cell$1","findWidth","mapPos","colWidths","e","cellNode","h","n","start","w","colW","widthIndex","prev","expectedPos","missing","tableMap","badWidths","i$2","node","nodeAt","updated","colWidth","unshift","findBadColWidths","computeMap","cellAround","$pos","d","depth","resolve","before","isInTable","state","$head","selection","selectionCell","sel","$anchorCell","$headCell","$anchor","after","nodeAfter","firstChild","doc","nodeBefore","pos$1","lastChild","role$1","cellNear","pointsAtCell","parent","inSameTable","$a","$b","end","moved","setAttr","prop","removeColSpan","splice","some","addColSpan","CellSelection","Selection","cells","filter","p","ranges","from","content","size","call","$from","$to","__proto__","Object","create","constructor","mapping","tableChanged","isRowSelection","rowSelection","isColSelection","colSelection","rows","rowContent","cellRect","extraLeft","extraRight","createAndFill","attrs$1","copy","fragment","replace","tr","mapFrom","steps","findFrom","to","setSelection","replaceWith","forEachCell","f","anchorTop","headTop","anchorBot","headBot","anchorRect","headRect","anchorLeft","headLeft","anchorRight","headRight","eq","other","toJSON","anchor","head","fromJSON","json","anchorCell","headCell","getBookmark","CellBookmark","visible","drawCellSelection","class","pastedCells","openStart","openEnd","first","fitSlice","widths","r","r$1","r$2","empty","append","ensureRectangular","nodeType","isolateHorizontal","found","cellTop","cellLeft","setNodeMarkup","insert","isolateVertical","updatePos","insertCells","dispatch","tableStart","recomp","maps","emptyHead","types","add","header_cell","cells$1","start$1","header","emptyRow","growTable","handleKeyDown","arrow","shiftArrow","deleteCellSelection","maybeSetSelection","scrollIntoView","view","atEndOfCell","newSel","$cell","$next","baseContent","docChanged","handleTripleClick","handlePaste","_","newWidth","newHeight","added","newRows","frag","newRows$1","row$1","source","clipCells","handleMouseDown","startEvent","ctrlKey","metaKey","startDOMCell","domInCell","target","shiftKey","setCellSelection","preventDefault","cellUnderMouse","root","addEventListener","stop","move","event","starting","getState","setMeta","removeEventListener","indexAfter","cellPos","dirStr","endOfTextblock","dom","parentNode","nodeName","mousePos","posAtCoords","clientX","clientY","fixTablesKey","changedDescendants","old","cur","offset","oldSize","curSize","outer","scan","sameMarkup","nodesBetween","fixTables","oldState","check","tablePos","last","mustAdd","prob","cell$2","i$3","tableNodeType","side","fixTable","descendants","selectedRect","addColumn","refColumn","headerCell","columnIsHeader","removeColumn","mapStart","delete","addRow","rowPos","refRow","rowIsHeader","removeRow","nextRow","newPos","isEmpty","c","isTextblock","mergeCells","indexTop","indexLeft","indexBottom","indexRight","cellsOverlapRectangle","mergedPos","mergedCell","mapped","splitCell","getCellType","nodeTypes","cellWrapping","baseAttrs","lastCell","isHeaderEnabledByType","cellPositions","toggleHeader","options","useDeprecatedLogic","deprecated_toggleHeader","isHeaderRowEnabled","isHeaderColumnEnabled","selectionStartsAt","cellsRect","newType","forEach","relativeCellPos","toggleHeaderCell","goToNextCell","direction","rowNode$1","findNextCell","TableView","cellMinWidth","document","createElement","className","appendChild","colgroup","updateColumns","contentDOM","overrideCol","overrideValue","totalWidth","fixedWidth","nextDOM","hasWidth","cssWidth","style","nextSibling","removeChild","minWidth","update","ignoreMutation","record","contains","key$1","columnResizing","handleWidth","View","lastColumnResizable","plugin","init","props","nodeViews","ResizeState","apply","attributes","activeHandle","handleDOMEvents","mousemove","pluginState","dragging","classList","domCellAround","getBoundingClientRect","edgeCell","updateHandle","handleMouseMove","mouseleave","handleMouseLeave","mousedown","domAtPos","domWidth","childNodes","offsetWidth","parts","currentColWidth","finish","window","mapIndex","zeroes","updateColumnWidth","draggedWidth","setDragging","which","dragged","displayColumnWidth","startX","startWidth","handleMouseDown$1","decorations","handleDecorations","indexOf","setHandle","tableEditing","allowTableNodeSelection","getMeta","mapResult","deleted","createSelectionBetween","appendTransaction","normalize","afterFrom","beforeTo","test","isCellBoundarySelection","fromCellBoundaryNode","toCellBoundaryNode","node$1","parentOffset","isTextSelectionAcrossCells","normalizeSelection","createCell","cellType","cellContent","createChecked","createTable","rowsCount","colsCount","withHeaderRow","roles","keys","getTableNodeTypes","headerCells","action","undefined","handle","deleteTableWhenAllCellsSelected","editor","cellCount","findParentNodeClosestToPos","includes","commands","deleteTable","mutation","Table","Node","addOptions","HTMLAttributes","resizable","isolating","group","parseHTML","tag","renderHTML","mergeAttributes","addCommands","insertTable","cols","replaceSelectionWith","addColumnBefore","addColumnAfter","deleteColumn","addRowBefore","addRowAfter","deleteRow","toggleHeaderColumn","toggleHeaderRow","mergeOrSplit","setCellAttribute","setCellAttr","goToPreviousCell","position","addKeyboardShortcuts","Tab","can","chain","run","Backspace","Delete","addProseMirrorPlugins","isEditable","extendNodeSchema","extension","context","storage","callOrReturn","getExtensionField"],"sourceRoot":""}