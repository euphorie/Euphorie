{"version":3,"file":"chunks/2541.9c4e7a9b7b2dac336a25.min.js","mappings":"kgBAOO,MAAMA,EAEL,KAFKA,EAIH,KCLH,MAAMC,EAMTC,YAAYC,GACR,MAAM,QAAEC,EAAO,QAAEC,EAAO,KAAEC,EAAI,WAAEC,EAAU,mBAAEC,EAAkB,wBAAEC,GAA6BN,EAC7FO,KAAKN,QAAUA,EACfM,KAAKL,QAAUM,OAAOC,OAAO,GAAIP,GAAW,IACxCE,GACAG,KAAKG,YAAcN,EACnBG,KAAKI,cAAe,IAGpBJ,KAAKK,MAAQT,GAAQ,GACrBI,KAAKI,cAAe,GAExBJ,KAAKF,mBAAqBA,IAAsB,EAChDE,KAAKD,wBAA0BA,IAA2B,EAK1DH,WAIA,OAHKI,KAAKK,OAASL,KAAKI,eACpBJ,KAAKK,OAAQ,IAAIC,aAAcC,OAAOP,KAAKG,cAExCH,KAAKK,MAKZR,iBAIA,OAHKG,KAAKG,aAAgBH,KAAKI,eAC3BJ,KAAKG,aAAc,IAAIK,aAAcC,OAAOT,KAAKK,QAE9CL,KAAKG,YAOhBO,oBAAoBC,EAAUb,GAC1B,MAAMH,EAAU,GACViB,EAAQC,GAAQA,EAAIC,QAAQ,aAAc,IAEhD,IAAK,MAAMC,KAAUJ,EAAShB,QAAQqB,UAAW,CACjCD,EAAOE,QAAQ,KAA3B,MACMC,EAAMN,EAAKG,EAAO,IACxB,IAAII,EAAQP,EAAKG,EAAO,IACpBjB,GACqB,YAArBa,EAASjB,SACY,cAArBiB,EAASjB,UACTyB,EAAQ5B,EAAU6B,iBAAiBD,IAEvCxB,EAAQuB,GAAOC,EAEnB,OAAO,IAAI5B,EAAU,CACjBG,QAASiB,EAASjB,QAClBC,QAAAA,EACAE,WAAYc,EAASd,WACrBC,mBAAAA,IAMRuB,WACI,OAAOrB,KAAKsB,yBAShBC,YACI,MAAMC,EAAgBxB,KAAKsB,yBAC3B,OAAItB,KAAKI,aACEb,EAAUkC,aAAaD,EAAexB,KAAKG,aAAauB,OAGxDF,EAAgBxB,KAAKK,MAAQf,EAG5CgC,yBACI,MAAMK,EAAQ,CAAC3B,KAAKN,SAChBM,KAAKD,gCACEC,KAAKL,QAAQ,kBAExB,IAAK,MAAMiC,KAAQ3B,OAAO4B,KAAK7B,KAAKL,SAAW,IAAK,CAChD,MAAMwB,EAAQnB,KAAKL,QAAQiC,GACvB5B,KAAKF,oBACY,YAAjBE,KAAKN,SACY,cAAjBM,KAAKN,QACLiC,EAAMG,KAAK,GAAGF,KAAQrC,EAAUwC,eAAe,GAAGZ,QAGlDQ,EAAMG,KAAK,GAAGF,KAAQT,KAO9B,OAJInB,KAAKI,eACHJ,KAAKgC,gBAAkBhC,KAAKD,0BAC9B4B,EAAMG,KAAK,kBAAkB9B,KAAKiC,gBAE/BN,EAAMO,KAAK5C,GAAWA,EAAUA,EAE3C0C,cACI,OAA6B,IAAtBhC,KAAKiC,aAEhBA,aACI,MAAMpC,EAAaG,KAAKH,WACxB,OAAOA,EAAaA,EAAWsC,OAAS,EAM5CzB,kBAAkB0B,GACd,OAAOA,GAAI,IAAI5B,aAAcC,OAAO2B,GAAGD,OAAS,EAEpDzB,oBAAoBc,EAAe3B,GAC/B,MAAMwC,GAAqB,IAAI7B,aAAcC,OAAOe,GAC9Cc,EAAiB,IAAIC,WAAW,CAAC,IACjCC,EAAa,IAAID,WAAWF,EAAmBF,OAAStC,EAAWsC,OAASG,EAAeH,QAIjG,OAHAK,EAAWC,IAAIJ,GACfG,EAAWC,IAAI5C,EAAYwC,EAAmBF,QAC9CK,EAAWC,IAAIH,EAAgBD,EAAmBF,OAAStC,EAAWsC,QAC/DK,EAOX9B,gBAAgBjB,GAEZ,OADc,IAAIF,EAAUE,GACf8B,YAKjBb,sBAAsBG,GAClB,OAAOA,EACFC,QAAQ,MAAO,QACfA,QAAQ,MAAO,OACfA,QAAQ,MAAO,OACfA,QAAQ,KAAM,OAKvBJ,wBAAwBG,GACpB,OAAOA,EACFC,QAAQ,OAAQ,MAChBA,QAAQ,OAAQ,MAChBA,QAAQ,OAAQ,KAChBA,QAAQ,QAAS,OC5GvB,MAAM4B,EACTlD,YAAYmD,EAASC,GACjB5C,KAAK2C,QAAUA,EACf3C,KAAK4C,eAAiBA,EACtB5C,KAAK6C,SAAW,IAAIrC,YACpBR,KAAK8C,SAAW,IAAIxC,YACpBN,KAAK+C,OAAS,GACd/C,KAAKgD,aAETC,WAAWC,EAASC,GAA8B,GAC9C,IAAIC,EAWJ,GATIA,EADAF,aAAmBG,YACX,IAAId,WAAWW,GAGflD,KAAK6C,SAASpC,OAAOyC,GAM7BC,GAA2D,IAA5BC,EAAMA,EAAMjB,OAAS,GAAU,CAC9D,MAAMmB,EAAgB,IAAIf,WAAWa,EAAMjB,OAAS,GACpDmB,EAAcb,IAAIW,EAAO,GACzBE,EAAcF,EAAMjB,QAAU,EAC9BiB,EAAQE,EAGZ,IAAK,IAAIC,EAAI,EAAGA,EAAIH,EAAMjB,OAAQoB,IAAK,CACnC,MAAMC,EAAOJ,EAAMG,GACnBvD,KAAKyD,QAAQD,IAKrBE,cAAcF,GA1FL,IA2FDA,GAnFD,KAuFCA,IA3FD,KA+FCA,GAKJxD,KAAKyD,QAAUzD,KAAK2D,gBACpB3D,KAAK4D,cAAcJ,IAJfxD,KAAK4C,kBAMbe,gBAAgBH,GACZ,GApGG,KAoGCA,EAIJ,OA5GG,KA4GCA,GACAxD,KAAK6D,SAASnE,QAAUM,KAAK8D,2BAC7B9D,KAAKyD,QAAUzD,KAAK+D,uBAGxB/D,KAAKgE,aAAaR,GAEtBO,gBAAgBP,GA/GT,KAgHCA,IApHD,KAwHCA,GAIJxD,KAAKyD,QAAUzD,KAAKiE,kBACpBjE,KAAK4D,cAAcJ,IAJfxD,KAAKkE,qBAMbN,cAAcJ,GACVxD,KAAKyD,QAAQD,GAEjBS,kBAAkBT,GACd,GA3HM,KA2HFA,EAGA,OAFAxD,KAAKmE,WAAanE,KAAK8D,2BACvB9D,KAAKyD,QAAUzD,KAAKoE,qBAGxBpE,KAAKgE,aAAaR,GAEtBY,oBAAoBZ,GAChB,GAvIG,KAuICA,EAIJ,OA/IG,KA+ICA,GACAxD,KAAK6D,SAASlE,QAAQmC,KAAK,CAAC9B,KAAKmE,WAAYnE,KAAK8D,wBAClD9D,KAAKmE,gBAAaE,OAClBrE,KAAKyD,QAAUzD,KAAK+D,uBAGxB/D,KAAKgE,aAAaR,GAEtBU,oBACI,MAAMI,EAAsBtE,KAAK6D,SAASlE,QAAQ4E,QAAQxD,GACjC,mBAAdA,EAAO,KACf,GACCuD,GACAtE,KAAKwE,oBAAsBC,SAASH,EAAoB,GAAI,IAC5DtE,KAAKyD,QAAUzD,KAAK0E,uBAGpB1E,KAAKyD,QAAUzD,KAAK2E,2BAG5BA,2BAA2BnB,GAvKlB,IAwKDA,EAIJxD,KAAKgE,aAAaR,GAHdxD,KAAK4E,iBAKbF,sBAAsBlB,GAEiB,GAA/BxD,KAAKwE,sBAITxE,KAAKgE,aAAaR,GAHdxD,KAAK4E,iBAKbA,iBACI5E,KAAK6D,SAAShE,WAAaG,KAAK6E,qBAChC7E,KAAK2C,QAAQ3C,KAAK6D,UAClB7D,KAAKgD,aAGTgB,aAAaR,GACTxD,KAAK+C,OAAOjB,KAAK0B,GAErBM,sBACI,OAAO9D,KAAK8C,SAASvC,OAAOP,KAAK6E,sBAErCA,qBACI,MAAMC,EAAY,IAAIvC,WAAWvC,KAAK+C,QAEtC,OADA/C,KAAK+C,OAAS,GACP+B,EAEX9B,aACIhD,KAAK6D,SAAW,CACZnE,aAAS2E,EACT1E,QAAS,GACTE,gBAAYwE,GAEhBrE,KAAK+C,OAAS,GACd/C,KAAKmE,gBAAaE,EAClBrE,KAAKyD,QAAUzD,KAAK0D,eC/MrB,IAAIqB,EAUAC,GATX,SAAWD,GACPA,EAAiBA,EAA6B,WAAI,GAAK,aACvDA,EAAiBA,EAAuB,KAAI,GAAK,OACjDA,EAAiBA,EAA0B,QAAI,GAAK,UACpDA,EAAiBA,EAAyB,OAAI,GAAK,SAJvD,CAKGA,IAAqBA,EAAmB,KAK3C,SAAWC,GACPA,EAAgBA,EAAwB,OAAI,GAAK,SACjDA,EAAgBA,EAA8B,aAAI,GAAK,eACvDA,EAAgBA,EAA0B,SAAI,GAAK,WAHvD,CAIGA,IAAoBA,EAAkB,KCblC,MAAMC,EAOTzF,YAAY0F,GACRlF,KAAKkF,SAAWA,EAKpBC,oBACI,OAAOnF,KAAKkF,SAAShD,KAAK,KAK9BkD,mBACI,OAAOpF,KAAKkF,SAASG,KAAIC,GAAK,IAAIA,EAAExE,QAAQ,IAAK,eAMzDmE,EAASM,KAAO,MAIhBN,EAASO,KAAO,MAIhBP,EAASQ,KAAO,MAIhBR,EAASS,QAAU,IAAIT,EAAS,CAC5BA,EAASM,KACTN,EAASO,KACTP,EAASQ,OCjCN,MAAME,EACTnG,YAAYoG,EAASC,EAAYC,EAAS,IACtC9F,KAAK4F,QAAUA,EACf5F,KAAK6F,WAAaA,EAClB7F,KAAK+F,qBAAuB,CAExBC,UAAWC,IACPjG,KAAKkG,MAAM,uBAAuBD,EAAMtG,QAAQwG,UAChDnG,KAAKoG,YAAa,EAClBpG,KAAKqG,kBAAoBJ,EAAMtG,QAAQ2G,QAEnCtG,KAAKqG,oBAAsBpB,EAASQ,OACpCzF,KAAKuG,qBAAsB,GAE/BvG,KAAKwG,gBAAgBP,EAAMtG,SAC3BK,KAAKyG,UAAUR,IAGnBS,QAAST,IAQL,MAAMU,EAAeV,EAAMtG,QAAQgH,aAC7BC,EAAY5G,KAAK6G,eAAeF,IAAiB3G,KAAK8G,mBAEtDC,EAAUd,EACVe,EAAShH,KACTiH,EAAYjH,KAAKqG,oBAAsBpB,EAASQ,KAChDsB,EAAQpH,QAAQuH,IAChBH,EAAQpH,QAAQ,cAGtBoH,EAAQG,IAAM,CAACvH,EAAU,KACdqH,EAAOE,IAAID,EAAWN,EAAchH,GAE/CoH,EAAQI,KAAO,CAACxH,EAAU,KACfqH,EAAOG,KAAKF,EAAWN,EAAchH,GAEhDiH,EAAUG,IAGdK,QAASnB,IACL,MAAMoB,EAAWrH,KAAKsH,iBAAiBrB,EAAMtG,QAAQ,eACjD0H,GACAA,EAASpB,UAEFjG,KAAKsH,iBAAiBrB,EAAMtG,QAAQ,gBAG3CK,KAAKuH,mBAAmBtB,IAIhCuB,MAAOvB,IACHjG,KAAKyH,aAAaxB,KAI1BjG,KAAK0H,SAAW,EAEhB1H,KAAK6G,eAAiB,GAEtB7G,KAAKsH,iBAAmB,GACxBtH,KAAK2H,aAAe,GACpB3H,KAAKuG,qBAAsB,EAC3BvG,KAAK4H,sBAAwBC,KAAKC,MAClC9H,KAAK+H,UAAUjC,GAEfkC,uBACA,OAAOhI,KAAKqG,kBAEZ4B,gBACA,OAAOjI,KAAKoG,WAEhB2B,UAAUG,GAENjI,OAAOC,OAAOF,KAAMkI,GAExBC,QACI,MAAMC,EAAS,IAAI1F,GAEnB/B,IACI,MAAMsF,EAAQ1G,EAAU8I,aAAa1H,EAAUX,KAAKuG,qBAE/CvG,KAAKsI,qBACNtI,KAAKkG,MAAM,OAAOD,MAEKjG,KAAK+F,qBAAqBE,EAAMvG,UAAYM,KAAKuI,kBACzDtC,MAGvB,KACIjG,KAAKkG,MAAM,eAEflG,KAAK6F,WAAW2C,UAAaC,IAGzB,GAFAzI,KAAKkG,MAAM,iBACXlG,KAAK4H,sBAAwBC,KAAKC,MAC9B9H,KAAKsI,oBAAqB,CAC1B,MAAMI,EAAmBD,EAAIE,gBAAgBtF,aACvC,IAAI/C,aAAcC,OAAOkI,EAAIE,MAC7BF,EAAIE,KACV3I,KAAKkG,MAAM,OAAOwC,KAEtBN,EAAOnF,WAAWwF,EAAIE,KAAM3I,KAAKmD,8BAErCnD,KAAK4I,SAAYC,IACb7I,KAAKkG,MAAM,wBAAwBlG,KAAK4F,QAAQkD,aAChD9I,KAAK+I,WACL/I,KAAKgJ,iBAAiBH,IAE1B7I,KAAK6F,WAAWoD,QAAUjJ,KAAK4I,SAC/B5I,KAAK6F,WAAWqD,QAAWC,IACvBnJ,KAAKoJ,iBAAiBD,IAE1BnJ,KAAK6F,WAAWwD,OAAS,KAErB,MAAMC,EAAiBrJ,OAAOC,OAAO,GAAIF,KAAKsJ,gBAC9CtJ,KAAKkG,MAAM,wBACXoD,EAAe,kBAAoBtJ,KAAKuJ,cAAcpE,oBACtDmE,EAAe,cAAgB,CAC3BtJ,KAAKwJ,kBACLxJ,KAAKyJ,mBACPvH,KAAK,KACPlC,KAAK0J,UAAU,CAAEhK,QAAS,UAAWC,QAAS2J,KAGtD9C,gBAAgB7G,GACZ,GAAIA,EAAQ2G,UAAYrB,EAASO,MAC7B7F,EAAQ2G,UAAYrB,EAASQ,KAC7B,OAIJ,IAAK9F,EAAQ,cACT,OAKJ,MAAOgK,EAAgBC,GAAkBjK,EAAQ,cAC5CkK,MAAM,KACNxE,KAAKyE,GAAMrF,SAASqF,EAAG,MAC5B,GAA+B,IAA3B9J,KAAKwJ,mBAA8C,IAAnBI,EAAsB,CACtD,MAAMG,EAAMC,KAAKC,IAAIjK,KAAKwJ,kBAAmBI,GAC7C5J,KAAKkG,MAAM,mBAAmB6D,OAC9B/J,KAAKkK,QAAUC,aAAY,KACnBnK,KAAK6F,WAAWuE,aAAerF,EAAiBsF,OAChDrK,KAAK6F,WAAWyE,KAAKhL,GACrBU,KAAKkG,MAAM,eAEhB6D,GAEP,GAA+B,IAA3B/J,KAAKyJ,mBAA8C,IAAnBE,EAAsB,CACtD,MAAMI,EAAMC,KAAKC,IAAIjK,KAAKyJ,kBAAmBE,GAC7C3J,KAAKkG,MAAM,oBAAoB6D,OAC/B/J,KAAKuK,QAAUJ,aAAY,KACvB,MAAMK,EAAQ3C,KAAKC,MAAQ9H,KAAK4H,sBAE5B4C,EAAc,EAANT,IACR/J,KAAKkG,MAAM,gDAAgDsE,OAC3DxK,KAAKyK,8BAEVV,IAGXU,2BACQzK,KAAK0K,+BACL1K,KAAKkG,MAAM,sEACXlG,KAAK2K,sBAGL3K,KAAKkG,MAAM,kCACXlG,KAAK4K,mBAGbC,kBACQ7K,KAAK6F,aACD7F,KAAK6F,WAAWuE,aAAerF,EAAiB+F,YAChD9K,KAAK6F,WAAWuE,aAAerF,EAAiBsF,MAChDrK,KAAKyK,4BAIjBG,kBACI5K,KAAK6F,WAAW2C,UAAY,OAC5BxI,KAAK6F,WAAWkF,QAEpBJ,oBCzMG,IAA0BK,EAAW9E,ED0M/BlG,KAAK6F,WAAWoF,YC1MID,ED2MJhL,KAAK6F,WC3MUK,ED2MGgF,GAAQlL,KAAKkG,MAAMgF,GC1M9DF,EAAUC,UAAY,WAClB,MAAME,EAAO,OAEbnL,KAAKkJ,QAAUiC,EACfnL,KAAKwI,UAAY2C,EACjBnL,KAAKqJ,OAAS8B,EACd,MAAMC,EAAK,IAAIvD,KACTwD,EAAcrL,KAAKiJ,QAEzBjJ,KAAKiJ,QAAUJ,IACX,MAAMyC,GAAQ,IAAIzD,MAAO0D,UAAYH,EAAGG,UACxCrF,EAAM,iCAAiCoF,0BAA8BzC,EAAW2C,QAAQ3C,EAAW4C,WAEvGzL,KAAK+K,QACLM,EAAYK,KAAK1L,KAAM,CACnBwL,KAAM,KACNC,OAAQ,2CACRE,UAAU,MD2Ld3L,KAAK6F,WAAWoF,YAEpBvB,UAAUjK,GACN,MAAM,QAAEC,EAAO,QAAEC,EAAO,KAAEC,EAAI,WAAEC,EAAU,wBAAEE,GAA4BN,EAClEwG,EAAQ,IAAI1G,EAAU,CACxBG,QAAAA,EACAC,QAAAA,EACAC,KAAAA,EACAC,WAAAA,EACAC,mBAAoBE,KAAKuG,oBACzBxG,wBAAAA,IAEJ,IAAI6L,EAAW3F,EAAM1E,YAUrB,GATIvB,KAAKsI,oBACLtI,KAAKkG,MAAM,OAAO0F,KAGlB5L,KAAKkG,MAAM,OAAOD,KAElBjG,KAAK6L,qBAA2C,iBAAbD,IACnCA,GAAW,IAAIpL,aAAcC,OAAOmL,IAEhB,iBAAbA,GAA0B5L,KAAK8L,iBAGrC,CACD,IAAIC,EAAMH,EACV,KAAOG,EAAI5J,OAAS,GAAG,CACnB,MAAMiB,EAAQ2I,EAAIC,UAAU,EAAGhM,KAAKiM,uBACpCF,EAAMA,EAAIC,UAAUhM,KAAKiM,uBACzBjM,KAAK6F,WAAWyE,KAAKlH,GACrBpD,KAAKkG,MAAM,gBAAgB9C,EAAMjB,uBAAuB4J,EAAI5J,gBARhEnC,KAAK6F,WAAWyE,KAAKsB,GAY7BM,UACI,GAAIlM,KAAKiI,UACL,IAEI,MAAMkE,EAAoBlM,OAAOC,OAAO,GAAIF,KAAKmM,mBAC5CA,EAAkBC,UACnBD,EAAkBC,QAAU,SAASpM,KAAK0H,YAE9C1H,KAAKqM,gBAAgBF,EAAkBC,SAASnG,IAC5CjG,KAAK4K,kBACL5K,KAAK+I,WACL/I,KAAKsM,aAAarG,MAEtBjG,KAAK0J,UAAU,CAAEhK,QAAS,aAAcC,QAASwM,IAErD,MAAOI,GACHvM,KAAKkG,MAAM,oCAAoCqG,UAI/CvM,KAAK6F,WAAWuE,aAAerF,EAAiB+F,YAChD9K,KAAK6F,WAAWuE,aAAerF,EAAiBsF,MAChDrK,KAAK4K,kBAIjB7B,WACI/I,KAAKoG,YAAa,EACdpG,KAAKkK,SACLsC,cAAcxM,KAAKkK,SAEnBlK,KAAKuK,SACLiC,cAAcxM,KAAKuK,SAG3BkC,QAAQhN,GACJ,MAAM,YAAEiN,EAAW,QAAE/M,EAAO,KAAEC,EAAI,WAAEC,EAAU,wBAAEE,GAA4BN,EACtEkN,EAAO1M,OAAOC,OAAO,CAAEwM,YAAAA,GAAe/M,GAC5CK,KAAK0J,UAAU,CACXhK,QAAS,OACTC,QAASgN,EACT/M,KAAAA,EACAC,WAAAA,EACAE,wBAAAA,IAGRsM,gBAAgBO,EAAWvF,GACvBrH,KAAKsH,iBAAiBsF,GAAavF,EAEvCwF,UAAUH,EAAarF,EAAU1H,EAAU,KACvCA,EAAUM,OAAOC,OAAO,GAAIP,IACfmN,KACTnN,EAAQmN,GAAK,OAAO9M,KAAK0H,YAE7B/H,EAAQ+M,YAAcA,EACtB1M,KAAK6G,eAAelH,EAAQmN,IAAMzF,EAClCrH,KAAK0J,UAAU,CAAEhK,QAAS,YAAaC,QAAAA,IACvC,MAAMqH,EAAShH,KACf,MAAO,CACH8M,GAAInN,EAAQmN,GACZC,YAAYJ,GACD3F,EAAO+F,YAAYpN,EAAQmN,GAAIH,IAIlDI,YAAYD,EAAInN,EAAU,IACtBA,EAAUM,OAAOC,OAAO,GAAIP,UACrBK,KAAK6G,eAAeiG,GAC3BnN,EAAQmN,GAAKA,EACb9M,KAAK0J,UAAU,CAAEhK,QAAS,cAAeC,QAAAA,IAE7CqN,MAAMC,GACF,MAAMC,EAAOD,GAAiB,MAAMjN,KAAK0H,WACzC1H,KAAK0J,UAAU,CACXhK,QAAS,QACTC,QAAS,CACLwN,YAAaD,KAGrB,MAAMlG,EAAShH,KACf,MAAO,CACH8M,GAAII,EACJE,SACIpG,EAAOoG,OAAOF,IAElBG,QACIrG,EAAOqG,MAAMH,KAIzBE,OAAOH,GACHjN,KAAK0J,UAAU,CACXhK,QAAS,SACTC,QAAS,CACLwN,YAAaF,KAIzBI,MAAMJ,GACFjN,KAAK0J,UAAU,CACXhK,QAAS,QACTC,QAAS,CACLwN,YAAaF,KAIzB/F,IAAID,EAAWqG,EAAgB3N,EAAU,IACrCA,EAAUM,OAAOC,OAAO,GAAIP,GACxBK,KAAKqG,oBAAsBpB,EAASQ,KACpC9F,EAAQmN,GAAK7F,EAGbtH,EAAQ,cAAgBsH,EAE5BtH,EAAQgH,aAAe2G,EACvBtN,KAAK0J,UAAU,CAAEhK,QAAS,MAAOC,QAAAA,IAErCwH,KAAKF,EAAWqG,EAAgB3N,EAAU,IAStC,OARAA,EAAUM,OAAOC,OAAO,GAAIP,GACxBK,KAAKqG,oBAAsBpB,EAASQ,KACpC9F,EAAQmN,GAAK7F,EAGbtH,EAAQ,cAAgBsH,EAE5BtH,EAAQgH,aAAe2G,EAChBtN,KAAK0J,UAAU,CAAEhK,QAAS,OAAQC,QAAAA,KEjXjD,IAAI4N,EAAwC,SAAUC,EAASC,EAAYC,EAAGC,GAE1E,OAAO,IAAKD,IAAMA,EAAIE,WAAU,SAAUC,EAASC,GAC/C,SAASC,EAAU5M,GAAS,IAAM6M,EAAKL,EAAUM,KAAK9M,IAAW,MAAO+M,GAAKJ,EAAOI,IACpF,SAASC,EAAShN,GAAS,IAAM6M,EAAKL,EAAiB,MAAExM,IAAW,MAAO+M,GAAKJ,EAAOI,IACvF,SAASF,EAAKI,GAJlB,IAAejN,EAIaiN,EAAOC,KAAOR,EAAQO,EAAOjN,QAJ1CA,EAIyDiN,EAAOjN,MAJhDA,aAAiBuM,EAAIvM,EAAQ,IAAIuM,GAAE,SAAUG,GAAWA,EAAQ1M,OAITmN,KAAKP,EAAWI,GAClGH,GAAML,EAAYA,EAAUY,MAAMf,EAASC,GAAc,KAAKQ,YAW/D,MAAMO,EAIThP,YAAY0I,EAAO,IAUflI,KAAKuJ,cAAgBtE,EAAA,QAKrBjF,KAAKyO,kBAAoB,EAIzBzO,KAAK0O,eAAiB,IAItB1O,KAAKyJ,kBAAoB,IAIzBzJ,KAAKwJ,kBAAoB,IAczBxJ,KAAK8L,kBAAmB,EAKxB9L,KAAKiM,sBAAwB,KAS7BjM,KAAK6L,qBAAsB,EAW3B7L,KAAKmD,6BAA8B,EAOnCnD,KAAK2O,MAAQ3J,EAAgB4J,SAE7B,MAAMzD,EAAO,OACbnL,KAAKkG,MAAQiF,EACbnL,KAAK6O,cAAgB1D,EACrBnL,KAAKyG,UAAY0E,EACjBnL,KAAKsM,aAAenB,EACpBnL,KAAK8G,mBAAqBqE,EAC1BnL,KAAKuH,mBAAqB4D,EAC1BnL,KAAKuI,iBAAmB4C,EACxBnL,KAAKyH,aAAe0D,EACpBnL,KAAKgJ,iBAAmBmC,EACxBnL,KAAKoJ,iBAAmB+B,EACxBnL,KAAKsI,qBAAsB,EAC3BtI,KAAK8O,cAAgB3D,EAErBnL,KAAKsJ,eAAiB,GACtBtJ,KAAK+O,mBAAqB,GAE1B/O,KAAK+H,UAAUG,GAKf8C,gBACA,OAAOhL,KAAKgP,cAAgBhP,KAAKgP,cAAcnJ,gBAAaxB,EAK5D8H,wBACA,OAAOnM,KAAK+O,mBAEZ5C,sBAAkBhL,GAClBnB,KAAK+O,mBAAqB5N,EACtBnB,KAAKgP,gBACLhP,KAAKgP,cAAc7C,kBAAoBnM,KAAK+O,oBAMhD9G,gBACA,QAASjI,KAAKgP,eAAiBhP,KAAKgP,cAAc/G,UAKlDD,uBACA,OAAOhI,KAAKgP,cAAgBhP,KAAKgP,cAAchH,sBAAmB3D,EAKlE4K,aACA,OAAOjP,KAAK2O,QAAU3J,EAAgBkK,OAE1CC,aAAaR,GACT3O,KAAK2O,MAAQA,EACb3O,KAAK8O,cAAcH,GAKvB5G,UAAUG,GAENjI,OAAOC,OAAOF,KAAMkI,GASxBkH,WACI,GAAIpP,KAAK2O,QAAU3J,EAAgBqK,aAE/B,MADArP,KAAKkG,MAAM,oFACL,IAAIoJ,MAAM,4CAEhBtP,KAAKiP,OACLjP,KAAKkG,MAAM,iDAGflG,KAAKmP,aAAanK,EAAgBkK,QAClClP,KAAKuP,YAETA,WACI,OAAOhC,EAAUvN,UAAM,OAAQ,GAAQ,YACnC,GAAIA,KAAKiI,UAEL,YADAjI,KAAKkG,MAAM,2CAIf,SADMlG,KAAK6O,iBACN7O,KAAKiP,OAEN,YADAjP,KAAKkG,MAAM,gEAIXlG,KAAKyO,kBAAoB,IAErBzO,KAAKwP,oBACLC,aAAazP,KAAKwP,oBAEtBxP,KAAKwP,mBAAqBE,YAAW,KAC7B1P,KAAKiI,YAKTjI,KAAKkG,MAAM,iCAAiClG,KAAKyO,uCACjDzO,KAAK6K,qBACN7K,KAAKyO,oBAEZzO,KAAKkG,MAAM,yBAEX,MAAM8E,EAAYhL,KAAK2P,mBACvB3P,KAAKgP,cAAgB,IAAIrJ,EAAa3F,KAAMgL,EAAW,CACnD9E,MAAOlG,KAAKkG,MACZqD,cAAevJ,KAAKuJ,cACpBD,eAAgBtJ,KAAKsJ,eACrB6C,kBAAmBnM,KAAK+O,mBACxBtF,kBAAmBzJ,KAAKyJ,kBACxBD,kBAAmBxJ,KAAKwJ,kBACxBsC,iBAAkB9L,KAAK8L,iBACvBG,sBAAuBjM,KAAKiM,sBAC5BJ,oBAAqB7L,KAAK6L,oBAC1BvD,oBAAqBtI,KAAKsI,oBAC1BnF,4BAA6BnD,KAAKmD,4BAClCuH,8BAA+B1K,KAAK0K,8BACpCjE,UAAWR,IAMP,GAJIjG,KAAKwP,qBACLC,aAAazP,KAAKwP,oBAClBxP,KAAKwP,wBAAqBnL,IAEzBrE,KAAKiP,OAGN,OAFAjP,KAAKkG,MAAM,6EACXlG,KAAK4P,uBAGT5P,KAAKyG,UAAUR,IAEnBqG,aAAcrG,IACVjG,KAAKsM,aAAarG,IAEtBwB,aAAcxB,IACVjG,KAAKyH,aAAaxB,IAEtB+C,iBAAkBP,IACdzI,KAAKgP,mBAAgB3K,EACjBrE,KAAK2O,QAAU3J,EAAgBqK,eAE/BrP,KAAK6P,sBACL7P,KAAK6P,yBAAsBxL,EAC3BrE,KAAKmP,aAAanK,EAAgB4J,WAEtC5O,KAAKgJ,iBAAiBP,GAGlBzI,KAAKiP,QACLjP,KAAK8P,uBAGb1G,iBAAkBX,IACdzI,KAAKoJ,iBAAiBX,IAE1B3B,mBAAoBC,IAChB/G,KAAK8G,mBAAmBC,IAE5BQ,mBAAoBtB,IAChBjG,KAAKuH,mBAAmBtB,IAE5BsC,iBAAkBtC,IACdjG,KAAKuI,iBAAiBtC,MAG9BjG,KAAKgP,cAAc7G,WAG3BwH,mBACI,IAAI3E,EAQJ,OANIA,EADAhL,KAAK+P,iBACO/P,KAAK+P,mBAGL,IAAIC,UAAUhQ,KAAK8I,UAAW9I,KAAKuJ,cAAcnE,oBAEjE4F,EAAUiF,WAAa,cAChBjF,EAEX8E,sBACQ9P,KAAK0O,eAAiB,IACtB1O,KAAKkG,MAAM,qCAAqClG,KAAK0O,oBACrD1O,KAAKkQ,aAAeR,YAAW,KAC3B1P,KAAKuP,aACNvP,KAAK0O,iBAYhByB,aACI,OAAO5C,EAAUvN,UAAM,OAAQ,GAAQ,YACnC,IAAIoQ,EACJ,OAAIpQ,KAAK2O,QAAU3J,EAAgBkK,QAC/BlP,KAAKkG,MAAM,WAAWlB,EAAgBhF,KAAK2O,uCACpCf,QAAQC,YAEnB7N,KAAKmP,aAAanK,EAAgBqK,cAE9BrP,KAAKkQ,cACLT,aAAazP,KAAKkQ,cAElBlQ,KAAKgP,eACLhP,KAAKgL,UAAUZ,aAAerF,EAAiBsL,QAE/CD,EAAa,IAAIxC,SAAQ,CAACC,EAASC,KAC/B9N,KAAK6P,oBAAsBhC,KAQnC7N,KAAK4P,uBACEQ,IAJHpQ,KAAKmP,aAAanK,EAAgB4J,UAC3BhB,QAAQC,eAY3BhD,kBACQ7K,KAAKgP,eACLhP,KAAKgP,cAAcnE,kBAG3B+E,uBAEQ5P,KAAKgP,gBACLhP,KAAKgP,cAAc9C,UACnBlM,KAAKgP,cAAgB,MAuC7BvC,QAAQhN,GACJO,KAAKgP,cAAcvC,QAAQhN,GAqC/B4M,gBAAgBO,EAAWvF,GACvBrH,KAAKgP,cAAc3C,gBAAgBO,EAAWvF,GA0BlDwF,UAAUH,EAAarF,EAAU1H,EAAU,IACvC,OAAOK,KAAKgP,cAAcnC,UAAUH,EAAarF,EAAU1H,GAc/DoN,YAAYD,EAAInN,EAAU,IACtBK,KAAKgP,cAAcjC,YAAYD,EAAInN,GAQvCqN,MAAMC,GACF,OAAOjN,KAAKgP,cAAchC,MAAMC,GAcpCG,OAAOH,GACHjN,KAAKgP,cAAc5B,OAAOH,GAa9BI,MAAMJ,GACFjN,KAAKgP,cAAc3B,MAAMJ,GAe7B/F,IAAID,EAAWqG,EAAgB3N,EAAU,IACrCK,KAAKgP,cAAc9H,IAAID,EAAWqG,EAAgB3N,GAetDwH,KAAKF,EAAWqG,EAAgB3N,EAAU,IACtCK,KAAKgP,cAAc7H,KAAKF,EAAWqG,EAAgB3N,IC7gBpD,MAAM2Q,GCDN,MAAMC,GCJN,MAAMC,GCAN,MAAMC,EACTjR,YAAYwH,GACRhH,KAAKgH,OAASA,EAEd0J,eACA,OAAO1Q,KAAKgH,OAAOwC,kBAEnBkH,aAASvP,GACTnB,KAAKgH,OAAOwC,kBAAoBrI,EAEhCwP,eACA,OAAO3Q,KAAKgH,OAAOyC,kBAEnBkH,aAASxP,GACTnB,KAAKgH,OAAOyC,kBAAoBtI,GCRjC,MAAMyP,UAAqBpC,EAS9BhP,YAAYuQ,GACRc,QAIA7Q,KAAK8Q,sBAAwB,MAC7B9Q,KAAK+Q,eAAiB,IAAIN,EAAczQ,MACxCA,KAAKgR,gBAAkB,EACvBhR,KAAK+P,iBAAmBA,EAExB/P,KAAKkG,MAAQ,IAAIa,KACbkK,QAAQC,OAAOnK,IAGvBoK,iBAAiBC,GACb,IAAIC,EACAC,EACAC,EACA5R,EAAU,GACd,GAAIyR,EAAKjP,OAAS,EACd,MAAM,IAAImN,MAAM,yCAEpB,GAAuB,mBAAZ8B,EAAK,IACXzR,EAAS2R,EAAiBC,EAAeF,GAAsBD,OAGhE,GACS,IADDA,EAAKjP,QAGDxC,EAAQ6R,MACR7R,EAAQ8R,SACRH,EACAC,EACAF,EACA1R,EAAQ+R,MACRN,OAIAzR,EAAQ6R,MACR7R,EAAQ8R,SACRH,EACAC,EACAF,GACAD,EAGhB,MAAO,CAACzR,EAAS2R,EAAiBC,EAAeF,GA6BrDM,WAAWP,GACP,MAAMrF,EAAM/L,KAAKmR,iBAAiBC,GAC9BrF,EAAI,KACJ/L,KAAKsJ,eAAiByC,EAAI,IAE1BA,EAAI,KACJ/L,KAAKyG,UAAYsF,EAAI,IAErBA,EAAI,KACJ/L,KAAKyH,aAAesE,EAAI,IAExBA,EAAI,KACJ/L,KAAKgJ,iBAAmB+C,EAAI,IAEhC8E,MAAMzB,WAaVwC,WAAWC,EAAoBlS,EAAU,IACjCkS,IACA7R,KAAKsM,aAAeuF,GAExB7R,KAAKmM,kBAAoBxM,EACzBkR,MAAMV,aAsBV7F,KAAKoC,EAAa/M,EAAU,GAAIC,EAAO,IAEnC,MAAMG,GAAwD,KAD9DJ,EAAUM,OAAOC,OAAO,GAAIP,IACY,kBACpCI,UACOJ,EAAQ,kBAEnBK,KAAKyM,QAAQ,CACTC,YAAAA,EACA/M,QAASA,EACTC,KAAAA,EACAG,wBAAAA,IAQJiR,oBAAgB7P,GAChBnB,KAAK0O,eAAiBvN,EAOtB2Q,SACA,OAAO9R,KAAKgL,UAOZ1E,cACA,OAAOtG,KAAKgI,iBAOZ+J,gBACA,OAAO/R,KAAK8G,mBAOZiL,cAAU5Q,GACVnB,KAAK8G,mBAAqB3F,EAQ1B6Q,gBACA,OAAOhS,KAAKuH,mBAOZyK,cAAU7Q,GACVnB,KAAKuH,mBAAqBpG,EAQ1B8Q,gBACA,OAAOjS,KAAK+Q,eAQZkB,cAAU9Q,GACVnB,KAAKyJ,kBAAoBtI,EAAMwP,SAC/B3Q,KAAKwJ,kBAAoBrI,EAAMuP,UClOhC,MAAMwB,EAeTxR,cAAcyR,EAAKC,GAaE,MAAbA,IACAA,EAAYnN,EAAA,4BAMhB,OAAO,IAAI2L,GAJE,IAEF,IADOsB,EAAMG,gBAAkBrC,WACrBmC,EAAKC,KAyB9B1R,YAAYoR,GACR,IAAIQ,EASJ,MARkB,mBAAPR,EACPQ,EAAOR,GAGPb,QAAQsB,KAAK,qJAEbD,EAAO,IAAMR,GAEV,IAAIlB,EAAa0B,IAqBhCJ,EAAMG,eAAiB","sources":["webpack://@patternslib/patternslib/./node_modules/@stomp/stompjs/esm6/byte.js","webpack://@patternslib/patternslib/./node_modules/@stomp/stompjs/esm6/frame-impl.js","webpack://@patternslib/patternslib/./node_modules/@stomp/stompjs/esm6/parser.js","webpack://@patternslib/patternslib/./node_modules/@stomp/stompjs/esm6/types.js","webpack://@patternslib/patternslib/./node_modules/@stomp/stompjs/esm6/versions.js","webpack://@patternslib/patternslib/./node_modules/@stomp/stompjs/esm6/stomp-handler.js","webpack://@patternslib/patternslib/./node_modules/@stomp/stompjs/esm6/augment-websocket.js","webpack://@patternslib/patternslib/./node_modules/@stomp/stompjs/esm6/client.js","webpack://@patternslib/patternslib/./node_modules/@stomp/stompjs/esm6/stomp-config.js","webpack://@patternslib/patternslib/./node_modules/@stomp/stompjs/esm6/stomp-headers.js","webpack://@patternslib/patternslib/./node_modules/@stomp/stompjs/esm6/stomp-subscription.js","webpack://@patternslib/patternslib/./node_modules/@stomp/stompjs/esm6/compatibility/heartbeat-info.js","webpack://@patternslib/patternslib/./node_modules/@stomp/stompjs/esm6/compatibility/compat-client.js","webpack://@patternslib/patternslib/./node_modules/@stomp/stompjs/esm6/compatibility/stomp.js"],"sourcesContent":["/**\n * Some byte values, used as per STOMP specifications.\n *\n * Part of `@stomp/stompjs`.\n *\n * @internal\n */\nexport const BYTE = {\n    // LINEFEED byte (octet 10)\n    LF: '\\x0A',\n    // NULL byte (octet 0)\n    NULL: '\\x00',\n};\n//# sourceMappingURL=byte.js.map","import { BYTE } from './byte';\n/**\n * Frame class represents a STOMP frame.\n *\n * @internal\n */\nexport class FrameImpl {\n    /**\n     * Frame constructor. `command`, `headers` and `body` are available as properties.\n     *\n     * @internal\n     */\n    constructor(params) {\n        const { command, headers, body, binaryBody, escapeHeaderValues, skipContentLengthHeader, } = params;\n        this.command = command;\n        this.headers = Object.assign({}, headers || {});\n        if (binaryBody) {\n            this._binaryBody = binaryBody;\n            this.isBinaryBody = true;\n        }\n        else {\n            this._body = body || '';\n            this.isBinaryBody = false;\n        }\n        this.escapeHeaderValues = escapeHeaderValues || false;\n        this.skipContentLengthHeader = skipContentLengthHeader || false;\n    }\n    /**\n     * body of the frame\n     */\n    get body() {\n        if (!this._body && this.isBinaryBody) {\n            this._body = new TextDecoder().decode(this._binaryBody);\n        }\n        return this._body;\n    }\n    /**\n     * body as Uint8Array\n     */\n    get binaryBody() {\n        if (!this._binaryBody && !this.isBinaryBody) {\n            this._binaryBody = new TextEncoder().encode(this._body);\n        }\n        return this._binaryBody;\n    }\n    /**\n     * deserialize a STOMP Frame from raw data.\n     *\n     * @internal\n     */\n    static fromRawFrame(rawFrame, escapeHeaderValues) {\n        const headers = {};\n        const trim = (str) => str.replace(/^\\s+|\\s+$/g, '');\n        // In case of repeated headers, as per standards, first value need to be used\n        for (const header of rawFrame.headers.reverse()) {\n            const idx = header.indexOf(':');\n            const key = trim(header[0]);\n            let value = trim(header[1]);\n            if (escapeHeaderValues &&\n                rawFrame.command !== 'CONNECT' &&\n                rawFrame.command !== 'CONNECTED') {\n                value = FrameImpl.hdrValueUnEscape(value);\n            }\n            headers[key] = value;\n        }\n        return new FrameImpl({\n            command: rawFrame.command,\n            headers,\n            binaryBody: rawFrame.binaryBody,\n            escapeHeaderValues,\n        });\n    }\n    /**\n     * @internal\n     */\n    toString() {\n        return this.serializeCmdAndHeaders();\n    }\n    /**\n     * serialize this Frame in a format suitable to be passed to WebSocket.\n     * If the body is string the output will be string.\n     * If the body is binary (i.e. of type Unit8Array) it will be serialized to ArrayBuffer.\n     *\n     * @internal\n     */\n    serialize() {\n        const cmdAndHeaders = this.serializeCmdAndHeaders();\n        if (this.isBinaryBody) {\n            return FrameImpl.toUnit8Array(cmdAndHeaders, this._binaryBody).buffer;\n        }\n        else {\n            return cmdAndHeaders + this._body + BYTE.NULL;\n        }\n    }\n    serializeCmdAndHeaders() {\n        const lines = [this.command];\n        if (this.skipContentLengthHeader) {\n            delete this.headers['content-length'];\n        }\n        for (const name of Object.keys(this.headers || {})) {\n            const value = this.headers[name];\n            if (this.escapeHeaderValues &&\n                this.command !== 'CONNECT' &&\n                this.command !== 'CONNECTED') {\n                lines.push(`${name}:${FrameImpl.hdrValueEscape(`${value}`)}`);\n            }\n            else {\n                lines.push(`${name}:${value}`);\n            }\n        }\n        if (this.isBinaryBody ||\n            (!this.isBodyEmpty() && !this.skipContentLengthHeader)) {\n            lines.push(`content-length:${this.bodyLength()}`);\n        }\n        return lines.join(BYTE.LF) + BYTE.LF + BYTE.LF;\n    }\n    isBodyEmpty() {\n        return this.bodyLength() === 0;\n    }\n    bodyLength() {\n        const binaryBody = this.binaryBody;\n        return binaryBody ? binaryBody.length : 0;\n    }\n    /**\n     * Compute the size of a UTF-8 string by counting its number of bytes\n     * (and not the number of characters composing the string)\n     */\n    static sizeOfUTF8(s) {\n        return s ? new TextEncoder().encode(s).length : 0;\n    }\n    static toUnit8Array(cmdAndHeaders, binaryBody) {\n        const uint8CmdAndHeaders = new TextEncoder().encode(cmdAndHeaders);\n        const nullTerminator = new Uint8Array([0]);\n        const uint8Frame = new Uint8Array(uint8CmdAndHeaders.length + binaryBody.length + nullTerminator.length);\n        uint8Frame.set(uint8CmdAndHeaders);\n        uint8Frame.set(binaryBody, uint8CmdAndHeaders.length);\n        uint8Frame.set(nullTerminator, uint8CmdAndHeaders.length + binaryBody.length);\n        return uint8Frame;\n    }\n    /**\n     * Serialize a STOMP frame as per STOMP standards, suitable to be sent to the STOMP broker.\n     *\n     * @internal\n     */\n    static marshall(params) {\n        const frame = new FrameImpl(params);\n        return frame.serialize();\n    }\n    /**\n     *  Escape header values\n     */\n    static hdrValueEscape(str) {\n        return str\n            .replace(/\\\\/g, '\\\\\\\\')\n            .replace(/\\r/g, '\\\\r')\n            .replace(/\\n/g, '\\\\n')\n            .replace(/:/g, '\\\\c');\n    }\n    /**\n     * UnEscape header values\n     */\n    static hdrValueUnEscape(str) {\n        return str\n            .replace(/\\\\r/g, '\\r')\n            .replace(/\\\\n/g, '\\n')\n            .replace(/\\\\c/g, ':')\n            .replace(/\\\\\\\\/g, '\\\\');\n    }\n}\n//# sourceMappingURL=frame-impl.js.map","/**\n * @internal\n */\nconst NULL = 0;\n/**\n * @internal\n */\nconst LF = 10;\n/**\n * @internal\n */\nconst CR = 13;\n/**\n * @internal\n */\nconst COLON = 58;\n/**\n * This is an evented, rec descent parser.\n * A stream of Octets can be passed and whenever it recognizes\n * a complete Frame or an incoming ping it will invoke the registered callbacks.\n *\n * All incoming Octets are fed into _onByte function.\n * Depending on current state the _onByte function keeps changing.\n * Depending on the state it keeps accumulating into _token and _results.\n * State is indicated by current value of _onByte, all states are named as _collect.\n *\n * STOMP standards https://stomp.github.io/stomp-specification-1.2.html\n * imply that all lengths are considered in bytes (instead of string lengths).\n * So, before actual parsing, if the incoming data is String it is converted to Octets.\n * This allows faithful implementation of the protocol and allows NULL Octets to be present in the body.\n *\n * There is no peek function on the incoming data.\n * When a state change occurs based on an Octet without consuming the Octet,\n * the Octet, after state change, is fed again (_reinjectByte).\n * This became possible as the state change can be determined by inspecting just one Octet.\n *\n * There are two modes to collect the body, if content-length header is there then it by counting Octets\n * otherwise it is determined by NULL terminator.\n *\n * Following the standards, the command and headers are converted to Strings\n * and the body is returned as Octets.\n * Headers are returned as an array and not as Hash - to allow multiple occurrence of an header.\n *\n * This parser does not use Regular Expressions as that can only operate on Strings.\n *\n * It handles if multiple STOMP frames are given as one chunk, a frame is split into multiple chunks, or\n * any combination there of. The parser remembers its state (any partial frame) and continues when a new chunk\n * is pushed.\n *\n * Typically the higher level function will convert headers to Hash, handle unescaping of header values\n * (which is protocol version specific), and convert body to text.\n *\n * Check the parser.spec.js to understand cases that this parser is supposed to handle.\n *\n * Part of `@stomp/stompjs`.\n *\n * @internal\n */\nexport class Parser {\n    constructor(onFrame, onIncomingPing) {\n        this.onFrame = onFrame;\n        this.onIncomingPing = onIncomingPing;\n        this._encoder = new TextEncoder();\n        this._decoder = new TextDecoder();\n        this._token = [];\n        this._initState();\n    }\n    parseChunk(segment, appendMissingNULLonIncoming = false) {\n        let chunk;\n        if (segment instanceof ArrayBuffer) {\n            chunk = new Uint8Array(segment);\n        }\n        else {\n            chunk = this._encoder.encode(segment);\n        }\n        // See https://github.com/stomp-js/stompjs/issues/89\n        // Remove when underlying issue is fixed.\n        //\n        // Send a NULL byte, if the last byte of a Text frame was not NULL.F\n        if (appendMissingNULLonIncoming && chunk[chunk.length - 1] !== 0) {\n            const chunkWithNull = new Uint8Array(chunk.length + 1);\n            chunkWithNull.set(chunk, 0);\n            chunkWithNull[chunk.length] = 0;\n            chunk = chunkWithNull;\n        }\n        // tslint:disable-next-line:prefer-for-of\n        for (let i = 0; i < chunk.length; i++) {\n            const byte = chunk[i];\n            this._onByte(byte);\n        }\n    }\n    // The following implements a simple Rec Descent Parser.\n    // The grammar is simple and just one byte tells what should be the next state\n    _collectFrame(byte) {\n        if (byte === NULL) {\n            // Ignore\n            return;\n        }\n        if (byte === CR) {\n            // Ignore CR\n            return;\n        }\n        if (byte === LF) {\n            // Incoming Ping\n            this.onIncomingPing();\n            return;\n        }\n        this._onByte = this._collectCommand;\n        this._reinjectByte(byte);\n    }\n    _collectCommand(byte) {\n        if (byte === CR) {\n            // Ignore CR\n            return;\n        }\n        if (byte === LF) {\n            this._results.command = this._consumeTokenAsUTF8();\n            this._onByte = this._collectHeaders;\n            return;\n        }\n        this._consumeByte(byte);\n    }\n    _collectHeaders(byte) {\n        if (byte === CR) {\n            // Ignore CR\n            return;\n        }\n        if (byte === LF) {\n            this._setupCollectBody();\n            return;\n        }\n        this._onByte = this._collectHeaderKey;\n        this._reinjectByte(byte);\n    }\n    _reinjectByte(byte) {\n        this._onByte(byte);\n    }\n    _collectHeaderKey(byte) {\n        if (byte === COLON) {\n            this._headerKey = this._consumeTokenAsUTF8();\n            this._onByte = this._collectHeaderValue;\n            return;\n        }\n        this._consumeByte(byte);\n    }\n    _collectHeaderValue(byte) {\n        if (byte === CR) {\n            // Ignore CR\n            return;\n        }\n        if (byte === LF) {\n            this._results.headers.push([this._headerKey, this._consumeTokenAsUTF8()]);\n            this._headerKey = undefined;\n            this._onByte = this._collectHeaders;\n            return;\n        }\n        this._consumeByte(byte);\n    }\n    _setupCollectBody() {\n        const contentLengthHeader = this._results.headers.filter((header) => {\n            return header[0] === 'content-length';\n        })[0];\n        if (contentLengthHeader) {\n            this._bodyBytesRemaining = parseInt(contentLengthHeader[1], 10);\n            this._onByte = this._collectBodyFixedSize;\n        }\n        else {\n            this._onByte = this._collectBodyNullTerminated;\n        }\n    }\n    _collectBodyNullTerminated(byte) {\n        if (byte === NULL) {\n            this._retrievedBody();\n            return;\n        }\n        this._consumeByte(byte);\n    }\n    _collectBodyFixedSize(byte) {\n        // It is post decrement, so that we discard the trailing NULL octet\n        if (this._bodyBytesRemaining-- === 0) {\n            this._retrievedBody();\n            return;\n        }\n        this._consumeByte(byte);\n    }\n    _retrievedBody() {\n        this._results.binaryBody = this._consumeTokenAsRaw();\n        this.onFrame(this._results);\n        this._initState();\n    }\n    // Rec Descent Parser helpers\n    _consumeByte(byte) {\n        this._token.push(byte);\n    }\n    _consumeTokenAsUTF8() {\n        return this._decoder.decode(this._consumeTokenAsRaw());\n    }\n    _consumeTokenAsRaw() {\n        const rawResult = new Uint8Array(this._token);\n        this._token = [];\n        return rawResult;\n    }\n    _initState() {\n        this._results = {\n            command: undefined,\n            headers: [],\n            binaryBody: undefined,\n        };\n        this._token = [];\n        this._headerKey = undefined;\n        this._onByte = this._collectFrame;\n    }\n}\n//# sourceMappingURL=parser.js.map","/**\n * Possible states for the IStompSocket\n */\nexport var StompSocketState;\n(function (StompSocketState) {\n    StompSocketState[StompSocketState[\"CONNECTING\"] = 0] = \"CONNECTING\";\n    StompSocketState[StompSocketState[\"OPEN\"] = 1] = \"OPEN\";\n    StompSocketState[StompSocketState[\"CLOSING\"] = 2] = \"CLOSING\";\n    StompSocketState[StompSocketState[\"CLOSED\"] = 3] = \"CLOSED\";\n})(StompSocketState || (StompSocketState = {}));\n/**\n * Possible activation state\n */\nexport var ActivationState;\n(function (ActivationState) {\n    ActivationState[ActivationState[\"ACTIVE\"] = 0] = \"ACTIVE\";\n    ActivationState[ActivationState[\"DEACTIVATING\"] = 1] = \"DEACTIVATING\";\n    ActivationState[ActivationState[\"INACTIVE\"] = 2] = \"INACTIVE\";\n})(ActivationState || (ActivationState = {}));\n//# sourceMappingURL=types.js.map","/**\n * Supported STOMP versions\n *\n * Part of `@stomp/stompjs`.\n */\nexport class Versions {\n    /**\n     * Takes an array of string of versions, typical elements '1.0', '1.1', or '1.2'\n     *\n     * You will an instance if this class if you want to override supported versions to be declared during\n     * STOMP handshake.\n     */\n    constructor(versions) {\n        this.versions = versions;\n    }\n    /**\n     * Used as part of CONNECT STOMP Frame\n     */\n    supportedVersions() {\n        return this.versions.join(',');\n    }\n    /**\n     * Used while creating a WebSocket\n     */\n    protocolVersions() {\n        return this.versions.map(x => `v${x.replace('.', '')}.stomp`);\n    }\n}\n/**\n * Indicates protocol version 1.0\n */\nVersions.V1_0 = '1.0';\n/**\n * Indicates protocol version 1.1\n */\nVersions.V1_1 = '1.1';\n/**\n * Indicates protocol version 1.2\n */\nVersions.V1_2 = '1.2';\n/**\n * @internal\n */\nVersions.default = new Versions([\n    Versions.V1_0,\n    Versions.V1_1,\n    Versions.V1_2,\n]);\n//# sourceMappingURL=versions.js.map","import { BYTE } from './byte';\nimport { FrameImpl } from './frame-impl';\nimport { Parser } from './parser';\nimport { StompSocketState, } from './types';\nimport { Versions } from './versions';\nimport { augmentWebsocket } from './augment-websocket';\n/**\n * The STOMP protocol handler\n *\n * Part of `@stomp/stompjs`.\n *\n * @internal\n */\nexport class StompHandler {\n    constructor(_client, _webSocket, config = {}) {\n        this._client = _client;\n        this._webSocket = _webSocket;\n        this._serverFrameHandlers = {\n            // [CONNECTED Frame](http://stomp.github.com/stomp-specification-1.2.html#CONNECTED_Frame)\n            CONNECTED: frame => {\n                this.debug(`connected to server ${frame.headers.server}`);\n                this._connected = true;\n                this._connectedVersion = frame.headers.version;\n                // STOMP version 1.2 needs header values to be escaped\n                if (this._connectedVersion === Versions.V1_2) {\n                    this._escapeHeaderValues = true;\n                }\n                this._setupHeartbeat(frame.headers);\n                this.onConnect(frame);\n            },\n            // [MESSAGE Frame](http://stomp.github.com/stomp-specification-1.2.html#MESSAGE)\n            MESSAGE: frame => {\n                // the callback is registered when the client calls\n                // `subscribe()`.\n                // If there is no registered subscription for the received message,\n                // the default `onUnhandledMessage` callback is used that the client can set.\n                // This is useful for subscriptions that are automatically created\n                // on the browser side (e.g. [RabbitMQ's temporary\n                // queues](http://www.rabbitmq.com/stomp.html)).\n                const subscription = frame.headers.subscription;\n                const onReceive = this._subscriptions[subscription] || this.onUnhandledMessage;\n                // bless the frame to be a Message\n                const message = frame;\n                const client = this;\n                const messageId = this._connectedVersion === Versions.V1_2\n                    ? message.headers.ack\n                    : message.headers['message-id'];\n                // add `ack()` and `nack()` methods directly to the returned frame\n                // so that a simple call to `message.ack()` can acknowledge the message.\n                message.ack = (headers = {}) => {\n                    return client.ack(messageId, subscription, headers);\n                };\n                message.nack = (headers = {}) => {\n                    return client.nack(messageId, subscription, headers);\n                };\n                onReceive(message);\n            },\n            // [RECEIPT Frame](http://stomp.github.com/stomp-specification-1.2.html#RECEIPT)\n            RECEIPT: frame => {\n                const callback = this._receiptWatchers[frame.headers['receipt-id']];\n                if (callback) {\n                    callback(frame);\n                    // Server will acknowledge only once, remove the callback\n                    delete this._receiptWatchers[frame.headers['receipt-id']];\n                }\n                else {\n                    this.onUnhandledReceipt(frame);\n                }\n            },\n            // [ERROR Frame](http://stomp.github.com/stomp-specification-1.2.html#ERROR)\n            ERROR: frame => {\n                this.onStompError(frame);\n            },\n        };\n        // used to index subscribers\n        this._counter = 0;\n        // subscription callbacks indexed by subscriber's ID\n        this._subscriptions = {};\n        // receipt-watchers indexed by receipts-ids\n        this._receiptWatchers = {};\n        this._partialData = '';\n        this._escapeHeaderValues = false;\n        this._lastServerActivityTS = Date.now();\n        this.configure(config);\n    }\n    get connectedVersion() {\n        return this._connectedVersion;\n    }\n    get connected() {\n        return this._connected;\n    }\n    configure(conf) {\n        // bulk assign all properties to this\n        Object.assign(this, conf);\n    }\n    start() {\n        const parser = new Parser(\n        // On Frame\n        rawFrame => {\n            const frame = FrameImpl.fromRawFrame(rawFrame, this._escapeHeaderValues);\n            // if this.logRawCommunication is set, the rawChunk is logged at this._webSocket.onmessage\n            if (!this.logRawCommunication) {\n                this.debug(`<<< ${frame}`);\n            }\n            const serverFrameHandler = this._serverFrameHandlers[frame.command] || this.onUnhandledFrame;\n            serverFrameHandler(frame);\n        }, \n        // On Incoming Ping\n        () => {\n            this.debug('<<< PONG');\n        });\n        this._webSocket.onmessage = (evt) => {\n            this.debug('Received data');\n            this._lastServerActivityTS = Date.now();\n            if (this.logRawCommunication) {\n                const rawChunkAsString = evt.data instanceof ArrayBuffer\n                    ? new TextDecoder().decode(evt.data)\n                    : evt.data;\n                this.debug(`<<< ${rawChunkAsString}`);\n            }\n            parser.parseChunk(evt.data, this.appendMissingNULLonIncoming);\n        };\n        this._onclose = (closeEvent) => {\n            this.debug(`Connection closed to ${this._client.brokerURL}`);\n            this._cleanUp();\n            this.onWebSocketClose(closeEvent);\n        };\n        this._webSocket.onclose = this._onclose;\n        this._webSocket.onerror = (errorEvent) => {\n            this.onWebSocketError(errorEvent);\n        };\n        this._webSocket.onopen = () => {\n            // Clone before updating\n            const connectHeaders = Object.assign({}, this.connectHeaders);\n            this.debug('Web Socket Opened...');\n            connectHeaders['accept-version'] = this.stompVersions.supportedVersions();\n            connectHeaders['heart-beat'] = [\n                this.heartbeatOutgoing,\n                this.heartbeatIncoming,\n            ].join(',');\n            this._transmit({ command: 'CONNECT', headers: connectHeaders });\n        };\n    }\n    _setupHeartbeat(headers) {\n        if (headers.version !== Versions.V1_1 &&\n            headers.version !== Versions.V1_2) {\n            return;\n        }\n        // It is valid for the server to not send this header\n        // https://stomp.github.io/stomp-specification-1.2.html#Heart-beating\n        if (!headers['heart-beat']) {\n            return;\n        }\n        // heart-beat header received from the server looks like:\n        //\n        //     heart-beat: sx, sy\n        const [serverOutgoing, serverIncoming] = headers['heart-beat']\n            .split(',')\n            .map((v) => parseInt(v, 10));\n        if (this.heartbeatOutgoing !== 0 && serverIncoming !== 0) {\n            const ttl = Math.max(this.heartbeatOutgoing, serverIncoming);\n            this.debug(`send PING every ${ttl}ms`);\n            this._pinger = setInterval(() => {\n                if (this._webSocket.readyState === StompSocketState.OPEN) {\n                    this._webSocket.send(BYTE.LF);\n                    this.debug('>>> PING');\n                }\n            }, ttl);\n        }\n        if (this.heartbeatIncoming !== 0 && serverOutgoing !== 0) {\n            const ttl = Math.max(this.heartbeatIncoming, serverOutgoing);\n            this.debug(`check PONG every ${ttl}ms`);\n            this._ponger = setInterval(() => {\n                const delta = Date.now() - this._lastServerActivityTS;\n                // We wait twice the TTL to be flexible on window's setInterval calls\n                if (delta > ttl * 2) {\n                    this.debug(`did not receive server activity for the last ${delta}ms`);\n                    this._closeOrDiscardWebsocket();\n                }\n            }, ttl);\n        }\n    }\n    _closeOrDiscardWebsocket() {\n        if (this.discardWebsocketOnCommFailure) {\n            this.debug('Discarding websocket, the underlying socket may linger for a while');\n            this._discardWebsocket();\n        }\n        else {\n            this.debug('Issuing close on the websocket');\n            this._closeWebsocket();\n        }\n    }\n    forceDisconnect() {\n        if (this._webSocket) {\n            if (this._webSocket.readyState === StompSocketState.CONNECTING ||\n                this._webSocket.readyState === StompSocketState.OPEN) {\n                this._closeOrDiscardWebsocket();\n            }\n        }\n    }\n    _closeWebsocket() {\n        this._webSocket.onmessage = () => { }; // ignore messages\n        this._webSocket.close();\n    }\n    _discardWebsocket() {\n        if (!this._webSocket.terminate) {\n            augmentWebsocket(this._webSocket, (msg) => this.debug(msg));\n        }\n        this._webSocket.terminate();\n    }\n    _transmit(params) {\n        const { command, headers, body, binaryBody, skipContentLengthHeader } = params;\n        const frame = new FrameImpl({\n            command,\n            headers,\n            body,\n            binaryBody,\n            escapeHeaderValues: this._escapeHeaderValues,\n            skipContentLengthHeader,\n        });\n        let rawChunk = frame.serialize();\n        if (this.logRawCommunication) {\n            this.debug(`>>> ${rawChunk}`);\n        }\n        else {\n            this.debug(`>>> ${frame}`);\n        }\n        if (this.forceBinaryWSFrames && typeof rawChunk === 'string') {\n            rawChunk = new TextEncoder().encode(rawChunk);\n        }\n        if (typeof rawChunk !== 'string' || !this.splitLargeFrames) {\n            this._webSocket.send(rawChunk);\n        }\n        else {\n            let out = rawChunk;\n            while (out.length > 0) {\n                const chunk = out.substring(0, this.maxWebSocketChunkSize);\n                out = out.substring(this.maxWebSocketChunkSize);\n                this._webSocket.send(chunk);\n                this.debug(`chunk sent = ${chunk.length}, remaining = ${out.length}`);\n            }\n        }\n    }\n    dispose() {\n        if (this.connected) {\n            try {\n                // clone before updating\n                const disconnectHeaders = Object.assign({}, this.disconnectHeaders);\n                if (!disconnectHeaders.receipt) {\n                    disconnectHeaders.receipt = `close-${this._counter++}`;\n                }\n                this.watchForReceipt(disconnectHeaders.receipt, frame => {\n                    this._closeWebsocket();\n                    this._cleanUp();\n                    this.onDisconnect(frame);\n                });\n                this._transmit({ command: 'DISCONNECT', headers: disconnectHeaders });\n            }\n            catch (error) {\n                this.debug(`Ignoring error during disconnect ${error}`);\n            }\n        }\n        else {\n            if (this._webSocket.readyState === StompSocketState.CONNECTING ||\n                this._webSocket.readyState === StompSocketState.OPEN) {\n                this._closeWebsocket();\n            }\n        }\n    }\n    _cleanUp() {\n        this._connected = false;\n        if (this._pinger) {\n            clearInterval(this._pinger);\n        }\n        if (this._ponger) {\n            clearInterval(this._ponger);\n        }\n    }\n    publish(params) {\n        const { destination, headers, body, binaryBody, skipContentLengthHeader } = params;\n        const hdrs = Object.assign({ destination }, headers);\n        this._transmit({\n            command: 'SEND',\n            headers: hdrs,\n            body,\n            binaryBody,\n            skipContentLengthHeader,\n        });\n    }\n    watchForReceipt(receiptId, callback) {\n        this._receiptWatchers[receiptId] = callback;\n    }\n    subscribe(destination, callback, headers = {}) {\n        headers = Object.assign({}, headers);\n        if (!headers.id) {\n            headers.id = `sub-${this._counter++}`;\n        }\n        headers.destination = destination;\n        this._subscriptions[headers.id] = callback;\n        this._transmit({ command: 'SUBSCRIBE', headers });\n        const client = this;\n        return {\n            id: headers.id,\n            unsubscribe(hdrs) {\n                return client.unsubscribe(headers.id, hdrs);\n            },\n        };\n    }\n    unsubscribe(id, headers = {}) {\n        headers = Object.assign({}, headers);\n        delete this._subscriptions[id];\n        headers.id = id;\n        this._transmit({ command: 'UNSUBSCRIBE', headers });\n    }\n    begin(transactionId) {\n        const txId = transactionId || `tx-${this._counter++}`;\n        this._transmit({\n            command: 'BEGIN',\n            headers: {\n                transaction: txId,\n            },\n        });\n        const client = this;\n        return {\n            id: txId,\n            commit() {\n                client.commit(txId);\n            },\n            abort() {\n                client.abort(txId);\n            },\n        };\n    }\n    commit(transactionId) {\n        this._transmit({\n            command: 'COMMIT',\n            headers: {\n                transaction: transactionId,\n            },\n        });\n    }\n    abort(transactionId) {\n        this._transmit({\n            command: 'ABORT',\n            headers: {\n                transaction: transactionId,\n            },\n        });\n    }\n    ack(messageId, subscriptionId, headers = {}) {\n        headers = Object.assign({}, headers);\n        if (this._connectedVersion === Versions.V1_2) {\n            headers.id = messageId;\n        }\n        else {\n            headers['message-id'] = messageId;\n        }\n        headers.subscription = subscriptionId;\n        this._transmit({ command: 'ACK', headers });\n    }\n    nack(messageId, subscriptionId, headers = {}) {\n        headers = Object.assign({}, headers);\n        if (this._connectedVersion === Versions.V1_2) {\n            headers.id = messageId;\n        }\n        else {\n            headers['message-id'] = messageId;\n        }\n        headers.subscription = subscriptionId;\n        return this._transmit({ command: 'NACK', headers });\n    }\n}\n//# sourceMappingURL=stomp-handler.js.map","/**\n * @internal\n */\nexport function augmentWebsocket(webSocket, debug) {\n    webSocket.terminate = function () {\n        const noOp = () => { };\n        // set all callbacks to no op\n        this.onerror = noOp;\n        this.onmessage = noOp;\n        this.onopen = noOp;\n        const ts = new Date();\n        const origOnClose = this.onclose;\n        // Track delay in actual closure of the socket\n        this.onclose = closeEvent => {\n            const delay = new Date().getTime() - ts.getTime();\n            debug(`Discarded socket closed after ${delay}ms, with code/reason: ${closeEvent.code}/${closeEvent.reason}`);\n        };\n        this.close();\n        origOnClose.call(this, {\n            code: 4001,\n            reason: 'Heartbeat failure, discarding the socket',\n            wasClean: false,\n        });\n    };\n}\n//# sourceMappingURL=augment-websocket.js.map","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { StompHandler } from './stomp-handler';\nimport { ActivationState, StompSocketState, } from './types';\nimport { Versions } from './versions';\n/**\n * STOMP Client Class.\n *\n * Part of `@stomp/stompjs`.\n */\nexport class Client {\n    /**\n     * Create an instance.\n     */\n    constructor(conf = {}) {\n        /**\n         * STOMP versions to attempt during STOMP handshake. By default versions `1.0`, `1.1`, and `1.2` are attempted.\n         *\n         * Example:\n         * ```javascript\n         *        // Try only versions 1.0 and 1.1\n         *        client.stompVersions = new Versions(['1.0', '1.1'])\n         * ```\n         */\n        this.stompVersions = Versions.default;\n        /**\n         * Will retry if Stomp connection is not established in specified milliseconds.\n         * Default 0, which implies wait for ever.\n         */\n        this.connectionTimeout = 0;\n        /**\n         *  automatically reconnect with delay in milliseconds, set to 0 to disable.\n         */\n        this.reconnectDelay = 5000;\n        /**\n         * Incoming heartbeat interval in milliseconds. Set to 0 to disable.\n         */\n        this.heartbeatIncoming = 10000;\n        /**\n         * Outgoing heartbeat interval in milliseconds. Set to 0 to disable.\n         */\n        this.heartbeatOutgoing = 10000;\n        /**\n         * This switches on a non standard behavior while sending WebSocket packets.\n         * It splits larger (text) packets into chunks of [maxWebSocketChunkSize]{@link Client#maxWebSocketChunkSize}.\n         * Only Java Spring brokers seems to use this mode.\n         *\n         * WebSockets, by itself, split large (text) packets,\n         * so it is not needed with a truly compliant STOMP/WebSocket broker.\n         * Actually setting it for such broker will cause large messages to fail.\n         *\n         * `false` by default.\n         *\n         * Binary frames are never split.\n         */\n        this.splitLargeFrames = false;\n        /**\n         * See [splitLargeFrames]{@link Client#splitLargeFrames}.\n         * This has no effect if [splitLargeFrames]{@link Client#splitLargeFrames} is `false`.\n         */\n        this.maxWebSocketChunkSize = 8 * 1024;\n        /**\n         * Usually the\n         * [type of WebSocket frame]{@link https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/send#Parameters}\n         * is automatically decided by type of the payload.\n         * Default is `false`, which should work with all compliant brokers.\n         *\n         * Set this flag to force binary frames.\n         */\n        this.forceBinaryWSFrames = false;\n        /**\n         * A bug in ReactNative chops a string on occurrence of a NULL.\n         * See issue [https://github.com/stomp-js/stompjs/issues/89]{@link https://github.com/stomp-js/stompjs/issues/89}.\n         * This makes incoming WebSocket messages invalid STOMP packets.\n         * Setting this flag attempts to reverse the damage by appending a NULL.\n         * If the broker splits a large message into multiple WebSocket messages,\n         * this flag will cause data loss and abnormal termination of connection.\n         *\n         * This is not an ideal solution, but a stop gap until the underlying issue is fixed at ReactNative library.\n         */\n        this.appendMissingNULLonIncoming = false;\n        /**\n         * Activation state.\n         *\n         * It will usually be ACTIVE or INACTIVE.\n         * When deactivating it may go from ACTIVE to INACTIVE without entering DEACTIVATING.\n         */\n        this.state = ActivationState.INACTIVE;\n        // Dummy callbacks\n        const noOp = () => { };\n        this.debug = noOp;\n        this.beforeConnect = noOp;\n        this.onConnect = noOp;\n        this.onDisconnect = noOp;\n        this.onUnhandledMessage = noOp;\n        this.onUnhandledReceipt = noOp;\n        this.onUnhandledFrame = noOp;\n        this.onStompError = noOp;\n        this.onWebSocketClose = noOp;\n        this.onWebSocketError = noOp;\n        this.logRawCommunication = false;\n        this.onChangeState = noOp;\n        // These parameters would typically get proper values before connect is called\n        this.connectHeaders = {};\n        this._disconnectHeaders = {};\n        // Apply configuration\n        this.configure(conf);\n    }\n    /**\n     * Underlying WebSocket instance, READONLY.\n     */\n    get webSocket() {\n        return this._stompHandler ? this._stompHandler._webSocket : undefined;\n    }\n    /**\n     * Disconnection headers.\n     */\n    get disconnectHeaders() {\n        return this._disconnectHeaders;\n    }\n    set disconnectHeaders(value) {\n        this._disconnectHeaders = value;\n        if (this._stompHandler) {\n            this._stompHandler.disconnectHeaders = this._disconnectHeaders;\n        }\n    }\n    /**\n     * `true` if there is a active connection with STOMP Broker\n     */\n    get connected() {\n        return !!this._stompHandler && this._stompHandler.connected;\n    }\n    /**\n     * version of STOMP protocol negotiated with the server, READONLY\n     */\n    get connectedVersion() {\n        return this._stompHandler ? this._stompHandler.connectedVersion : undefined;\n    }\n    /**\n     * if the client is active (connected or going to reconnect)\n     */\n    get active() {\n        return this.state === ActivationState.ACTIVE;\n    }\n    _changeState(state) {\n        this.state = state;\n        this.onChangeState(state);\n    }\n    /**\n     * Update configuration.\n     */\n    configure(conf) {\n        // bulk assign all properties to this\n        Object.assign(this, conf);\n    }\n    /**\n     * Initiate the connection with the broker.\n     * If the connection breaks, as per [Client#reconnectDelay]{@link Client#reconnectDelay},\n     * it will keep trying to reconnect.\n     *\n     * Call [Client#deactivate]{@link Client#deactivate} to disconnect and stop reconnection attempts.\n     */\n    activate() {\n        if (this.state === ActivationState.DEACTIVATING) {\n            this.debug('Still DEACTIVATING, please await call to deactivate before trying to re-activate');\n            throw new Error('Still DEACTIVATING, can not activate now');\n        }\n        if (this.active) {\n            this.debug('Already ACTIVE, ignoring request to activate');\n            return;\n        }\n        this._changeState(ActivationState.ACTIVE);\n        this._connect();\n    }\n    _connect() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.connected) {\n                this.debug('STOMP: already connected, nothing to do');\n                return;\n            }\n            yield this.beforeConnect();\n            if (!this.active) {\n                this.debug('Client has been marked inactive, will not attempt to connect');\n                return;\n            }\n            // setup connection watcher\n            if (this.connectionTimeout > 0) {\n                // clear first\n                if (this._connectionWatcher) {\n                    clearTimeout(this._connectionWatcher);\n                }\n                this._connectionWatcher = setTimeout(() => {\n                    if (this.connected) {\n                        return;\n                    }\n                    // Connection not established, close the underlying socket\n                    // a reconnection will be attempted\n                    this.debug(`Connection not established in ${this.connectionTimeout}ms, closing socket`);\n                    this.forceDisconnect();\n                }, this.connectionTimeout);\n            }\n            this.debug('Opening Web Socket...');\n            // Get the actual WebSocket (or a similar object)\n            const webSocket = this._createWebSocket();\n            this._stompHandler = new StompHandler(this, webSocket, {\n                debug: this.debug,\n                stompVersions: this.stompVersions,\n                connectHeaders: this.connectHeaders,\n                disconnectHeaders: this._disconnectHeaders,\n                heartbeatIncoming: this.heartbeatIncoming,\n                heartbeatOutgoing: this.heartbeatOutgoing,\n                splitLargeFrames: this.splitLargeFrames,\n                maxWebSocketChunkSize: this.maxWebSocketChunkSize,\n                forceBinaryWSFrames: this.forceBinaryWSFrames,\n                logRawCommunication: this.logRawCommunication,\n                appendMissingNULLonIncoming: this.appendMissingNULLonIncoming,\n                discardWebsocketOnCommFailure: this.discardWebsocketOnCommFailure,\n                onConnect: frame => {\n                    // Successfully connected, stop the connection watcher\n                    if (this._connectionWatcher) {\n                        clearTimeout(this._connectionWatcher);\n                        this._connectionWatcher = undefined;\n                    }\n                    if (!this.active) {\n                        this.debug('STOMP got connected while deactivate was issued, will disconnect now');\n                        this._disposeStompHandler();\n                        return;\n                    }\n                    this.onConnect(frame);\n                },\n                onDisconnect: frame => {\n                    this.onDisconnect(frame);\n                },\n                onStompError: frame => {\n                    this.onStompError(frame);\n                },\n                onWebSocketClose: evt => {\n                    this._stompHandler = undefined; // a new one will be created in case of a reconnect\n                    if (this.state === ActivationState.DEACTIVATING) {\n                        // Mark deactivation complete\n                        this._resolveSocketClose();\n                        this._resolveSocketClose = undefined;\n                        this._changeState(ActivationState.INACTIVE);\n                    }\n                    this.onWebSocketClose(evt);\n                    // The callback is called before attempting to reconnect, this would allow the client\n                    // to be `deactivated` in the callback.\n                    if (this.active) {\n                        this._schedule_reconnect();\n                    }\n                },\n                onWebSocketError: evt => {\n                    this.onWebSocketError(evt);\n                },\n                onUnhandledMessage: message => {\n                    this.onUnhandledMessage(message);\n                },\n                onUnhandledReceipt: frame => {\n                    this.onUnhandledReceipt(frame);\n                },\n                onUnhandledFrame: frame => {\n                    this.onUnhandledFrame(frame);\n                },\n            });\n            this._stompHandler.start();\n        });\n    }\n    _createWebSocket() {\n        let webSocket;\n        if (this.webSocketFactory) {\n            webSocket = this.webSocketFactory();\n        }\n        else {\n            webSocket = new WebSocket(this.brokerURL, this.stompVersions.protocolVersions());\n        }\n        webSocket.binaryType = 'arraybuffer';\n        return webSocket;\n    }\n    _schedule_reconnect() {\n        if (this.reconnectDelay > 0) {\n            this.debug(`STOMP: scheduling reconnection in ${this.reconnectDelay}ms`);\n            this._reconnector = setTimeout(() => {\n                this._connect();\n            }, this.reconnectDelay);\n        }\n    }\n    /**\n     * Disconnect if connected and stop auto reconnect loop.\n     * Appropriate callbacks will be invoked if underlying STOMP connection was connected.\n     *\n     * This call is async, it will resolve immediately if there is no underlying active websocket,\n     * otherwise, it will resolve after underlying websocket is properly disposed.\n     *\n     * To reactivate you can call [Client#activate]{@link Client#activate}.\n     */\n    deactivate() {\n        return __awaiter(this, void 0, void 0, function* () {\n            let retPromise;\n            if (this.state !== ActivationState.ACTIVE) {\n                this.debug(`Already ${ActivationState[this.state]}, ignoring call to deactivate`);\n                return Promise.resolve();\n            }\n            this._changeState(ActivationState.DEACTIVATING);\n            // Clear if a reconnection was scheduled\n            if (this._reconnector) {\n                clearTimeout(this._reconnector);\n            }\n            if (this._stompHandler &&\n                this.webSocket.readyState !== StompSocketState.CLOSED) {\n                // we need to wait for underlying websocket to close\n                retPromise = new Promise((resolve, reject) => {\n                    this._resolveSocketClose = resolve;\n                });\n            }\n            else {\n                // indicate that auto reconnect loop should terminate\n                this._changeState(ActivationState.INACTIVE);\n                return Promise.resolve();\n            }\n            this._disposeStompHandler();\n            return retPromise;\n        });\n    }\n    /**\n     * Force disconnect if there is an active connection by directly closing the underlying WebSocket.\n     * This is different than a normal disconnect where a DISCONNECT sequence is carried out with the broker.\n     * After forcing disconnect, automatic reconnect will be attempted.\n     * To stop further reconnects call [Client#deactivate]{@link Client#deactivate} as well.\n     */\n    forceDisconnect() {\n        if (this._stompHandler) {\n            this._stompHandler.forceDisconnect();\n        }\n    }\n    _disposeStompHandler() {\n        // Dispose STOMP Handler\n        if (this._stompHandler) {\n            this._stompHandler.dispose();\n            this._stompHandler = null;\n        }\n    }\n    /**\n     * Send a message to a named destination. Refer to your STOMP broker documentation for types\n     * and naming of destinations.\n     *\n     * STOMP protocol specifies and suggests some headers and also allows broker specific headers.\n     *\n     * `body` must be String.\n     * You will need to covert the payload to string in case it is not string (e.g. JSON).\n     *\n     * To send a binary message body use binaryBody parameter. It should be a\n     * [Uint8Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array).\n     * Sometimes brokers may not support binary frames out of the box.\n     * Please check your broker documentation.\n     *\n     * `content-length` header is automatically added to the STOMP Frame sent to the broker.\n     * Set `skipContentLengthHeader` to indicate that `content-length` header should not be added.\n     * For binary messages `content-length` header is always added.\n     *\n     * Caution: The broker will, most likely, report an error and disconnect if message body has NULL octet(s)\n     * and `content-length` header is missing.\n     *\n     * ```javascript\n     *        client.publish({destination: \"/queue/test\", headers: {priority: 9}, body: \"Hello, STOMP\"});\n     *\n     *        // Only destination is mandatory parameter\n     *        client.publish({destination: \"/queue/test\", body: \"Hello, STOMP\"});\n     *\n     *        // Skip content-length header in the frame to the broker\n     *        client.publish({\"/queue/test\", body: \"Hello, STOMP\", skipContentLengthHeader: true});\n     *\n     *        var binaryData = generateBinaryData(); // This need to be of type Uint8Array\n     *        // setting content-type header is not mandatory, however a good practice\n     *        client.publish({destination: '/topic/special', binaryBody: binaryData,\n     *                         headers: {'content-type': 'application/octet-stream'}});\n     * ```\n     */\n    publish(params) {\n        this._stompHandler.publish(params);\n    }\n    /**\n     * STOMP brokers may carry out operation asynchronously and allow requesting for acknowledgement.\n     * To request an acknowledgement, a `receipt` header needs to be sent with the actual request.\n     * The value (say receipt-id) for this header needs to be unique for each use. Typically a sequence, a UUID, a\n     * random number or a combination may be used.\n     *\n     * A complaint broker will send a RECEIPT frame when an operation has actually been completed.\n     * The operation needs to be matched based in the value of the receipt-id.\n     *\n     * This method allow watching for a receipt and invoke the callback\n     * when corresponding receipt has been received.\n     *\n     * The actual {@link FrameImpl} will be passed as parameter to the callback.\n     *\n     * Example:\n     * ```javascript\n     *        // Subscribing with acknowledgement\n     *        let receiptId = randomText();\n     *\n     *        client.watchForReceipt(receiptId, function() {\n     *          // Will be called after server acknowledges\n     *        });\n     *\n     *        client.subscribe(TEST.destination, onMessage, {receipt: receiptId});\n     *\n     *\n     *        // Publishing with acknowledgement\n     *        receiptId = randomText();\n     *\n     *        client.watchForReceipt(receiptId, function() {\n     *          // Will be called after server acknowledges\n     *        });\n     *        client.publish({destination: TEST.destination, headers: {receipt: receiptId}, body: msg});\n     * ```\n     */\n    watchForReceipt(receiptId, callback) {\n        this._stompHandler.watchForReceipt(receiptId, callback);\n    }\n    /**\n     * Subscribe to a STOMP Broker location. The callback will be invoked for each received message with\n     * the {@link IMessage} as argument.\n     *\n     * Note: The library will generate an unique ID if there is none provided in the headers.\n     *       To use your own ID, pass it using the headers argument.\n     *\n     * ```javascript\n     *        callback = function(message) {\n     *        // called when the client receives a STOMP message from the server\n     *          if (message.body) {\n     *            alert(\"got message with body \" + message.body)\n     *          } else {\n     *            alert(\"got empty message\");\n     *          }\n     *        });\n     *\n     *        var subscription = client.subscribe(\"/queue/test\", callback);\n     *\n     *        // Explicit subscription id\n     *        var mySubId = 'my-subscription-id-001';\n     *        var subscription = client.subscribe(destination, callback, { id: mySubId });\n     * ```\n     */\n    subscribe(destination, callback, headers = {}) {\n        return this._stompHandler.subscribe(destination, callback, headers);\n    }\n    /**\n     * It is preferable to unsubscribe from a subscription by calling\n     * `unsubscribe()` directly on {@link StompSubscription} returned by `client.subscribe()`:\n     *\n     * ```javascript\n     *        var subscription = client.subscribe(destination, onmessage);\n     *        // ...\n     *        subscription.unsubscribe();\n     * ```\n     *\n     * See: http://stomp.github.com/stomp-specification-1.2.html#UNSUBSCRIBE UNSUBSCRIBE Frame\n     */\n    unsubscribe(id, headers = {}) {\n        this._stompHandler.unsubscribe(id, headers);\n    }\n    /**\n     * Start a transaction, the returned {@link ITransaction} has methods - [commit]{@link ITransaction#commit}\n     * and [abort]{@link ITransaction#abort}.\n     *\n     * `transactionId` is optional, if not passed the library will generate it internally.\n     */\n    begin(transactionId) {\n        return this._stompHandler.begin(transactionId);\n    }\n    /**\n     * Commit a transaction.\n     *\n     * It is preferable to commit a transaction by calling [commit]{@link ITransaction#commit} directly on\n     * {@link ITransaction} returned by [client.begin]{@link Client#begin}.\n     *\n     * ```javascript\n     *        var tx = client.begin(txId);\n     *        //...\n     *        tx.commit();\n     * ```\n     */\n    commit(transactionId) {\n        this._stompHandler.commit(transactionId);\n    }\n    /**\n     * Abort a transaction.\n     * It is preferable to abort a transaction by calling [abort]{@link ITransaction#abort} directly on\n     * {@link ITransaction} returned by [client.begin]{@link Client#begin}.\n     *\n     * ```javascript\n     *        var tx = client.begin(txId);\n     *        //...\n     *        tx.abort();\n     * ```\n     */\n    abort(transactionId) {\n        this._stompHandler.abort(transactionId);\n    }\n    /**\n     * ACK a message. It is preferable to acknowledge a message by calling [ack]{@link IMessage#ack} directly\n     * on the {@link IMessage} handled by a subscription callback:\n     *\n     * ```javascript\n     *        var callback = function (message) {\n     *          // process the message\n     *          // acknowledge it\n     *          message.ack();\n     *        };\n     *        client.subscribe(destination, callback, {'ack': 'client'});\n     * ```\n     */\n    ack(messageId, subscriptionId, headers = {}) {\n        this._stompHandler.ack(messageId, subscriptionId, headers);\n    }\n    /**\n     * NACK a message. It is preferable to acknowledge a message by calling [nack]{@link IMessage#nack} directly\n     * on the {@link IMessage} handled by a subscription callback:\n     *\n     * ```javascript\n     *        var callback = function (message) {\n     *          // process the message\n     *          // an error occurs, nack it\n     *          message.nack();\n     *        };\n     *        client.subscribe(destination, callback, {'ack': 'client'});\n     * ```\n     */\n    nack(messageId, subscriptionId, headers = {}) {\n        this._stompHandler.nack(messageId, subscriptionId, headers);\n    }\n}\n//# sourceMappingURL=client.js.map","/**\n * Configuration options for STOMP Client, each key corresponds to\n * field by the same name in {@link Client}. This can be passed to\n * the constructor of {@link Client} or to [Client#configure]{@link Client#configure}.\n *\n * There used to be a class with the same name in `@stomp/ng2-stompjs`, which has been replaced by\n * {@link RxStompConfig} and {@link InjectableRxStompConfig}.\n *\n * Part of `@stomp/stompjs`.\n */\nexport class StompConfig {\n}\n//# sourceMappingURL=stomp-config.js.map","/**\n * STOMP headers. Many functions calls will accept headers as parameters.\n * The headers sent by Broker will be available as [IFrame#headers]{@link IFrame#headers}.\n *\n * `key` and `value` must be valid strings.\n * In addition, `key` must not contain `CR`, `LF`, or `:`.\n *\n * Part of `@stomp/stompjs`.\n */\nexport class StompHeaders {\n}\n//# sourceMappingURL=stomp-headers.js.map","/**\n * Call [Client#subscribe]{@link Client#subscribe} to create a StompSubscription.\n *\n * Part of `@stomp/stompjs`.\n */\nexport class StompSubscription {\n}\n//# sourceMappingURL=stomp-subscription.js.map","/**\n * Part of `@stomp/stompjs`.\n *\n * @internal\n */\nexport class HeartbeatInfo {\n    constructor(client) {\n        this.client = client;\n    }\n    get outgoing() {\n        return this.client.heartbeatOutgoing;\n    }\n    set outgoing(value) {\n        this.client.heartbeatOutgoing = value;\n    }\n    get incoming() {\n        return this.client.heartbeatIncoming;\n    }\n    set incoming(value) {\n        this.client.heartbeatIncoming = value;\n    }\n}\n//# sourceMappingURL=heartbeat-info.js.map","import { Client } from '../client';\nimport { HeartbeatInfo } from './heartbeat-info';\n/**\n * Available for backward compatibility, please shift to using {@link Client}.\n *\n * **Deprecated**\n *\n * Part of `@stomp/stompjs`.\n *\n * To upgrade, please follow the [Upgrade Guide](../additional-documentation/upgrading.html)\n */\nexport class CompatClient extends Client {\n    /**\n     * Available for backward compatibility, please shift to using {@link Client}\n     * and [Client#webSocketFactory]{@link Client#webSocketFactory}.\n     *\n     * **Deprecated**\n     *\n     * @internal\n     */\n    constructor(webSocketFactory) {\n        super();\n        /**\n         * It is no op now. No longer needed. Large packets work out of the box.\n         */\n        this.maxWebSocketFrameSize = 16 * 1024;\n        this._heartbeatInfo = new HeartbeatInfo(this);\n        this.reconnect_delay = 0;\n        this.webSocketFactory = webSocketFactory;\n        // Default from previous version\n        this.debug = (...message) => {\n            console.log(...message);\n        };\n    }\n    _parseConnect(...args) {\n        let closeEventCallback;\n        let connectCallback;\n        let errorCallback;\n        let headers = {};\n        if (args.length < 2) {\n            throw new Error('Connect requires at least 2 arguments');\n        }\n        if (typeof args[1] === 'function') {\n            [headers, connectCallback, errorCallback, closeEventCallback] = args;\n        }\n        else {\n            switch (args.length) {\n                case 6:\n                    [\n                        headers.login,\n                        headers.passcode,\n                        connectCallback,\n                        errorCallback,\n                        closeEventCallback,\n                        headers.host,\n                    ] = args;\n                    break;\n                default:\n                    [\n                        headers.login,\n                        headers.passcode,\n                        connectCallback,\n                        errorCallback,\n                        closeEventCallback,\n                    ] = args;\n            }\n        }\n        return [headers, connectCallback, errorCallback, closeEventCallback];\n    }\n    /**\n     * Available for backward compatibility, please shift to using [Client#activate]{@link Client#activate}.\n     *\n     * **Deprecated**\n     *\n     * The `connect` method accepts different number of arguments and types. See the Overloads list. Use the\n     * version with headers to pass your broker specific options.\n     *\n     * overloads:\n     * - connect(headers, connectCallback)\n     * - connect(headers, connectCallback, errorCallback)\n     * - connect(login, passcode, connectCallback)\n     * - connect(login, passcode, connectCallback, errorCallback)\n     * - connect(login, passcode, connectCallback, errorCallback, closeEventCallback)\n     * - connect(login, passcode, connectCallback, errorCallback, closeEventCallback, host)\n     *\n     * params:\n     * - headers, see [Client#connectHeaders]{@link Client#connectHeaders}\n     * - connectCallback, see [Client#onConnect]{@link Client#onConnect}\n     * - errorCallback, see [Client#onStompError]{@link Client#onStompError}\n     * - closeEventCallback, see [Client#onWebSocketClose]{@link Client#onWebSocketClose}\n     * - login [String], see [Client#connectHeaders](../classes/Client.html#connectHeaders)\n     * - passcode [String], [Client#connectHeaders](../classes/Client.html#connectHeaders)\n     * - host [String], see [Client#connectHeaders](../classes/Client.html#connectHeaders)\n     *\n     * To upgrade, please follow the [Upgrade Guide](../additional-documentation/upgrading.html)\n     */\n    connect(...args) {\n        const out = this._parseConnect(...args);\n        if (out[0]) {\n            this.connectHeaders = out[0];\n        }\n        if (out[1]) {\n            this.onConnect = out[1];\n        }\n        if (out[2]) {\n            this.onStompError = out[2];\n        }\n        if (out[3]) {\n            this.onWebSocketClose = out[3];\n        }\n        super.activate();\n    }\n    /**\n     * Available for backward compatibility, please shift to using [Client#deactivate]{@link Client#deactivate}.\n     *\n     * **Deprecated**\n     *\n     * See:\n     * [Client#onDisconnect]{@link Client#onDisconnect}, and\n     * [Client#disconnectHeaders]{@link Client#disconnectHeaders}\n     *\n     * To upgrade, please follow the [Upgrade Guide](../additional-documentation/upgrading.html)\n     */\n    disconnect(disconnectCallback, headers = {}) {\n        if (disconnectCallback) {\n            this.onDisconnect = disconnectCallback;\n        }\n        this.disconnectHeaders = headers;\n        super.deactivate();\n    }\n    /**\n     * Available for backward compatibility, use [Client#publish]{@link Client#publish}.\n     *\n     * Send a message to a named destination. Refer to your STOMP broker documentation for types\n     * and naming of destinations. The headers will, typically, be available to the subscriber.\n     * However, there may be special purpose headers corresponding to your STOMP broker.\n     *\n     *  **Deprecated**, use [Client#publish]{@link Client#publish}\n     *\n     * Note: Body must be String. You will need to covert the payload to string in case it is not string (e.g. JSON)\n     *\n     * ```javascript\n     *        client.send(\"/queue/test\", {priority: 9}, \"Hello, STOMP\");\n     *\n     *        // If you want to send a message with a body, you must also pass the headers argument.\n     *        client.send(\"/queue/test\", {}, \"Hello, STOMP\");\n     * ```\n     *\n     * To upgrade, please follow the [Upgrade Guide](../additional-documentation/upgrading.html)\n     */\n    send(destination, headers = {}, body = '') {\n        headers = Object.assign({}, headers);\n        const skipContentLengthHeader = headers['content-length'] === false;\n        if (skipContentLengthHeader) {\n            delete headers['content-length'];\n        }\n        this.publish({\n            destination,\n            headers: headers,\n            body,\n            skipContentLengthHeader,\n        });\n    }\n    /**\n     * Available for backward compatibility, renamed to [Client#reconnectDelay]{@link Client#reconnectDelay}.\n     *\n     * **Deprecated**\n     */\n    set reconnect_delay(value) {\n        this.reconnectDelay = value;\n    }\n    /**\n     * Available for backward compatibility, renamed to [Client#webSocket]{@link Client#webSocket}.\n     *\n     * **Deprecated**\n     */\n    get ws() {\n        return this.webSocket;\n    }\n    /**\n     * Available for backward compatibility, renamed to [Client#connectedVersion]{@link Client#connectedVersion}.\n     *\n     * **Deprecated**\n     */\n    get version() {\n        return this.connectedVersion;\n    }\n    /**\n     * Available for backward compatibility, renamed to [Client#onUnhandledMessage]{@link Client#onUnhandledMessage}.\n     *\n     * **Deprecated**\n     */\n    get onreceive() {\n        return this.onUnhandledMessage;\n    }\n    /**\n     * Available for backward compatibility, renamed to [Client#onUnhandledMessage]{@link Client#onUnhandledMessage}.\n     *\n     * **Deprecated**\n     */\n    set onreceive(value) {\n        this.onUnhandledMessage = value;\n    }\n    /**\n     * Available for backward compatibility, renamed to [Client#onUnhandledReceipt]{@link Client#onUnhandledReceipt}.\n     * Prefer using [Client#watchForReceipt]{@link Client#watchForReceipt}.\n     *\n     * **Deprecated**\n     */\n    get onreceipt() {\n        return this.onUnhandledReceipt;\n    }\n    /**\n     * Available for backward compatibility, renamed to [Client#onUnhandledReceipt]{@link Client#onUnhandledReceipt}.\n     *\n     * **Deprecated**\n     */\n    set onreceipt(value) {\n        this.onUnhandledReceipt = value;\n    }\n    /**\n     * Available for backward compatibility, renamed to [Client#heartbeatIncoming]{@link Client#heartbeatIncoming}\n     * [Client#heartbeatOutgoing]{@link Client#heartbeatOutgoing}.\n     *\n     * **Deprecated**\n     */\n    get heartbeat() {\n        return this._heartbeatInfo;\n    }\n    /**\n     * Available for backward compatibility, renamed to [Client#heartbeatIncoming]{@link Client#heartbeatIncoming}\n     * [Client#heartbeatOutgoing]{@link Client#heartbeatOutgoing}.\n     *\n     * **Deprecated**\n     */\n    set heartbeat(value) {\n        this.heartbeatIncoming = value.incoming;\n        this.heartbeatOutgoing = value.outgoing;\n    }\n}\n//# sourceMappingURL=compat-client.js.map","import { Versions } from '../versions';\nimport { CompatClient } from './compat-client';\n/**\n * STOMP Class, acts like a factory to create {@link Client}.\n *\n * Part of `@stomp/stompjs`.\n *\n * **Deprecated**\n *\n * It will be removed in next major version. Please switch to {@link Client}.\n */\nexport class Stomp {\n    /**\n     * This method creates a WebSocket client that is connected to\n     * the STOMP server located at the url.\n     *\n     * ```javascript\n     *        var url = \"ws://localhost:61614/stomp\";\n     *        var client = Stomp.client(url);\n     * ```\n     *\n     * **Deprecated**\n     *\n     * It will be removed in next major version. Please switch to {@link Client}\n     * using [Client#brokerURL]{@link Client#brokerURL}.\n     */\n    static client(url, protocols) {\n        // This is a hack to allow another implementation than the standard\n        // HTML5 WebSocket class.\n        //\n        // It is possible to use another class by calling\n        //\n        //     Stomp.WebSocketClass = MozWebSocket\n        //\n        // *prior* to call `Stomp.client()`.\n        //\n        // This hack is deprecated and `Stomp.over()` method should be used\n        // instead.\n        // See remarks on the function Stomp.over\n        if (protocols == null) {\n            protocols = Versions.default.protocolVersions();\n        }\n        const wsFn = () => {\n            const klass = Stomp.WebSocketClass || WebSocket;\n            return new klass(url, protocols);\n        };\n        return new CompatClient(wsFn);\n    }\n    /**\n     * This method is an alternative to [Stomp#client]{@link Stomp#client} to let the user\n     * specify the WebSocket to use (either a standard HTML5 WebSocket or\n     * a similar object).\n     *\n     * In order to support reconnection, the function Client._connect should be callable more than once.\n     * While reconnecting\n     * a new instance of underlying transport (TCP Socket, WebSocket or SockJS) will be needed. So, this function\n     * alternatively allows passing a function that should return a new instance of the underlying socket.\n     *\n     * ```javascript\n     *        var client = Stomp.over(function(){\n     *          return new WebSocket('ws://localhost:15674/ws')\n     *        });\n     * ```\n     *\n     * **Deprecated**\n     *\n     * It will be removed in next major version. Please switch to {@link Client}\n     * using [Client#webSocketFactory]{@link Client#webSocketFactory}.\n     */\n    static over(ws) {\n        let wsFn;\n        if (typeof ws === 'function') {\n            wsFn = ws;\n        }\n        else {\n            console.warn('Stomp.over did not receive a factory, auto reconnect will not work. ' +\n                'Please see https://stomp-js.github.io/api-docs/latest/classes/Stomp.html#over');\n            wsFn = () => ws;\n        }\n        return new CompatClient(wsFn);\n    }\n}\n/**\n * In case you need to use a non standard class for WebSocket.\n *\n * For example when using within NodeJS environment:\n *\n * ```javascript\n *        StompJs = require('../../esm5/');\n *        Stomp = StompJs.Stomp;\n *        Stomp.WebSocketClass = require('websocket').w3cwebsocket;\n * ```\n *\n * **Deprecated**\n *\n *\n * It will be removed in next major version. Please switch to {@link Client}\n * using [Client#webSocketFactory]{@link Client#webSocketFactory}.\n */\n// tslint:disable-next-line:variable-name\nStomp.WebSocketClass = null;\n//# sourceMappingURL=stomp.js.map"],"names":["BYTE","FrameImpl","constructor","params","command","headers","body","binaryBody","escapeHeaderValues","skipContentLengthHeader","this","Object","assign","_binaryBody","isBinaryBody","_body","TextDecoder","decode","TextEncoder","encode","static","rawFrame","trim","str","replace","header","reverse","indexOf","key","value","hdrValueUnEscape","toString","serializeCmdAndHeaders","serialize","cmdAndHeaders","toUnit8Array","buffer","lines","name","keys","push","hdrValueEscape","isBodyEmpty","bodyLength","join","length","s","uint8CmdAndHeaders","nullTerminator","Uint8Array","uint8Frame","set","Parser","onFrame","onIncomingPing","_encoder","_decoder","_token","_initState","parseChunk","segment","appendMissingNULLonIncoming","chunk","ArrayBuffer","chunkWithNull","i","byte","_onByte","_collectFrame","_collectCommand","_reinjectByte","_results","_consumeTokenAsUTF8","_collectHeaders","_consumeByte","_collectHeaderKey","_setupCollectBody","_headerKey","_collectHeaderValue","undefined","contentLengthHeader","filter","_bodyBytesRemaining","parseInt","_collectBodyFixedSize","_collectBodyNullTerminated","_retrievedBody","_consumeTokenAsRaw","rawResult","StompSocketState","ActivationState","Versions","versions","supportedVersions","protocolVersions","map","x","V1_0","V1_1","V1_2","default","StompHandler","_client","_webSocket","config","_serverFrameHandlers","CONNECTED","frame","debug","server","_connected","_connectedVersion","version","_escapeHeaderValues","_setupHeartbeat","onConnect","MESSAGE","subscription","onReceive","_subscriptions","onUnhandledMessage","message","client","messageId","ack","nack","RECEIPT","callback","_receiptWatchers","onUnhandledReceipt","ERROR","onStompError","_counter","_partialData","_lastServerActivityTS","Date","now","configure","connectedVersion","connected","conf","start","parser","fromRawFrame","logRawCommunication","onUnhandledFrame","onmessage","evt","rawChunkAsString","data","_onclose","closeEvent","brokerURL","_cleanUp","onWebSocketClose","onclose","onerror","errorEvent","onWebSocketError","onopen","connectHeaders","stompVersions","heartbeatOutgoing","heartbeatIncoming","_transmit","serverOutgoing","serverIncoming","split","v","ttl","Math","max","_pinger","setInterval","readyState","OPEN","send","_ponger","delta","_closeOrDiscardWebsocket","discardWebsocketOnCommFailure","_discardWebsocket","_closeWebsocket","forceDisconnect","CONNECTING","close","webSocket","terminate","msg","noOp","ts","origOnClose","delay","getTime","code","reason","call","wasClean","rawChunk","forceBinaryWSFrames","splitLargeFrames","out","substring","maxWebSocketChunkSize","dispose","disconnectHeaders","receipt","watchForReceipt","onDisconnect","error","clearInterval","publish","destination","hdrs","receiptId","subscribe","id","unsubscribe","begin","transactionId","txId","transaction","commit","abort","subscriptionId","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","step","next","e","rejected","result","done","then","apply","Client","connectionTimeout","reconnectDelay","state","INACTIVE","beforeConnect","onChangeState","_disconnectHeaders","_stompHandler","active","ACTIVE","_changeState","activate","DEACTIVATING","Error","_connect","_connectionWatcher","clearTimeout","setTimeout","_createWebSocket","_disposeStompHandler","_resolveSocketClose","_schedule_reconnect","webSocketFactory","WebSocket","binaryType","_reconnector","deactivate","retPromise","CLOSED","StompConfig","StompHeaders","StompSubscription","HeartbeatInfo","outgoing","incoming","CompatClient","super","maxWebSocketFrameSize","_heartbeatInfo","reconnect_delay","console","log","_parseConnect","args","closeEventCallback","connectCallback","errorCallback","login","passcode","host","connect","disconnect","disconnectCallback","ws","onreceive","onreceipt","heartbeat","Stomp","url","protocols","WebSocketClass","wsFn","warn"],"sourceRoot":""}