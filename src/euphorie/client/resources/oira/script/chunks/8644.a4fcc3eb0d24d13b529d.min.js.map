{"version":3,"file":"chunks/8644.a4fcc3eb0d24d13b529d.min.js","mappings":"+PAKA,IAAIA,EAAU,KACVC,EAAY,KAETC,eAAeC,EAClBC,EACAC,EACAC,EAAiB,KACjBC,EAAmB,KACnBC,EAAc,MAEd,MAAMC,EAAYR,EAQlB,IAPkBA,EAAYI,EAAOK,MAAMC,IAAIC,OAAOP,EAAOK,MAAMG,UAAUC,SAE5DL,GAEbM,EAAmBR,EAAiBS,OAGpCV,GAAmBA,IAAvB,CAOA,IAAKN,EAAS,CAONO,IACA,aAAkBA,EAAiBS,MAAQT,GAI/C,MAAMU,EAAiBZ,EAAOa,QAAQC,QACtCnB,QAAgB,IAAI,IAAWiB,EAAgB,CAC3C,OAAU,OACV,IAAOb,EACP,QAAW,OACX,MAASI,EACT,gBAAiB,CAAC,cAEhB,YAAc,IAYxB,OAVAR,EAAQoB,OAAOC,SAAS,CACpBC,uBAAwB,KACb,IAAAC,cACHlB,EAAOmB,KACPnB,EAAOK,MAAMG,UAAUC,KACvBT,EAAOK,MAAMG,UAAUY,MAInCzB,EAAQ0B,OACD1B,GAGJ,SAASe,EAAmBY,GAC3B3B,IACAA,EAAQ4B,OACR5B,EAAQ6B,UACR7B,EAAU,MAEV2B,UACO,aAAkBA","sources":["webpack://oira.prototype/./node_modules/@patternslib/pat-tiptap/src/context_menu.js"],"sourcesContent":["import Registry from \"@patternslib/patternslib/src/core/registry\";\nimport utils from \"@patternslib/patternslib/src/core/utils\";\nimport patTooltip from \"@patternslib/patternslib/src/pat/tooltip/tooltip\";\nimport { posToDOMRect } from \"@tiptap/core\";\n\nlet TOOLTIP = null;\nlet PREV_NODE = null;\n\nexport async function context_menu(\n    url,\n    editor,\n    should_show_cb = null,\n    register_pattern = null,\n    extra_class = null\n) {\n    const prev_node = PREV_NODE;\n    const cur_node = (PREV_NODE = editor.state.doc.nodeAt(editor.state.selection.from));\n\n    if (cur_node !== prev_node) {\n        // Close context menu, when new node is selected.\n        context_menu_close(register_pattern.name);\n    }\n\n    if (should_show_cb && !should_show_cb()) {\n        // Context menu should not be opened at all.\n        // If it should have been closed, it was done above.\n        // If not (e.g. a different kind of context menu than this one) it stays opened.\n        return;\n    }\n\n    if (!TOOLTIP) {\n        // Only re-initialize when not already opened.\n\n        // 1) Dynamically register a pattern to be used in the context menu\n        //    We need to unregister it after use in ``context_menu_close``\n        //    to allow multiple tiptap editors on the same page because it\n        //    references the current editor instance.\n        if (register_pattern) {\n            Registry.patterns[register_pattern.name] = register_pattern;\n        }\n\n        // 2) Initialize the tooltip\n        const editor_element = editor.options.element;\n        TOOLTIP = await new patTooltip(editor_element, {\n            \"source\": \"ajax\",\n            \"url\": url,\n            \"trigger\": \"none\",\n            \"class\": extra_class,\n            \"position-list\": [\"tm\"],\n        });\n        await utils.timeout(50); // wait some time until tippy is here.\n    }\n    TOOLTIP.tippy?.setProps({\n        getReferenceClientRect: () => {\n            return posToDOMRect(\n                editor.view,\n                editor.state.selection.from,\n                editor.state.selection.to\n            );\n        },\n    });\n    TOOLTIP.show();\n    return TOOLTIP;\n}\n\nexport function context_menu_close(unregister_pattern_name) {\n    if (TOOLTIP) {\n        TOOLTIP.hide();\n        TOOLTIP.destroy();\n        TOOLTIP = null;\n    }\n    if (unregister_pattern_name) {\n        delete Registry.patterns[unregister_pattern_name];\n    }\n}\n"],"names":["TOOLTIP","PREV_NODE","async","context_menu","url","editor","should_show_cb","register_pattern","extra_class","prev_node","state","doc","nodeAt","selection","from","context_menu_close","name","editor_element","options","element","tippy","setProps","getReferenceClientRect","posToDOMRect","view","to","show","unregister_pattern_name","hide","destroy"],"sourceRoot":""}