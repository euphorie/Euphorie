{"version":3,"file":"chunks/56790.ccc4764640af1a9dbf0f.min.js","mappings":"oSAKA,MAAMA,EAAa,+CAIbC,EAAa,+CAKbC,EAAS,EAAAC,KAAKC,OAAO,CACvBC,KAAM,SACN,UAAAC,GACI,MAAO,CACHC,eAAgB,CAAC,EAEzB,EACA,SAAAC,GACI,MAAO,CACH,CACIC,IAAK,KAET,CACIA,IAAK,OAET,CACIA,IAAK,UAET,CACIC,MAAO,kBACPC,WAAW,EACXC,SAAUF,KAAUA,EAAMG,SAAS,iBAAkB,CAAC,GAGlE,EACA,UAAAC,EAAW,eAAEP,IACT,MAAO,CAAC,KAAK,IAAAQ,iBAAgBC,KAAKC,QAAQV,eAAgBA,GAAiB,EAC/E,EACA,WAAAW,GACI,MAAO,CACHC,UAAW,IAAM,EAAGC,cACTA,EAASC,QAAQL,KAAKX,MAEjCiB,aAAc,IAAM,EAAGF,cACZA,EAASG,WAAWP,KAAKX,MAEpCmB,YAAa,IAAM,EAAGJ,cACXA,EAASK,UAAUT,KAAKX,MAG3C,EACA,oBAAAqB,GACI,MAAO,CACH,cAAe,IAAMV,KAAKW,OAAOP,SAASE,eAElD,EACA,aAAAM,GACI,MAAO,EACH,IAAAC,eAAc,CACVC,KAAM9B,EACN+B,KAAMf,KAAKe,OAGvB,EACA,aAAAC,GACI,MAAO,EACH,IAAAC,eAAc,CACVH,KAAM7B,EACN8B,KAAMf,KAAKe,OAGvB,G","sources":["webpack://@patternslib/patternslib/./node_modules/@tiptap/extension-strike/dist/index.js"],"sourcesContent":["import { Mark, mergeAttributes, markInputRule, markPasteRule } from '@tiptap/core';\n\n/**\n * Matches a strike to a ~~strike~~ on input.\n */\nconst inputRegex = /(?:^|\\s)(~~(?!\\s+~~)((?:[^~]+))~~(?!\\s+~~))$/;\n/**\n * Matches a strike to a ~~strike~~ on paste.\n */\nconst pasteRegex = /(?:^|\\s)(~~(?!\\s+~~)((?:[^~]+))~~(?!\\s+~~))/g;\n/**\n * This extension allows you to create strike text.\n * @see https://www.tiptap.dev/api/marks/strike\n */\nconst Strike = Mark.create({\n    name: 'strike',\n    addOptions() {\n        return {\n            HTMLAttributes: {},\n        };\n    },\n    parseHTML() {\n        return [\n            {\n                tag: 's',\n            },\n            {\n                tag: 'del',\n            },\n            {\n                tag: 'strike',\n            },\n            {\n                style: 'text-decoration',\n                consuming: false,\n                getAttrs: style => (style.includes('line-through') ? {} : false),\n            },\n        ];\n    },\n    renderHTML({ HTMLAttributes }) {\n        return ['s', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];\n    },\n    addCommands() {\n        return {\n            setStrike: () => ({ commands }) => {\n                return commands.setMark(this.name);\n            },\n            toggleStrike: () => ({ commands }) => {\n                return commands.toggleMark(this.name);\n            },\n            unsetStrike: () => ({ commands }) => {\n                return commands.unsetMark(this.name);\n            },\n        };\n    },\n    addKeyboardShortcuts() {\n        return {\n            'Mod-Shift-s': () => this.editor.commands.toggleStrike(),\n        };\n    },\n    addInputRules() {\n        return [\n            markInputRule({\n                find: inputRegex,\n                type: this.type,\n            }),\n        ];\n    },\n    addPasteRules() {\n        return [\n            markPasteRule({\n                find: pasteRegex,\n                type: this.type,\n            }),\n        ];\n    },\n});\n\nexport { Strike, Strike as default, inputRegex, pasteRegex };\n//# sourceMappingURL=index.js.map\n"],"names":["inputRegex","pasteRegex","Strike","Mark","create","name","addOptions","HTMLAttributes","parseHTML","tag","style","consuming","getAttrs","includes","renderHTML","mergeAttributes","this","options","addCommands","setStrike","commands","setMark","toggleStrike","toggleMark","unsetStrike","unsetMark","addKeyboardShortcuts","editor","addInputRules","markInputRule","find","type","addPasteRules","markPasteRule"],"sourceRoot":""}