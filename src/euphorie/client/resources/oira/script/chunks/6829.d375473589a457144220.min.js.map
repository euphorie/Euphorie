{"version":3,"file":"chunks/6829.d375473589a457144220.min.js","mappings":"iOAGA,MAAMA,EAAiB,EAAAC,KAAA,OAAY,CAC/BC,KAAM,iBACNC,WAAU,KACC,CACHC,eAAgB,KAGxBC,MAAO,QACPC,UAAS,IACE,CACH,CAAEC,IAAK,OAGfC,YAAW,eAAEJ,IACT,MAAO,CAAC,MAAM,IAAAK,iBAAgBC,KAAKC,QAAQP,eAAgBA,KAE/DQ,cACI,MAAO,CACHC,kBAAmB,IAAM,EAAGC,MAAAA,KACjBA,IACFC,cAAc,CAAEC,KAAMN,KAAKR,OAE3Be,SAAQ,EAAGC,GAAAA,EAAIC,SAAAA,MAChB,IAAIC,EACJ,GAAID,EAAU,CACV,MAAM,IAAEE,GAAQH,EAAGI,UACbC,EAAWF,EAAIG,MACrB,GAAIH,EAAII,UACJP,EAAGQ,aAAa,YAAqBR,EAAGS,IAAKN,EAAIO,UAEhD,CAED,MAAMC,EAA2D,QAAnDT,EAAKC,EAAIS,OAAOd,KAAKe,aAAaC,mBAAgC,IAAPZ,OAAgB,EAASA,EAAGa,SACjGJ,IACAX,EAAGgB,OAAOX,EAAUM,GACpBX,EAAGQ,aAAa,YAAqBR,EAAGS,IAAKJ,KAGrDL,EAAGiB,iBAEP,OAAO,KAENC,QAIjBC,gBACI,MAAO,EACH,IAAAC,eAAc,CACVC,KAAM,8BACNvB,KAAMN,KAAKM","sources":["webpack://oira.prototype/./node_modules/@tiptap/extension-horizontal-rule/dist/tiptap-extension-horizontal-rule.esm.js"],"sourcesContent":["import { Node, mergeAttributes, nodeInputRule } from '@tiptap/core';\nimport { TextSelection } from 'prosemirror-state';\n\nconst HorizontalRule = Node.create({\r\n    name: 'horizontalRule',\r\n    addOptions() {\r\n        return {\r\n            HTMLAttributes: {},\r\n        };\r\n    },\r\n    group: 'block',\r\n    parseHTML() {\r\n        return [\r\n            { tag: 'hr' },\r\n        ];\r\n    },\r\n    renderHTML({ HTMLAttributes }) {\r\n        return ['hr', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes)];\r\n    },\r\n    addCommands() {\r\n        return {\r\n            setHorizontalRule: () => ({ chain }) => {\r\n                return chain()\r\n                    .insertContent({ type: this.name })\r\n                    // set cursor after horizontal rule\r\n                    .command(({ tr, dispatch }) => {\r\n                    var _a;\r\n                    if (dispatch) {\r\n                        const { $to } = tr.selection;\r\n                        const posAfter = $to.end();\r\n                        if ($to.nodeAfter) {\r\n                            tr.setSelection(TextSelection.create(tr.doc, $to.pos));\r\n                        }\r\n                        else {\r\n                            // add node after horizontal rule if it’s the end of the document\r\n                            const node = (_a = $to.parent.type.contentMatch.defaultType) === null || _a === void 0 ? void 0 : _a.create();\r\n                            if (node) {\r\n                                tr.insert(posAfter, node);\r\n                                tr.setSelection(TextSelection.create(tr.doc, posAfter));\r\n                            }\r\n                        }\r\n                        tr.scrollIntoView();\r\n                    }\r\n                    return true;\r\n                })\r\n                    .run();\r\n            },\r\n        };\r\n    },\r\n    addInputRules() {\r\n        return [\r\n            nodeInputRule({\r\n                find: /^(?:---|—-|___\\s|\\*\\*\\*\\s)$/,\r\n                type: this.type,\r\n            }),\r\n        ];\r\n    },\r\n});\n\nexport { HorizontalRule, HorizontalRule as default };\n//# sourceMappingURL=tiptap-extension-horizontal-rule.esm.js.map\n"],"names":["HorizontalRule","Node","name","addOptions","HTMLAttributes","group","parseHTML","tag","renderHTML","mergeAttributes","this","options","addCommands","setHorizontalRule","chain","insertContent","type","command","tr","dispatch","_a","$to","selection","posAfter","end","nodeAfter","setSelection","doc","pos","node","parent","contentMatch","defaultType","create","insert","scrollIntoView","run","addInputRules","nodeInputRule","find"],"sourceRoot":""}