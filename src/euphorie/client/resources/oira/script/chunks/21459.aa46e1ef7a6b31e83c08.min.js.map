{"version":3,"file":"chunks/21459.aa46e1ef7a6b31e83c08.min.js","mappings":"wQAMA,MAAMA,EAAW,EAAAC,KAAKC,OAAO,CACzBC,KAAM,WACN,UAAAC,GACI,MAAO,CACHC,eAAgB,CAAC,EACjBC,mBAAoB,aACpBC,oBAAqB,cAE7B,EACAC,QAAS,mBACTC,UAAU,EACV,SAAAC,GACI,MAAO,CACH,CACIC,IAAK,MAGjB,EACA,UAAAC,EAAW,eAAEP,IACT,MAAO,CAAC,MAAM,IAAAQ,iBAAgBC,KAAKC,QAAQV,eAAgBA,GAAiB,EAChF,EACA,oBAAAW,GACI,MAAO,CACHC,MAAO,IAAMH,KAAKI,OAAOC,SAASC,cAAcN,KAAKX,MACrDkB,IAAK,IAAMP,KAAKI,OAAOC,SAASG,aAAaR,KAAKX,MAClD,YAAa,IAAMW,KAAKI,OAAOC,SAASI,aAAaT,KAAKX,MAElE,IAQEqB,EAAY,EAAAC,KAAKvB,OAAO,CAC1BC,KAAM,YACNuB,SAAU,IACV,UAAAtB,GACI,MAAO,CACHC,eAAgB,CAAC,EAEzB,EACA,SAAAK,GACI,MAAO,CACH,CACIC,IAAK,OACLgB,SAAUC,KACYA,EAAQC,aAAa,UAIhC,CAAC,GAIxB,EACA,UAAAjB,EAAW,eAAEP,IACT,MAAO,CAAC,QAAQ,IAAAQ,iBAAgBC,KAAKC,QAAQV,eAAgBA,GAAiB,EAClF,EACA,WAAAyB,GACI,MAAO,CACHC,qBAAsB,IAAM,EAAGC,QAAOb,eAClC,MAAMc,GAAa,IAAAC,mBAAkBF,EAAOlB,KAAKqB,MAEjD,QADkBC,OAAOC,QAAQJ,GAAYK,MAAK,EAAE,CAAEC,OAAaA,KAI5DpB,EAASqB,UAAU1B,KAAKX,KAAK,EAGhD,IAMEsC,EAAa,iBAObC,EAAa,EAAAzC,KAAKC,OAAO,CAC3BC,KAAM,aACN,UAAAC,GACI,MAAO,CACHuC,aAAc,WACdtC,eAAgB,CAAC,EACjBuC,WAAW,EACXC,gBAAgB,EAExB,EACAC,MAAO,aACP,OAAAtC,GACI,MAAO,GAAGM,KAAKC,QAAQ4B,eAC3B,EACA,SAAAjC,GACI,MAAO,CACH,CAAEC,IAAK,MAEf,EACA,UAAAC,EAAW,eAAEP,IACT,MAAO,CAAC,MAAM,IAAAQ,iBAAgBC,KAAKC,QAAQV,eAAgBA,GAAiB,EAChF,EACA,WAAAyB,GACI,MAAO,CACHiB,iBAAkB,IAAM,EAAG5B,WAAU6B,WAC7BlC,KAAKC,QAAQ8B,eACNG,IAAQC,WAAWnC,KAAKX,KAAMW,KAAKC,QAAQ4B,aAAc7B,KAAKC,QAAQ6B,WAAWM,iBAAiBlD,EAASG,KAAMW,KAAKI,OAAOiC,cAAc3B,EAAUrB,OAAOiD,MAEhKjC,EAAS8B,WAAWnC,KAAKX,KAAMW,KAAKC,QAAQ4B,aAAc7B,KAAKC,QAAQ6B,WAG1F,EACA,oBAAA5B,GACI,MAAO,CACH,cAAe,IAAMF,KAAKI,OAAOC,SAAS4B,mBAElD,EACA,aAAAM,GACI,IAAIC,GAAY,IAAAC,mBAAkB,CAC9BC,KAAMf,EACNN,KAAMrB,KAAKqB,OAYf,OAVIrB,KAAKC,QAAQ6B,WAAa9B,KAAKC,QAAQ8B,kBACvCS,GAAY,IAAAC,mBAAkB,CAC1BC,KAAMf,EACNN,KAAMrB,KAAKqB,KACXS,UAAW9B,KAAKC,QAAQ6B,UACxBC,eAAgB/B,KAAKC,QAAQ8B,eAC7BM,cAAe,IAAerC,KAAKI,OAAOiC,cAAc3B,EAAUrB,MAClEe,OAAQJ,KAAKI,UAGd,CACHoC,EAER,G","sources":["webpack://@patternslib/patternslib/./node_modules/@tiptap/extension-bullet-list/dist/index.js"],"sourcesContent":["import { Node, mergeAttributes, Mark, getMarkAttributes, wrappingInputRule } from '@tiptap/core';\n\n/**\n * This extension allows you to create list items.\n * @see https://www.tiptap.dev/api/nodes/list-item\n */\nconst ListItem = Node.create({\n    name: 'listItem',\n    addOptions() {\n        return {\n            HTMLAttributes: {},\n            bulletListTypeName: 'bulletList',\n            orderedListTypeName: 'orderedList',\n        };\n    },\n    content: 'paragraph block*',\n    defining: true,\n    parseHTML() {\n        return [\n            {\n                tag: 'li',\n            },\n        ];\n    },\n    renderHTML({ HTMLAttributes }) {\n        return ['li', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];\n    },\n    addKeyboardShortcuts() {\n        return {\n            Enter: () => this.editor.commands.splitListItem(this.name),\n            Tab: () => this.editor.commands.sinkListItem(this.name),\n            'Shift-Tab': () => this.editor.commands.liftListItem(this.name),\n        };\n    },\n});\n\n/**\n * This extension allows you to create text styles. It is required by default\n * for the `textColor` and `backgroundColor` extensions.\n * @see https://www.tiptap.dev/api/marks/text-style\n */\nconst TextStyle = Mark.create({\n    name: 'textStyle',\n    priority: 101,\n    addOptions() {\n        return {\n            HTMLAttributes: {},\n        };\n    },\n    parseHTML() {\n        return [\n            {\n                tag: 'span',\n                getAttrs: element => {\n                    const hasStyles = element.hasAttribute('style');\n                    if (!hasStyles) {\n                        return false;\n                    }\n                    return {};\n                },\n            },\n        ];\n    },\n    renderHTML({ HTMLAttributes }) {\n        return ['span', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];\n    },\n    addCommands() {\n        return {\n            removeEmptyTextStyle: () => ({ state, commands }) => {\n                const attributes = getMarkAttributes(state, this.type);\n                const hasStyles = Object.entries(attributes).some(([, value]) => !!value);\n                if (hasStyles) {\n                    return true;\n                }\n                return commands.unsetMark(this.name);\n            },\n        };\n    },\n});\n\n/**\n * Matches a bullet list to a dash or asterisk.\n */\nconst inputRegex = /^\\s*([-+*])\\s$/;\n/**\n * This extension allows you to create bullet lists.\n * This requires the ListItem extension\n * @see https://tiptap.dev/api/nodes/bullet-list\n * @see https://tiptap.dev/api/nodes/list-item.\n */\nconst BulletList = Node.create({\n    name: 'bulletList',\n    addOptions() {\n        return {\n            itemTypeName: 'listItem',\n            HTMLAttributes: {},\n            keepMarks: false,\n            keepAttributes: false,\n        };\n    },\n    group: 'block list',\n    content() {\n        return `${this.options.itemTypeName}+`;\n    },\n    parseHTML() {\n        return [\n            { tag: 'ul' },\n        ];\n    },\n    renderHTML({ HTMLAttributes }) {\n        return ['ul', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];\n    },\n    addCommands() {\n        return {\n            toggleBulletList: () => ({ commands, chain }) => {\n                if (this.options.keepAttributes) {\n                    return chain().toggleList(this.name, this.options.itemTypeName, this.options.keepMarks).updateAttributes(ListItem.name, this.editor.getAttributes(TextStyle.name)).run();\n                }\n                return commands.toggleList(this.name, this.options.itemTypeName, this.options.keepMarks);\n            },\n        };\n    },\n    addKeyboardShortcuts() {\n        return {\n            'Mod-Shift-8': () => this.editor.commands.toggleBulletList(),\n        };\n    },\n    addInputRules() {\n        let inputRule = wrappingInputRule({\n            find: inputRegex,\n            type: this.type,\n        });\n        if (this.options.keepMarks || this.options.keepAttributes) {\n            inputRule = wrappingInputRule({\n                find: inputRegex,\n                type: this.type,\n                keepMarks: this.options.keepMarks,\n                keepAttributes: this.options.keepAttributes,\n                getAttributes: () => { return this.editor.getAttributes(TextStyle.name); },\n                editor: this.editor,\n            });\n        }\n        return [\n            inputRule,\n        ];\n    },\n});\n\nexport { BulletList, BulletList as default, inputRegex };\n//# sourceMappingURL=index.js.map\n"],"names":["ListItem","Node","create","name","addOptions","HTMLAttributes","bulletListTypeName","orderedListTypeName","content","defining","parseHTML","tag","renderHTML","mergeAttributes","this","options","addKeyboardShortcuts","Enter","editor","commands","splitListItem","Tab","sinkListItem","liftListItem","TextStyle","Mark","priority","getAttrs","element","hasAttribute","addCommands","removeEmptyTextStyle","state","attributes","getMarkAttributes","type","Object","entries","some","value","unsetMark","inputRegex","BulletList","itemTypeName","keepMarks","keepAttributes","group","toggleBulletList","chain","toggleList","updateAttributes","getAttributes","run","addInputRules","inputRule","wrappingInputRule","find"],"sourceRoot":""}