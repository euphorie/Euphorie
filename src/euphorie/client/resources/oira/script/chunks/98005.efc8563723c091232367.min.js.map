{"version":3,"file":"chunks/98005.efc8563723c091232367.min.js","mappings":"8PASA,MAAMA,EAAc,EAAAC,UAAUC,OAAO,CACjCC,KAAM,cACN,UAAAC,GACI,MAAO,CACHC,iBAAkB,kBAClBC,eAAgB,WAChBC,YAAa,oBACbC,sBAAsB,EACtBC,iBAAiB,EACjBC,iBAAiB,EAEzB,EACA,qBAAAC,GACI,MAAO,CACH,IAAI,KAAO,CACPC,IAAK,IAAI,KAAU,eACnBC,MAAO,CACHC,YAAa,EAAGC,MAAKC,gBACjB,MAAMC,EAASC,KAAKC,OAAOC,aAAeF,KAAKG,QAAQb,sBACjD,OAAEc,GAAWN,EACbF,EAAc,GACpB,IAAKG,EACD,OAAO,KAEX,MAAMM,EAAaL,KAAKC,OAAOK,QAwB/B,OAvBAT,EAAIU,aAAY,CAACC,EAAMC,KACnB,MAAMC,EAAYN,GAAUK,GAAOL,GAAUK,EAAMD,EAAKG,SAClDL,GAAWE,EAAKI,SAAU,IAAAC,aAAYL,GAC5C,IAAKE,IAAcV,KAAKG,QAAQZ,kBAAoBe,EAAS,CACzD,MAAMQ,EAAU,CAACd,KAAKG,QAAQf,gBAC1BiB,GACAS,EAAQC,KAAKf,KAAKG,QAAQhB,kBAE9B,MAAM6B,EAAa,KAAWR,KAAKC,EAAKA,EAAMD,EAAKG,SAAU,CACzDM,MAAOH,EAAQI,KAAK,KACpB,mBAAwD,mBAA7BlB,KAAKG,QAAQd,YAClCW,KAAKG,QAAQd,YAAY,CACvBY,OAAQD,KAAKC,OACbO,OACAC,MACAC,cAEFV,KAAKG,QAAQd,cAEvBO,EAAYmB,KAAKC,EACrB,CACA,OAAOhB,KAAKG,QAAQX,eAAe,IAEhC,KAAcR,OAAOa,EAAKD,EAAY,KAKjE,G","sources":["webpack://@patternslib/patternslib/./node_modules/@tiptap/extension-placeholder/dist/index.js"],"sourcesContent":["import { Extension, isNodeEmpty } from '@tiptap/core';\nimport { Plugin, PluginKey } from '@tiptap/pm/state';\nimport { Decoration, DecorationSet } from '@tiptap/pm/view';\n\n/**\n * This extension allows you to add a placeholder to your editor.\n * A placeholder is a text that appears when the editor or a node is empty.\n * @see https://www.tiptap.dev/api/extensions/placeholder\n */\nconst Placeholder = Extension.create({\n    name: 'placeholder',\n    addOptions() {\n        return {\n            emptyEditorClass: 'is-editor-empty',\n            emptyNodeClass: 'is-empty',\n            placeholder: 'Write something â€¦',\n            showOnlyWhenEditable: true,\n            showOnlyCurrent: true,\n            includeChildren: false,\n        };\n    },\n    addProseMirrorPlugins() {\n        return [\n            new Plugin({\n                key: new PluginKey('placeholder'),\n                props: {\n                    decorations: ({ doc, selection }) => {\n                        const active = this.editor.isEditable || !this.options.showOnlyWhenEditable;\n                        const { anchor } = selection;\n                        const decorations = [];\n                        if (!active) {\n                            return null;\n                        }\n                        const isEmptyDoc = this.editor.isEmpty;\n                        doc.descendants((node, pos) => {\n                            const hasAnchor = anchor >= pos && anchor <= pos + node.nodeSize;\n                            const isEmpty = !node.isLeaf && isNodeEmpty(node);\n                            if ((hasAnchor || !this.options.showOnlyCurrent) && isEmpty) {\n                                const classes = [this.options.emptyNodeClass];\n                                if (isEmptyDoc) {\n                                    classes.push(this.options.emptyEditorClass);\n                                }\n                                const decoration = Decoration.node(pos, pos + node.nodeSize, {\n                                    class: classes.join(' '),\n                                    'data-placeholder': typeof this.options.placeholder === 'function'\n                                        ? this.options.placeholder({\n                                            editor: this.editor,\n                                            node,\n                                            pos,\n                                            hasAnchor,\n                                        })\n                                        : this.options.placeholder,\n                                });\n                                decorations.push(decoration);\n                            }\n                            return this.options.includeChildren;\n                        });\n                        return DecorationSet.create(doc, decorations);\n                    },\n                },\n            }),\n        ];\n    },\n});\n\nexport { Placeholder, Placeholder as default };\n//# sourceMappingURL=index.js.map\n"],"names":["Placeholder","Extension","create","name","addOptions","emptyEditorClass","emptyNodeClass","placeholder","showOnlyWhenEditable","showOnlyCurrent","includeChildren","addProseMirrorPlugins","key","props","decorations","doc","selection","active","this","editor","isEditable","options","anchor","isEmptyDoc","isEmpty","descendants","node","pos","hasAnchor","nodeSize","isLeaf","isNodeEmpty","classes","push","decoration","class","join"],"sourceRoot":""}