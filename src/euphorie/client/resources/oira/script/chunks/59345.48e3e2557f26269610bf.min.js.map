{"version":3,"file":"chunks/59345.48e3e2557f26269610bf.min.js","mappings":"uPAOA,MAAMA,EAAiB,EAAAC,KAAKC,OAAO,CAC/BC,KAAM,iBACN,UAAAC,GACI,MAAO,CACHC,eAAgB,CAAC,EAEzB,EACAC,MAAO,QACP,SAAAC,GACI,MAAO,CAAC,CAAEC,IAAK,MACnB,EACA,UAAAC,EAAW,eAAEJ,IACT,MAAO,CAAC,MAAM,IAAAK,iBAAgBC,KAAKC,QAAQP,eAAgBA,GAC/D,EACA,WAAAQ,GACI,MAAO,CACHC,kBAAmB,IAAM,EAAGC,QAAOC,YAC/B,MAAM,UAAEC,GAAcD,GACdE,MAAOC,EAAaC,IAAKC,GAAcJ,EACzCK,EAAeP,IAiBrB,OAhBiC,IAA7BI,EAAYI,aACZD,EAAaE,gBAAgB,CACzBC,KAAMC,KAAKC,IAAIR,EAAYS,IAAM,EAAG,GACpCC,GAAIR,EAAUO,KACf,CACCE,KAAMnB,KAAKR,QAGV,IAAA4B,iBAAgBd,GACrBK,EAAaE,gBAAgBH,EAAUO,IAAK,CACxCE,KAAMnB,KAAKR,OAIfmB,EAAaU,cAAc,CAAEF,KAAMnB,KAAKR,OAEpCmB,EAEHW,SAAQ,EAAGC,KAAIC,eAChB,IAAIC,EACJ,GAAID,EAAU,CACV,MAAM,IAAEf,GAAQc,EAAGjB,UACboB,EAAWjB,EAAIkB,MACrB,GAAIlB,EAAImB,UACAnB,EAAImB,UAAUC,YACdN,EAAGO,aAAa,KAAcvC,OAAOgC,EAAGQ,IAAKtB,EAAIQ,IAAM,IAElDR,EAAImB,UAAUI,QACnBT,EAAGO,aAAa,KAAcvC,OAAOgC,EAAGQ,IAAKtB,EAAIQ,MAGjDM,EAAGO,aAAa,KAAcvC,OAAOgC,EAAGQ,IAAKtB,EAAIQ,UAGpD,CAED,MAAMgB,EAA2D,QAAnDR,EAAKhB,EAAIyB,OAAOf,KAAKgB,aAAaC,mBAAgC,IAAPX,OAAgB,EAASA,EAAGlC,SACjG0C,IACAV,EAAGc,OAAOX,EAAUO,GACpBV,EAAGO,aAAa,KAAcvC,OAAOgC,EAAGQ,IAAKL,EAAW,IAEhE,CACAH,EAAGe,gBACP,CACA,OAAO,CAAI,IAEVC,KAAM,EAGvB,EACA,aAAAC,GACI,MAAO,EACH,IAAAC,eAAc,CACVC,KAAM,8BACNvB,KAAMnB,KAAKmB,OAGvB,G","sources":["webpack://@patternslib/patternslib/./node_modules/@tiptap/extension-horizontal-rule/dist/index.js"],"sourcesContent":["import { Node, mergeAttributes, isNodeSelection, nodeInputRule } from '@tiptap/core';\nimport { TextSelection, NodeSelection } from '@tiptap/pm/state';\n\n/**\n * This extension allows you to insert horizontal rules.\n * @see https://www.tiptap.dev/api/nodes/horizontal-rule\n */\nconst HorizontalRule = Node.create({\n    name: 'horizontalRule',\n    addOptions() {\n        return {\n            HTMLAttributes: {},\n        };\n    },\n    group: 'block',\n    parseHTML() {\n        return [{ tag: 'hr' }];\n    },\n    renderHTML({ HTMLAttributes }) {\n        return ['hr', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes)];\n    },\n    addCommands() {\n        return {\n            setHorizontalRule: () => ({ chain, state }) => {\n                const { selection } = state;\n                const { $from: $originFrom, $to: $originTo } = selection;\n                const currentChain = chain();\n                if ($originFrom.parentOffset === 0) {\n                    currentChain.insertContentAt({\n                        from: Math.max($originFrom.pos - 1, 0),\n                        to: $originTo.pos,\n                    }, {\n                        type: this.name,\n                    });\n                }\n                else if (isNodeSelection(selection)) {\n                    currentChain.insertContentAt($originTo.pos, {\n                        type: this.name,\n                    });\n                }\n                else {\n                    currentChain.insertContent({ type: this.name });\n                }\n                return (currentChain\n                    // set cursor after horizontal rule\n                    .command(({ tr, dispatch }) => {\n                    var _a;\n                    if (dispatch) {\n                        const { $to } = tr.selection;\n                        const posAfter = $to.end();\n                        if ($to.nodeAfter) {\n                            if ($to.nodeAfter.isTextblock) {\n                                tr.setSelection(TextSelection.create(tr.doc, $to.pos + 1));\n                            }\n                            else if ($to.nodeAfter.isBlock) {\n                                tr.setSelection(NodeSelection.create(tr.doc, $to.pos));\n                            }\n                            else {\n                                tr.setSelection(TextSelection.create(tr.doc, $to.pos));\n                            }\n                        }\n                        else {\n                            // add node after horizontal rule if it’s the end of the document\n                            const node = (_a = $to.parent.type.contentMatch.defaultType) === null || _a === void 0 ? void 0 : _a.create();\n                            if (node) {\n                                tr.insert(posAfter, node);\n                                tr.setSelection(TextSelection.create(tr.doc, posAfter + 1));\n                            }\n                        }\n                        tr.scrollIntoView();\n                    }\n                    return true;\n                })\n                    .run());\n            },\n        };\n    },\n    addInputRules() {\n        return [\n            nodeInputRule({\n                find: /^(?:---|—-|___\\s|\\*\\*\\*\\s)$/,\n                type: this.type,\n            }),\n        ];\n    },\n});\n\nexport { HorizontalRule, HorizontalRule as default };\n//# sourceMappingURL=index.js.map\n"],"names":["HorizontalRule","Node","create","name","addOptions","HTMLAttributes","group","parseHTML","tag","renderHTML","mergeAttributes","this","options","addCommands","setHorizontalRule","chain","state","selection","$from","$originFrom","$to","$originTo","currentChain","parentOffset","insertContentAt","from","Math","max","pos","to","type","isNodeSelection","insertContent","command","tr","dispatch","_a","posAfter","end","nodeAfter","isTextblock","setSelection","doc","isBlock","node","parent","contentMatch","defaultType","insert","scrollIntoView","run","addInputRules","nodeInputRule","find"],"sourceRoot":""}