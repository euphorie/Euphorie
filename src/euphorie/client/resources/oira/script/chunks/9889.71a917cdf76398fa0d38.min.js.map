{"version":3,"file":"chunks/9889.71a917cdf76398fa0d38.min.js","mappings":"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","sources":["webpack://oira.prototype/./node_modules/@tiptap/extension-code-block/dist/tiptap-extension-code-block.esm.js"],"sourcesContent":["import { Node, mergeAttributes, textblockTypeInputRule } from '@tiptap/core';\nimport { Plugin, PluginKey, TextSelection } from 'prosemirror-state';\n\nconst backtickInputRegex = /^```([a-z]+)?[\\s\\n]$/;\r\nconst tildeInputRegex = /^~~~([a-z]+)?[\\s\\n]$/;\r\nconst CodeBlock = Node.create({\r\n    name: 'codeBlock',\r\n    addOptions() {\r\n        return {\r\n            languageClassPrefix: 'language-',\r\n            exitOnTripleEnter: true,\r\n            exitOnArrowDown: true,\r\n            HTMLAttributes: {},\r\n        };\r\n    },\r\n    content: 'text*',\r\n    marks: '',\r\n    group: 'block',\r\n    code: true,\r\n    defining: true,\r\n    addAttributes() {\r\n        return {\r\n            language: {\r\n                default: null,\r\n                parseHTML: element => {\r\n                    var _a;\r\n                    const { languageClassPrefix } = this.options;\r\n                    const classNames = [...((_a = element.firstElementChild) === null || _a === void 0 ? void 0 : _a.classList) || []];\r\n                    const languages = classNames\r\n                        .filter(className => className.startsWith(languageClassPrefix))\r\n                        .map(className => className.replace(languageClassPrefix, ''));\r\n                    const language = languages[0];\r\n                    if (!language) {\r\n                        return null;\r\n                    }\r\n                    return language;\r\n                },\r\n                rendered: false,\r\n            },\r\n        };\r\n    },\r\n    parseHTML() {\r\n        return [\r\n            {\r\n                tag: 'pre',\r\n                preserveWhitespace: 'full',\r\n            },\r\n        ];\r\n    },\r\n    renderHTML({ node, HTMLAttributes }) {\r\n        return [\r\n            'pre',\r\n            mergeAttributes(this.options.HTMLAttributes, HTMLAttributes),\r\n            [\r\n                'code',\r\n                {\r\n                    class: node.attrs.language\r\n                        ? this.options.languageClassPrefix + node.attrs.language\r\n                        : null,\r\n                },\r\n                0,\r\n            ],\r\n        ];\r\n    },\r\n    addCommands() {\r\n        return {\r\n            setCodeBlock: attributes => ({ commands }) => {\r\n                return commands.setNode(this.name, attributes);\r\n            },\r\n            toggleCodeBlock: attributes => ({ commands }) => {\r\n                return commands.toggleNode(this.name, 'paragraph', attributes);\r\n            },\r\n        };\r\n    },\r\n    addKeyboardShortcuts() {\r\n        return {\r\n            'Mod-Alt-c': () => this.editor.commands.toggleCodeBlock(),\r\n            // remove code block when at start of document or code block is empty\r\n            Backspace: () => {\r\n                const { empty, $anchor } = this.editor.state.selection;\r\n                const isAtStart = $anchor.pos === 1;\r\n                if (!empty || $anchor.parent.type.name !== this.name) {\r\n                    return false;\r\n                }\r\n                if (isAtStart || !$anchor.parent.textContent.length) {\r\n                    return this.editor.commands.clearNodes();\r\n                }\r\n                return false;\r\n            },\r\n            // exit node on triple enter\r\n            Enter: ({ editor }) => {\r\n                if (!this.options.exitOnTripleEnter) {\r\n                    return false;\r\n                }\r\n                const { state } = editor;\r\n                const { selection } = state;\r\n                const { $from, empty } = selection;\r\n                if (!empty || $from.parent.type !== this.type) {\r\n                    return false;\r\n                }\r\n                const isAtEnd = $from.parentOffset === $from.parent.nodeSize - 2;\r\n                const endsWithDoubleNewline = $from.parent.textContent.endsWith('\\n\\n');\r\n                if (!isAtEnd || !endsWithDoubleNewline) {\r\n                    return false;\r\n                }\r\n                return editor\r\n                    .chain()\r\n                    .command(({ tr }) => {\r\n                    tr.delete($from.pos - 2, $from.pos);\r\n                    return true;\r\n                })\r\n                    .exitCode()\r\n                    .run();\r\n            },\r\n            // exit node on arrow down\r\n            ArrowDown: ({ editor }) => {\r\n                if (!this.options.exitOnArrowDown) {\r\n                    return false;\r\n                }\r\n                const { state } = editor;\r\n                const { selection, doc } = state;\r\n                const { $from, empty } = selection;\r\n                if (!empty || $from.parent.type !== this.type) {\r\n                    return false;\r\n                }\r\n                const isAtEnd = $from.parentOffset === $from.parent.nodeSize - 2;\r\n                if (!isAtEnd) {\r\n                    return false;\r\n                }\r\n                const after = $from.after();\r\n                if (after === undefined) {\r\n                    return false;\r\n                }\r\n                const nodeAfter = doc.nodeAt(after);\r\n                if (nodeAfter) {\r\n                    return false;\r\n                }\r\n                return editor.commands.exitCode();\r\n            },\r\n        };\r\n    },\r\n    addInputRules() {\r\n        return [\r\n            textblockTypeInputRule({\r\n                find: backtickInputRegex,\r\n                type: this.type,\r\n                getAttributes: match => ({\r\n                    language: match[1],\r\n                }),\r\n            }),\r\n            textblockTypeInputRule({\r\n                find: tildeInputRegex,\r\n                type: this.type,\r\n                getAttributes: match => ({\r\n                    language: match[1],\r\n                }),\r\n            }),\r\n        ];\r\n    },\r\n    addProseMirrorPlugins() {\r\n        return [\r\n            // this plugin creates a code block for pasted content from VS Code\r\n            // we can also detect the copied code language\r\n            new Plugin({\r\n                key: new PluginKey('codeBlockVSCodeHandler'),\r\n                props: {\r\n                    handlePaste: (view, event) => {\r\n                        if (!event.clipboardData) {\r\n                            return false;\r\n                        }\r\n                        // donâ€™t create a new code block within code blocks\r\n                        if (this.editor.isActive(this.type.name)) {\r\n                            return false;\r\n                        }\r\n                        const text = event.clipboardData.getData('text/plain');\r\n                        const vscode = event.clipboardData.getData('vscode-editor-data');\r\n                        const vscodeData = vscode\r\n                            ? JSON.parse(vscode)\r\n                            : undefined;\r\n                        const language = vscodeData === null || vscodeData === void 0 ? void 0 : vscodeData.mode;\r\n                        if (!text || !language) {\r\n                            return false;\r\n                        }\r\n                        const { tr } = view.state;\r\n                        // create an empty code block\r\n                        tr.replaceSelectionWith(this.type.create({ language }));\r\n                        // put cursor inside the newly created code block\r\n                        tr.setSelection(TextSelection.near(tr.doc.resolve(Math.max(0, tr.selection.from - 2))));\r\n                        // add text to code block\r\n                        // strip carriage return chars from text pasted as code\r\n                        // see: https://github.com/ProseMirror/prosemirror-view/commit/a50a6bcceb4ce52ac8fcc6162488d8875613aacd\r\n                        tr.insertText(text.replace(/\\r\\n?/g, '\\n'));\r\n                        // store meta information\r\n                        // this is useful for other plugins that depends on the paste event\r\n                        // like the paste rule plugin\r\n                        tr.setMeta('paste', true);\r\n                        view.dispatch(tr);\r\n                        return true;\r\n                    },\r\n                },\r\n            }),\r\n        ];\r\n    },\r\n});\n\nexport { CodeBlock, backtickInputRegex, CodeBlock as default, tildeInputRegex };\n//# sourceMappingURL=tiptap-extension-code-block.esm.js.map\n"],"names":["backtickInputRegex","tildeInputRegex","CodeBlock","Node","name","addOptions","languageClassPrefix","exitOnTripleEnter","exitOnArrowDown","HTMLAttributes","content","marks","group","code","defining","addAttributes","language","default","parseHTML","element","_a","this","options","firstElementChild","classList","filter","className","startsWith","map","replace","rendered","tag","preserveWhitespace","renderHTML","node","mergeAttributes","class","attrs","addCommands","setCodeBlock","attributes","commands","setNode","toggleCodeBlock","toggleNode","addKeyboardShortcuts","editor","Backspace","empty","$anchor","state","selection","isAtStart","pos","parent","type","textContent","length","clearNodes","Enter","$from","isAtEnd","parentOffset","nodeSize","endsWithDoubleNewline","endsWith","chain","command","tr","delete","exitCode","run","ArrowDown","doc","after","undefined","nodeAt","addInputRules","textblockTypeInputRule","find","getAttributes","match","addProseMirrorPlugins","key","props","handlePaste","view","event","clipboardData","isActive","text","getData","vscode","vscodeData","JSON","parse","mode","replaceSelectionWith","create","setSelection","resolve","Math","max","from","insertText","setMeta","dispatch"],"sourceRoot":""}