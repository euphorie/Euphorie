{"version":3,"file":"chunks/7557.e9fbb0e0ba107feaf4c8.min.js","mappings":"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","sources":["webpack://@patternslib/patternslib/./node_modules/@patternslib/pat-tiptap/src/extensions/embed.js","webpack://@patternslib/patternslib/./node_modules/@patternslib/pat-tiptap/src/focus-handler.js"],"sourcesContent":["// From: tiptap/demos/src/Experiments/GenericFigure/Vue/figure.ts\nimport { focus_handler } from \"../focus-handler\";\nimport log from \"../tiptap\";\nimport { Node, mergeAttributes } from \"@tiptap/core\";\nimport { Plugin } from \"prosemirror-state\";\nimport dom from \"@patternslib/patternslib/src/core/dom\";\nimport events from \"@patternslib/patternslib/src/core/events\";\n\nlet panel_observer;\n\nfunction embed_panel({ app }) {\n    const embed_panel = document.querySelector(app.options.embedPanel);\n    if (!embed_panel) {\n        log.warn(\"No embed panel found.\");\n        return;\n    }\n    focus_handler(embed_panel);\n\n    const reinit = () => {\n        const embed_src = embed_panel.querySelector(\"[name=tiptap-src]\");\n        const embed_title = embed_panel.querySelector(\"[name=tiptap-title]\");\n        const embed_caption = embed_panel.querySelector(\"[name=tiptap-caption]\");\n        const embed_confirm = embed_panel.querySelector(\".tiptap-confirm, [name=tiptap-confirm]\"); // prettier-ignore\n\n        const update_callback = (set_focus) => {\n            const cmd = app.editor.chain();\n            cmd.insertContent({\n                type: \"figure\",\n                content: [\n                    {\n                        type: \"embed\",\n                        attrs: {\n                            src: embed_src.value,\n                            ...(embed_title?.value && { title: embed_title.value }),\n                        },\n                    },\n                    // Conditionally add a figcaption\n                    ...(embed_caption?.value\n                        ? [\n                              {\n                                  type: \"figcaption\",\n                                  content: [\n                                      {\n                                          type: \"text\",\n                                          text: embed_caption.value,\n                                      },\n                                  ],\n                              },\n                          ]\n                        : []),\n                ],\n            });\n            if (set_focus === true) {\n                // set focus after setting embed, otherwise embed is\n                // selected and right away deleted when starting typing.\n                cmd.focus();\n            }\n            cmd.run();\n        };\n\n        // FORM UPDATE\n        if (embed_confirm) {\n            // update on click on confirm\n            events.add_event_listener(\n                embed_confirm,\n                \"click\",\n                \"tiptap_embed_confirm\",\n                () => update_callback(true)\n            );\n        } else {\n            // update on input/change\n            events.add_event_listener(\n                embed_src,\n                \"change\",\n                \"tiptap_embed_src\",\n                update_callback\n            );\n            events.add_event_listener(\n                embed_title,\n                \"change\",\n                \"tiptap_embed_title\",\n                update_callback\n            );\n            events.add_event_listener(\n                embed_caption,\n                \"change\",\n                \"tiptap_embed_caption\",\n                update_callback\n            );\n        }\n    };\n\n    reinit();\n    if (panel_observer) {\n        panel_observer.disconnect();\n    }\n    panel_observer = new MutationObserver(reinit);\n    panel_observer.observe(embed_panel, {\n        childList: true,\n        subtree: true,\n        attributes: false,\n        characterData: false,\n    });\n}\n\nexport function init({ app, button }) {\n    // Initialize modal after it has injected.\n    button.addEventListener(\"pat-modal-ready\", () => {\n        if (dom.get_data(app.toolbar_el, \"tiptap-instance\", null) !== app) {\n            // If this pat-tiptap instance is not the one which was last\n            // focused, just return and do nothing.\n            // This might be due to one toolbar shared by multiple editors.\n            return;\n        }\n        embed_panel({ app: app });\n    });\n}\n\nexport const factory = () => {\n    const is_youtube = (src) => src.indexOf(\"youtube.com\") > -1;\n    const is_vimeo = (src) => src.indexOf(\"vimeo.com\") > -1;\n\n    return Node.create({\n        name: \"embed\",\n\n        addOptions() {\n            return {\n                HTMLAttributes: {},\n            };\n        },\n\n        group: \"block\",\n\n        allowGapCursor: false,\n        draggable: false,\n        isolating: true,\n        selectable: false,\n\n        addAttributes() {\n            return {\n                src: {\n                    default: null,\n                },\n                title: {\n                    default: null,\n                },\n            };\n        },\n\n        parseHTML() {\n            return [\n                {\n                    tag: `iframe[src*=\"youtube.com\"]`,\n                    getAttrs: (node) =>\n                        (is_youtube(node.getAttribute(\"src\")) ||\n                            is_vimeo(node.getAttribute(\"src\")) > -1) &&\n                        null,\n                },\n            ];\n        },\n\n        renderHTML({ HTMLAttributes }) {\n            const attributes_youtube = {\n                width: \"560\",\n                height: \"315\",\n                allowfullscreen: \"\",\n                frameborder: \"0\",\n            };\n            const attributes_vimeo = {\n                width: \"640\",\n                height: \"360\",\n                allowfullscreen: \"\",\n                frameborder: \"0\",\n            };\n\n            let attrs;\n            if (is_youtube(HTMLAttributes.src)) {\n                attrs = {\n                    ...HTMLAttributes,\n                    ...attributes_youtube,\n                };\n                const vid = attrs.src.match(/watch.*v\\=(?<vid>[^&]*)/)?.groups?.vid;\n                if (vid) {\n                    attrs.src = `https://www.youtube.com/embed/${vid}`;\n                }\n            }\n            if (is_vimeo(HTMLAttributes.src)) {\n                attrs = {\n                    ...HTMLAttributes,\n                    ...attributes_vimeo,\n                };\n                const vid = attrs.src.match(/vimeo.com\\/(?<vid>[0-9]*)/)?.groups?.vid;\n                if (vid) {\n                    attrs.src = `https://player.vimeo.com/video/${vid}`;\n                }\n            }\n\n            return [\"iframe\", mergeAttributes(this.options.HTMLAttributes, attrs)];\n        },\n\n        addCommands() {\n            return {\n                setEmbed:\n                    (options) =>\n                    ({ commands }) => {\n                        return commands.insertContent({\n                            type: this.name,\n                            attrs: options,\n                        });\n                    },\n            };\n        },\n\n        addProseMirrorPlugins() {\n            return [\n                new Plugin({\n                    props: {\n                        handleDOMEvents: {\n                            // prevent dragging nodes out of the figure\n                            dragstart: (view, event) => {\n                                if (!event.target) {\n                                    return false;\n                                }\n\n                                const pos = view.posAtDOM(event.target, 0);\n                                const $pos = view.state.doc.resolve(pos);\n\n                                if ($pos.parent.type === this.type) {\n                                    event.preventDefault();\n                                }\n\n                                return false;\n                            },\n                        },\n                    },\n                }),\n            ];\n        },\n    });\n};\n","import events from \"@patternslib/patternslib/src/core/events\";\nimport utils from \"@patternslib/patternslib/src/core/utils\";\n\nexport const TARGETS = [];\n\nexport function focus_handler(el) {\n    // make element focusable\n    // See: https://javascript.info/focus-blur\n    el.setAttribute(\"tabindex\", \"-1\"); // not user-selectable but programmatically focusable.\n    events.add_event_listener(\n        el,\n        \"focus\",\n        \"tiptap-focusin\",\n        async () => {\n            utils.timeout(1); // short timeout to ensure focus class is set even if tiptap_blur_handler is called concurrently.\n            TARGETS.map((it) => it?.classList.add(\"tiptap-focus\"));\n        },\n        true\n    );\n    events.add_event_listener(\n        el,\n        \"blur\",\n        \"tiptap-focusout\",\n        () => {\n            TARGETS.map((it) => it?.classList.remove(\"tiptap-focus\"));\n        },\n        true\n    );\n}\n"],"names":["panel_observer","init","app","button","addEventListener","dom","toolbar_el","embed_panel","document","querySelector","options","embedPanel","focus_handler","reinit","embed_src","embed_title","embed_caption","embed_confirm","update_callback","set_focus","cmd","editor","chain","insertContent","type","content","attrs","src","value","title","text","focus","run","events","disconnect","MutationObserver","observe","childList","subtree","attributes","characterData","log","factory","is_youtube","indexOf","is_vimeo","Node","name","addOptions","HTMLAttributes","group","allowGapCursor","draggable","isolating","selectable","addAttributes","default","parseHTML","tag","getAttrs","node","getAttribute","renderHTML","vid","width","height","allowfullscreen","frameborder","match","groups","mergeAttributes","this","addCommands","setEmbed","commands","addProseMirrorPlugins","Plugin","props","handleDOMEvents","dragstart","view","event","target","pos","posAtDOM","state","doc","resolve","parent","preventDefault","i","TARGETS","el","setAttribute","utils","map","it","classList","add","remove"],"sourceRoot":""}