{"version":3,"file":"chunks/9474.1b0b28db3128913c2620.min.js","mappings":"ssDAEA,IAAMA,EAAY,CACjB,CACC,oBACA,iBACA,oBACA,oBACA,mBACA,mBAGD,CACC,0BACA,uBACA,0BACA,0BACA,yBACA,yBAID,CACC,0BACA,yBACA,iCACA,yBACA,yBACA,yBAGD,CACC,uBACA,sBACA,uBACA,uBACA,sBACA,sBAED,CACC,sBACA,mBACA,sBACA,sBACA,qBACA,sBAIIC,EAAa,WAClB,IADwB,EAClBC,EAAoBF,EAAU,GAC9BG,EAAc,GAFI,IAICH,GAJD,IAIxB,2BAAoC,KAAzBI,EAAyB,QAEnC,IAD6BA,MAAAA,OAAH,EAAGA,EAAa,MACdC,SAAU,WACPD,EAAWE,WADJ,IACrC,2BAAoD,oBAAxCC,EAAwC,KAAjCC,EAAiC,KACnDL,EAAYD,EAAkBK,IAAUC,GAFJ,8BAKrC,OAAOL,IAXe,8BAexB,OAAO,EAfW,GAkBbM,EAAe,CACpBC,OAAQT,EAAUU,iBAClBC,MAAOX,EAAUY,iBAIdC,EAAa,CAEhBC,QAFgB,WAEqC,IAA7CC,EAA6C,uDAAnCX,SAASY,gBAAiBC,EAAS,uCACpD,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC5B,IAAMC,EAAsB,SAAtBA,IACLR,EAAWS,IAAI,SAAUD,GACzBF,KAGDN,EAAWU,GAAG,SAAUF,GAExB,IAAMG,EAAgBT,EAAQf,EAAUyB,mBAAmBR,GAEvDO,aAAyBN,SAC5BM,EAAcE,KAAKL,GAAqBM,MAAMP,OAIjDQ,KAlBgB,WAmBf,OAAO,IAAIV,SAAQ,SAACC,EAASC,GAC5B,GAAKP,EAAWgB,aAAhB,CAKA,IAAMC,EAAmB,SAAnBA,IACLjB,EAAWS,IAAI,SAAUQ,GACzBX,KAGDN,EAAWU,GAAG,SAAUO,GAExB,IAAMN,EAAgBpB,SAASJ,EAAU+B,kBAErCP,aAAyBN,SAC5BM,EAAcE,KAAKI,GAAkBH,MAAMP,QAd3CD,QAkBHa,OAvCgB,SAuCTjB,EAASE,GACf,OAAOJ,EAAWgB,aAAehB,EAAWe,OAASf,EAAWC,QAAQC,EAASE,IAElFgB,SA1CgB,SA0CPC,GACRrB,EAAWU,GAAG,SAAUW,IAEzBC,QA7CgB,SA6CRD,GACPrB,EAAWU,GAAG,QAASW,IAExBX,GAhDgB,SAgDba,EAAOF,GACT,IAAMG,EAAY7B,EAAa4B,GAC3BC,GACHjC,SAASkC,iBAAiBD,EAAWH,GAAU,IAGjDZ,IAtDgB,SAsDZc,EAAOF,GACV,IAAMG,EAAY7B,EAAa4B,GAC3BC,GACHjC,SAASmC,oBAAoBF,EAAWH,GAAU,IAGpDM,IAAKxC,GAGNyC,OAAOC,iBAAiB7B,EAAY,CACnCgB,aAAc,CACbc,IAAK,kBAAMC,QAAQxC,SAASJ,EAAU6C,sBAEvC9B,QAAS,CACR+B,YAAY,EACZH,IAAK,kCAAMvC,SAASJ,EAAU6C,0BAAzB,aAA+CE,IAErDC,UAAW,CACVF,YAAY,EAEZH,IAAK,kBAAMC,QAAQxC,SAASJ,EAAUiD,wBAInCjD,IACJa,EAAa,CAACmC,WAAW,IAG1B","sources":["webpack://oira.prototype/./node_modules/screenfull/index.js"],"sourcesContent":["/* eslint-disable promise/prefer-await-to-then */\n\nconst methodMap = [\n\t[\n\t\t'requestFullscreen',\n\t\t'exitFullscreen',\n\t\t'fullscreenElement',\n\t\t'fullscreenEnabled',\n\t\t'fullscreenchange',\n\t\t'fullscreenerror',\n\t],\n\t// New WebKit\n\t[\n\t\t'webkitRequestFullscreen',\n\t\t'webkitExitFullscreen',\n\t\t'webkitFullscreenElement',\n\t\t'webkitFullscreenEnabled',\n\t\t'webkitfullscreenchange',\n\t\t'webkitfullscreenerror',\n\n\t],\n\t// Old WebKit\n\t[\n\t\t'webkitRequestFullScreen',\n\t\t'webkitCancelFullScreen',\n\t\t'webkitCurrentFullScreenElement',\n\t\t'webkitCancelFullScreen',\n\t\t'webkitfullscreenchange',\n\t\t'webkitfullscreenerror',\n\n\t],\n\t[\n\t\t'mozRequestFullScreen',\n\t\t'mozCancelFullScreen',\n\t\t'mozFullScreenElement',\n\t\t'mozFullScreenEnabled',\n\t\t'mozfullscreenchange',\n\t\t'mozfullscreenerror',\n\t],\n\t[\n\t\t'msRequestFullscreen',\n\t\t'msExitFullscreen',\n\t\t'msFullscreenElement',\n\t\t'msFullscreenEnabled',\n\t\t'MSFullscreenChange',\n\t\t'MSFullscreenError',\n\t],\n];\n\nconst nativeAPI = (() => {\n\tconst unprefixedMethods = methodMap[0];\n\tconst returnValue = {};\n\n\tfor (const methodList of methodMap) {\n\t\tconst exitFullscreenMethod = methodList?.[1];\n\t\tif (exitFullscreenMethod in document) {\n\t\t\tfor (const [index, method] of methodList.entries()) {\n\t\t\t\treturnValue[unprefixedMethods[index]] = method;\n\t\t\t}\n\n\t\t\treturn returnValue;\n\t\t}\n\t}\n\n\treturn false;\n})();\n\nconst eventNameMap = {\n\tchange: nativeAPI.fullscreenchange,\n\terror: nativeAPI.fullscreenerror,\n};\n\n// eslint-disable-next-line import/no-mutable-exports\nlet screenfull = {\n\t// eslint-disable-next-line default-param-last\n\trequest(element = document.documentElement, options) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst onFullScreenEntered = () => {\n\t\t\t\tscreenfull.off('change', onFullScreenEntered);\n\t\t\t\tresolve();\n\t\t\t};\n\n\t\t\tscreenfull.on('change', onFullScreenEntered);\n\n\t\t\tconst returnPromise = element[nativeAPI.requestFullscreen](options);\n\n\t\t\tif (returnPromise instanceof Promise) {\n\t\t\t\treturnPromise.then(onFullScreenEntered).catch(reject);\n\t\t\t}\n\t\t});\n\t},\n\texit() {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tif (!screenfull.isFullscreen) {\n\t\t\t\tresolve();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst onFullScreenExit = () => {\n\t\t\t\tscreenfull.off('change', onFullScreenExit);\n\t\t\t\tresolve();\n\t\t\t};\n\n\t\t\tscreenfull.on('change', onFullScreenExit);\n\n\t\t\tconst returnPromise = document[nativeAPI.exitFullscreen]();\n\n\t\t\tif (returnPromise instanceof Promise) {\n\t\t\t\treturnPromise.then(onFullScreenExit).catch(reject);\n\t\t\t}\n\t\t});\n\t},\n\ttoggle(element, options) {\n\t\treturn screenfull.isFullscreen ? screenfull.exit() : screenfull.request(element, options);\n\t},\n\tonchange(callback) {\n\t\tscreenfull.on('change', callback);\n\t},\n\tonerror(callback) {\n\t\tscreenfull.on('error', callback);\n\t},\n\ton(event, callback) {\n\t\tconst eventName = eventNameMap[event];\n\t\tif (eventName) {\n\t\t\tdocument.addEventListener(eventName, callback, false);\n\t\t}\n\t},\n\toff(event, callback) {\n\t\tconst eventName = eventNameMap[event];\n\t\tif (eventName) {\n\t\t\tdocument.removeEventListener(eventName, callback, false);\n\t\t}\n\t},\n\traw: nativeAPI,\n};\n\nObject.defineProperties(screenfull, {\n\tisFullscreen: {\n\t\tget: () => Boolean(document[nativeAPI.fullscreenElement]),\n\t},\n\telement: {\n\t\tenumerable: true,\n\t\tget: () => document[nativeAPI.fullscreenElement] ?? undefined,\n\t},\n\tisEnabled: {\n\t\tenumerable: true,\n\t\t// Coerce to boolean in case of old WebKit.\n\t\tget: () => Boolean(document[nativeAPI.fullscreenEnabled]),\n\t},\n});\n\nif (!nativeAPI) {\n\tscreenfull = {isEnabled: false};\n}\n\nexport default screenfull;\n"],"names":["methodMap","nativeAPI","unprefixedMethods","returnValue","methodList","document","entries","index","method","eventNameMap","change","fullscreenchange","error","fullscreenerror","screenfull","request","element","documentElement","options","Promise","resolve","reject","onFullScreenEntered","off","on","returnPromise","requestFullscreen","then","catch","exit","isFullscreen","onFullScreenExit","exitFullscreen","toggle","onchange","callback","onerror","event","eventName","addEventListener","removeEventListener","raw","Object","defineProperties","get","Boolean","fullscreenElement","enumerable","undefined","isEnabled","fullscreenEnabled"],"sourceRoot":""}