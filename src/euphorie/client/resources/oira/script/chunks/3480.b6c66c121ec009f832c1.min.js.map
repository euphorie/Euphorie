{"version":3,"file":"chunks/3480.b6c66c121ec009f832c1.min.js","mappings":"uMAEA,MAAMA,EAAU,EAAAC,KAAA,OAAY,CACxBC,KAAM,UACNC,WAAU,KACC,CACHC,OAAQ,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GACxBC,eAAgB,KAGxBC,QAAS,UACTC,MAAO,QACPC,UAAU,EACVC,cAAa,KACF,CACHC,MAAO,CACHC,QAAS,EACTC,UAAU,KAItBC,YACI,OAAOC,KAAKC,QAAQX,OACfY,KAAKN,IAAU,CAChBO,IAAK,IAAIP,IACTQ,MAAO,CAAER,MAAAA,QAGjBS,YAAW,KAAEC,EAAI,eAAEf,IAKf,MAAO,CAAC,IAJSS,KAAKC,QAAQX,OAAOiB,SAASD,EAAKF,MAAMR,OAEnDU,EAAKF,MAAMR,MACXI,KAAKC,QAAQX,OAAO,MACL,IAAAkB,iBAAgBR,KAAKC,QAAQV,eAAgBA,GAAiB,IAEvFkB,cACI,MAAO,CACHC,WAAYC,GAAc,EAAGC,SAAAA,OACpBZ,KAAKC,QAAQX,OAAOiB,SAASI,EAAWf,QAGtCgB,EAASC,QAAQb,KAAKZ,KAAMuB,GAEvCG,cAAeH,GAAc,EAAGC,SAAAA,OACvBZ,KAAKC,QAAQX,OAAOiB,SAASI,EAAWf,QAGtCgB,EAASG,WAAWf,KAAKZ,KAAM,YAAauB,KAI/DK,uBACI,OAAOhB,KAAKC,QAAQX,OAAO2B,QAAO,CAACC,EAAOtB,KAAU,IAC7CsB,EAEC,CAAC,WAAWtB,KAAU,IAAMI,KAAKmB,OAAOP,SAASE,cAAc,CAAElB,MAAAA,OAErE,KAERwB,gBACI,OAAOpB,KAAKC,QAAQX,OAAOY,KAAIN,IACpB,IAAAyB,wBAAuB,CAC1BC,KAAM,IAAIC,OAAO,SAAS3B,WAC1B4B,KAAMxB,KAAKwB,KACXC,cAAe,CACX7B,MAAAA,UC/Db,IAAM8B,EAAU,WACnB,OAAOC,EAAAA,OAAqB,CACxBP,cADwB,WAGpB,MAAO","sources":["webpack://@patternslib/patternslib/./node_modules/@tiptap/extension-heading/dist/tiptap-extension-heading.esm.js","webpack://@patternslib/patternslib/./node_modules/@patternslib/pat-tiptap/src/extensions/heading.js"],"sourcesContent":["import { Node, mergeAttributes, textblockTypeInputRule } from '@tiptap/core';\n\nconst Heading = Node.create({\r\n    name: 'heading',\r\n    addOptions() {\r\n        return {\r\n            levels: [1, 2, 3, 4, 5, 6],\r\n            HTMLAttributes: {},\r\n        };\r\n    },\r\n    content: 'inline*',\r\n    group: 'block',\r\n    defining: true,\r\n    addAttributes() {\r\n        return {\r\n            level: {\r\n                default: 1,\r\n                rendered: false,\r\n            },\r\n        };\r\n    },\r\n    parseHTML() {\r\n        return this.options.levels\r\n            .map((level) => ({\r\n            tag: `h${level}`,\r\n            attrs: { level },\r\n        }));\r\n    },\r\n    renderHTML({ node, HTMLAttributes }) {\r\n        const hasLevel = this.options.levels.includes(node.attrs.level);\r\n        const level = hasLevel\r\n            ? node.attrs.level\r\n            : this.options.levels[0];\r\n        return [`h${level}`, mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];\r\n    },\r\n    addCommands() {\r\n        return {\r\n            setHeading: attributes => ({ commands }) => {\r\n                if (!this.options.levels.includes(attributes.level)) {\r\n                    return false;\r\n                }\r\n                return commands.setNode(this.name, attributes);\r\n            },\r\n            toggleHeading: attributes => ({ commands }) => {\r\n                if (!this.options.levels.includes(attributes.level)) {\r\n                    return false;\r\n                }\r\n                return commands.toggleNode(this.name, 'paragraph', attributes);\r\n            },\r\n        };\r\n    },\r\n    addKeyboardShortcuts() {\r\n        return this.options.levels.reduce((items, level) => ({\r\n            ...items,\r\n            ...{\r\n                [`Mod-Alt-${level}`]: () => this.editor.commands.toggleHeading({ level }),\r\n            },\r\n        }), {});\r\n    },\r\n    addInputRules() {\r\n        return this.options.levels.map(level => {\r\n            return textblockTypeInputRule({\r\n                find: new RegExp(`^(#{1,${level}})\\\\s$`),\r\n                type: this.type,\r\n                getAttributes: {\r\n                    level,\r\n                },\r\n            });\r\n        });\r\n    },\r\n});\n\nexport { Heading, Heading as default };\n//# sourceMappingURL=tiptap-extension-heading.esm.js.map\n","import { Heading as TipTapHeading } from \"@tiptap/extension-heading\";\n\nexport const factory = () => {\n    return TipTapHeading.extend({\n        addInputRules() {\n            // Clear markdown-style input rules to not interfer with tagging character \"#\".\n            return [];\n        },\n    });\n};\n"],"names":["Heading","Node","name","addOptions","levels","HTMLAttributes","content","group","defining","addAttributes","level","default","rendered","parseHTML","this","options","map","tag","attrs","renderHTML","node","includes","mergeAttributes","addCommands","setHeading","attributes","commands","setNode","toggleHeading","toggleNode","addKeyboardShortcuts","reduce","items","editor","addInputRules","textblockTypeInputRule","find","RegExp","type","getAttributes","factory","TipTapHeading"],"sourceRoot":""}