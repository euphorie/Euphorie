{"version":3,"file":"chunks/61201.2733aad9e3055af5872d.min.js","mappings":"2HAAA,WAMI,MAAMA,EAAOC,SAASC,qBAAqB,QAAQ,GASnD,GARIF,EAAKG,UAAUC,SAAS,WACxBJ,EAAKG,UAAUE,OAAO,SACtBL,EAAKG,UAAUG,IAAI,OAMnBC,OAAOC,gCACP,OAKJ,MAAMC,EAAUR,SAASC,qBAAqB,UAE9C,IAAIQ,EADWD,EAAQA,EAAQE,OAAS,GAChBC,IAExBF,EAAaA,EAAWG,UAAU,EAAGH,EAAWI,YAAY,MAAQ,IAGpE,MAAMC,EAAad,SAASe,cAAc,UAC1CD,EAAWH,IAAMF,EAAa,mBAC9BT,SAASC,qBAAqB,QAAQ,GAAGe,YAAYF,EACxD,CA/BD,E,8CCiBA,MAAMG,EAAgB,CAAC,EACvB,IAAIC,GAA+B,OCRe,IAAvCZ,OAAOa,8BACdb,OAAOa,4BAA8B,CAAC,GAE1C,MAAMF,EAAgBX,OAAOa,4BAEtBC,eAAeC,EAAiBC,GAA6C,IAA5C,YAAEC,EAAW,eAAEC,EAAiB,UAAUF,EAC9E,GAAIL,EAAc,GAAGM,KAAeC,KAEhC,OAEJ,MAAMC,QDAKL,eAA6BM,GACxC,MAAMD,EAAYnB,OAAOoB,GAGzB,OAAIT,EAAcS,KAKbR,UACKS,EAAAA,EAAyB,WAC/BT,GAA+B,SAG7BO,EAAUG,KAAKC,EAAAA,EAAyBC,SAG9Cb,EAAcS,IAAU,GAZbD,CAcf,CCnB4BM,CAAcR,GAEhCS,SADgBP,EAAUQ,IAAIT,MASpC,OANAP,EAAc,GAAGM,KAAeC,MAAoB,EAEpDU,QAAQC,MACJ,iEAAiEZ,OAG9DS,CACX,CAEA,IAAwBI,IAUT,WAKX,MAAMC,EAAUC,OAAOC,KAAKjC,QAAQkC,QAAQC,GAAsC,IAA/BA,EAAGC,QAxC5B,wBAyC1B,IAAK,MAAMC,KAAeN,EAEtBhB,EAAkB,CAAEE,YAAaoB,IAErC3C,SAAS4C,cACL,IAAIC,MAAM,0BAA2B,CAAEC,SAAS,EAAMC,YAAY,IAE1E,EArBgC,aAAxB/C,SAASgD,YAAqD,gBAAxBhD,SAASgD,WAE/CC,WAAWb,EAAI,GAEfpC,SAASkD,iBAAiB,mBAAoBd,GC/BtD,sEAGAhB,iBACI,MAAM+B,SAAgB,uCAAkBrB,QACxCxB,OAAO8C,OAASD,EAChB7C,OAAO+C,EAAIF,CACf,CACAG,E","sources":["webpack://@patternslib/patternslib/./src/core/feature-detection.js","webpack://@patternslib/patternslib/./node_modules/@patternslib/dev/webpack/module_federation--dynamic-federation.js","webpack://@patternslib/patternslib/./node_modules/@patternslib/dev/webpack/module_federation.js","webpack://@patternslib/patternslib/./src/index.js"],"sourcesContent":["(function () {\n    // Add JavaScript feature as class to the <html> element, just like\n    // Modernizr does. This is needed for accessibility reasons, to support\n    // browsers and situations where JavaScript is not available or disabled.\n    // The HTML root tag needs to have the `no-js` class set which is then\n    // replaced by `js`.\n    const html = document.getElementsByTagName(\"html\")[0];\n    if (html.classList.contains(\"no-js\")) {\n        html.classList.remove(\"no-js\");\n        html.classList.add(\"js\");\n    }\n\n    // Do not load modernizr if disabled. It's enabled by default.\n    // You might want to disable it for your project by setting:\n    // window.__patternslib_disable_modernizr = true;\n    if (window.__patternslib_disable_modernizr) {\n        return;\n    }\n\n    // Get the current script tag's URL.\n    // See: https://stackoverflow.com/a/984656/1337474\n    const scripts = document.getElementsByTagName(\"script\");\n    const script = scripts[scripts.length - 1];\n    let script_url = script.src;\n    // Get the base URL of the current script tag's URL.\n    script_url = script_url.substring(0, script_url.lastIndexOf(\"/\")) + \"/\";\n\n    // Inject a new one with the modernizr bundle.\n    const script_tag = document.createElement(\"script\");\n    script_tag.src = script_url + \"modernizr.min.js\";\n    document.getElementsByTagName(\"head\")[0].appendChild(script_tag);\n})();\n","// Author: Manfred Steyer <manfred.steyer@gmx.net>\n// Author: Johannes Raggam <thetetet@gmail.com>\n\n// From:\n//   https://github.com/manfredsteyer/plugin-demo.git\n//   https://github.com/thet/module-federation-minimaltest.git\n\n/**\n * Load remote module / bundle.\n *\n * Wrapper around webpack runtime API\n *\n * Usage: get_container(\"bundle-name-xyz\")\n *\n * @param {string} remote - the remote global name\n * @returns {Promise<object>} - Federated Module Container\n */\nconst container_map = {};\nlet is_default_scope_initialized = false;\n\nexport default async function get_container(remote) {\n    const container = window[remote];\n\n    // Do we still need to initialize the remote?\n    if (container_map[remote]) {\n        return container;\n    }\n\n    // Do we still need to initialize the shared scope?\n    if (!is_default_scope_initialized) {\n        await __webpack_init_sharing__(\"default\"); // eslint-disable-line no-undef\n        is_default_scope_initialized = true;\n    }\n\n    await container.init(__webpack_share_scopes__.default); // eslint-disable-line no-undef\n\n    // Remember that the container has been initialized.\n    container_map[remote] = true;\n    return container;\n}\n","/**\n * Initialize dynamic module federation.\n */\nimport get_container from \"./module_federation--dynamic-federation\";\n\n// Patternslib Module Federation bundle prefix.\n// This is used to filter for module federation enabled bundles.\n// NOTE: This is also defined in ``webpack.mf.js``.\nexport const MF_NAME_PREFIX = \"__patternslib_mf__\";\n\nif (typeof window.__patternslib_container_map === \"undefined\") {\n    window.__patternslib_container_map = {};\n}\nconst container_map = window.__patternslib_container_map;\n\nexport async function initialize_remote({ remote_name, exposed_module = \"./main\" }) {\n    if (container_map[`${remote_name}-${exposed_module}`]) {\n        // already initialized, return.\n        return;\n    }\n    const container = await get_container(remote_name);\n    const factory = await container.get(exposed_module);\n    const module = factory();\n\n    container_map[`${remote_name}-${exposed_module}`] = true;\n\n    console.debug(\n        `Patternslib Module Federation: Loaded and initialized bundle \"${remote_name}\".`\n    );\n\n    return module;\n}\n\nfunction document_ready(fn) {\n    // see if DOM is already available\n    if (document.readyState === \"complete\" || document.readyState === \"interactive\") {\n        // call on next available tick\n        setTimeout(fn, 1);\n    } else {\n        document.addEventListener(\"DOMContentLoaded\", fn);\n    }\n}\n\ndocument_ready(function () {\n    // Automatically initialize all Module Federation enabled Patternslib based\n    // bundles by filtering for the prefix ``__patternslib_mf__``.\n    // Do this on document ready, as this is the time where all MF bundles have\n    // been registered in the global namespace.\n    const bundles = Object.keys(window).filter((it) => it.indexOf(MF_NAME_PREFIX) === 0);\n    for (const bundle_name of bundles) {\n        // Now load + initialize each bundle.\n        initialize_remote({ remote_name: bundle_name });\n    }\n    document.dispatchEvent(\n        new Event(\"patternslib__mf--loaded\", { bubbles: true, cancelable: false })\n    );\n});\n","// Load modernizr and the `html.js` feature class.\nimport \"./core/feature-detection\";\n\n// Webpack entry point for module federation.\nimport \"@patternslib/dev/webpack/module_federation\";\n\n// The next import needs to be kept with parentheses, otherwise we get this error:\n// \"Shared module is not available for eager consumption.\"\nimport(\"./patterns\");\n\n// Register jQuery gloablly as soon as this script is executed.\nasync function register_global_libraries() {\n    const jquery = (await import(\"jquery\")).default;\n    window.jQuery = jquery;\n    window.$ = jquery;\n}\nregister_global_libraries();\n"],"names":["html","document","getElementsByTagName","classList","contains","remove","add","window","__patternslib_disable_modernizr","scripts","script_url","length","src","substring","lastIndexOf","script_tag","createElement","appendChild","container_map","is_default_scope_initialized","__patternslib_container_map","async","initialize_remote","_ref","remote_name","exposed_module","container","remote","__webpack_init_sharing__","init","__webpack_share_scopes__","default","get_container","module","get","console","debug","fn","bundles","Object","keys","filter","it","indexOf","bundle_name","dispatchEvent","Event","bubbles","cancelable","readyState","setTimeout","addEventListener","jquery","jQuery","$","register_global_libraries"],"sourceRoot":""}