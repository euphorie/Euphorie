{"version":3,"file":"chunks/40345.aaf05cc1e92327bbed58.min.js","mappings":"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","sources":["webpack://@patternslib/patternslib/./node_modules/@stomp/stompjs/esm6/byte.js","webpack://@patternslib/patternslib/./node_modules/@stomp/stompjs/esm6/frame-impl.js","webpack://@patternslib/patternslib/./node_modules/@stomp/stompjs/esm6/parser.js","webpack://@patternslib/patternslib/./node_modules/@stomp/stompjs/esm6/types.js","webpack://@patternslib/patternslib/./node_modules/@stomp/stompjs/esm6/versions.js","webpack://@patternslib/patternslib/./node_modules/@stomp/stompjs/esm6/stomp-handler.js","webpack://@patternslib/patternslib/./node_modules/@stomp/stompjs/esm6/augment-websocket.js","webpack://@patternslib/patternslib/./node_modules/@stomp/stompjs/esm6/client.js","webpack://@patternslib/patternslib/./node_modules/@stomp/stompjs/esm6/stomp-config.js","webpack://@patternslib/patternslib/./node_modules/@stomp/stompjs/esm6/stomp-headers.js","webpack://@patternslib/patternslib/./node_modules/@stomp/stompjs/esm6/compatibility/heartbeat-info.js","webpack://@patternslib/patternslib/./node_modules/@stomp/stompjs/esm6/compatibility/compat-client.js","webpack://@patternslib/patternslib/./node_modules/@stomp/stompjs/esm6/compatibility/stomp.js"],"sourcesContent":["/**\n * Some byte values, used as per STOMP specifications.\n *\n * Part of `@stomp/stompjs`.\n *\n * @internal\n */\nexport const BYTE = {\n    // LINEFEED byte (octet 10)\n    LF: '\\x0A',\n    // NULL byte (octet 0)\n    NULL: '\\x00',\n};\n//# sourceMappingURL=byte.js.map","import { BYTE } from './byte.js';\n/**\n * Frame class represents a STOMP frame.\n *\n * @internal\n */\nexport class FrameImpl {\n    /**\n     * Frame constructor. `command`, `headers` and `body` are available as properties.\n     *\n     * @internal\n     */\n    constructor(params) {\n        const { command, headers, body, binaryBody, escapeHeaderValues, skipContentLengthHeader, } = params;\n        this.command = command;\n        this.headers = Object.assign({}, headers || {});\n        if (binaryBody) {\n            this._binaryBody = binaryBody;\n            this.isBinaryBody = true;\n        }\n        else {\n            this._body = body || '';\n            this.isBinaryBody = false;\n        }\n        this.escapeHeaderValues = escapeHeaderValues || false;\n        this.skipContentLengthHeader = skipContentLengthHeader || false;\n    }\n    /**\n     * body of the frame\n     */\n    get body() {\n        if (!this._body && this.isBinaryBody) {\n            this._body = new TextDecoder().decode(this._binaryBody);\n        }\n        return this._body || '';\n    }\n    /**\n     * body as Uint8Array\n     */\n    get binaryBody() {\n        if (!this._binaryBody && !this.isBinaryBody) {\n            this._binaryBody = new TextEncoder().encode(this._body);\n        }\n        // At this stage it will definitely have a valid value\n        return this._binaryBody;\n    }\n    /**\n     * deserialize a STOMP Frame from raw data.\n     *\n     * @internal\n     */\n    static fromRawFrame(rawFrame, escapeHeaderValues) {\n        const headers = {};\n        const trim = (str) => str.replace(/^\\s+|\\s+$/g, '');\n        // In case of repeated headers, as per standards, first value need to be used\n        for (const header of rawFrame.headers.reverse()) {\n            const idx = header.indexOf(':');\n            const key = trim(header[0]);\n            let value = trim(header[1]);\n            if (escapeHeaderValues &&\n                rawFrame.command !== 'CONNECT' &&\n                rawFrame.command !== 'CONNECTED') {\n                value = FrameImpl.hdrValueUnEscape(value);\n            }\n            headers[key] = value;\n        }\n        return new FrameImpl({\n            command: rawFrame.command,\n            headers,\n            binaryBody: rawFrame.binaryBody,\n            escapeHeaderValues,\n        });\n    }\n    /**\n     * @internal\n     */\n    toString() {\n        return this.serializeCmdAndHeaders();\n    }\n    /**\n     * serialize this Frame in a format suitable to be passed to WebSocket.\n     * If the body is string the output will be string.\n     * If the body is binary (i.e. of type Unit8Array) it will be serialized to ArrayBuffer.\n     *\n     * @internal\n     */\n    serialize() {\n        const cmdAndHeaders = this.serializeCmdAndHeaders();\n        if (this.isBinaryBody) {\n            return FrameImpl.toUnit8Array(cmdAndHeaders, this._binaryBody).buffer;\n        }\n        else {\n            return cmdAndHeaders + this._body + BYTE.NULL;\n        }\n    }\n    serializeCmdAndHeaders() {\n        const lines = [this.command];\n        if (this.skipContentLengthHeader) {\n            delete this.headers['content-length'];\n        }\n        for (const name of Object.keys(this.headers || {})) {\n            const value = this.headers[name];\n            if (this.escapeHeaderValues &&\n                this.command !== 'CONNECT' &&\n                this.command !== 'CONNECTED') {\n                lines.push(`${name}:${FrameImpl.hdrValueEscape(`${value}`)}`);\n            }\n            else {\n                lines.push(`${name}:${value}`);\n            }\n        }\n        if (this.isBinaryBody ||\n            (!this.isBodyEmpty() && !this.skipContentLengthHeader)) {\n            lines.push(`content-length:${this.bodyLength()}`);\n        }\n        return lines.join(BYTE.LF) + BYTE.LF + BYTE.LF;\n    }\n    isBodyEmpty() {\n        return this.bodyLength() === 0;\n    }\n    bodyLength() {\n        const binaryBody = this.binaryBody;\n        return binaryBody ? binaryBody.length : 0;\n    }\n    /**\n     * Compute the size of a UTF-8 string by counting its number of bytes\n     * (and not the number of characters composing the string)\n     */\n    static sizeOfUTF8(s) {\n        return s ? new TextEncoder().encode(s).length : 0;\n    }\n    static toUnit8Array(cmdAndHeaders, binaryBody) {\n        const uint8CmdAndHeaders = new TextEncoder().encode(cmdAndHeaders);\n        const nullTerminator = new Uint8Array([0]);\n        const uint8Frame = new Uint8Array(uint8CmdAndHeaders.length + binaryBody.length + nullTerminator.length);\n        uint8Frame.set(uint8CmdAndHeaders);\n        uint8Frame.set(binaryBody, uint8CmdAndHeaders.length);\n        uint8Frame.set(nullTerminator, uint8CmdAndHeaders.length + binaryBody.length);\n        return uint8Frame;\n    }\n    /**\n     * Serialize a STOMP frame as per STOMP standards, suitable to be sent to the STOMP broker.\n     *\n     * @internal\n     */\n    static marshall(params) {\n        const frame = new FrameImpl(params);\n        return frame.serialize();\n    }\n    /**\n     *  Escape header values\n     */\n    static hdrValueEscape(str) {\n        return str\n            .replace(/\\\\/g, '\\\\\\\\')\n            .replace(/\\r/g, '\\\\r')\n            .replace(/\\n/g, '\\\\n')\n            .replace(/:/g, '\\\\c');\n    }\n    /**\n     * UnEscape header values\n     */\n    static hdrValueUnEscape(str) {\n        return str\n            .replace(/\\\\r/g, '\\r')\n            .replace(/\\\\n/g, '\\n')\n            .replace(/\\\\c/g, ':')\n            .replace(/\\\\\\\\/g, '\\\\');\n    }\n}\n//# sourceMappingURL=frame-impl.js.map","/**\n * @internal\n */\nconst NULL = 0;\n/**\n * @internal\n */\nconst LF = 10;\n/**\n * @internal\n */\nconst CR = 13;\n/**\n * @internal\n */\nconst COLON = 58;\n/**\n * This is an evented, rec descent parser.\n * A stream of Octets can be passed and whenever it recognizes\n * a complete Frame or an incoming ping it will invoke the registered callbacks.\n *\n * All incoming Octets are fed into _onByte function.\n * Depending on current state the _onByte function keeps changing.\n * Depending on the state it keeps accumulating into _token and _results.\n * State is indicated by current value of _onByte, all states are named as _collect.\n *\n * STOMP standards https://stomp.github.io/stomp-specification-1.2.html\n * imply that all lengths are considered in bytes (instead of string lengths).\n * So, before actual parsing, if the incoming data is String it is converted to Octets.\n * This allows faithful implementation of the protocol and allows NULL Octets to be present in the body.\n *\n * There is no peek function on the incoming data.\n * When a state change occurs based on an Octet without consuming the Octet,\n * the Octet, after state change, is fed again (_reinjectByte).\n * This became possible as the state change can be determined by inspecting just one Octet.\n *\n * There are two modes to collect the body, if content-length header is there then it by counting Octets\n * otherwise it is determined by NULL terminator.\n *\n * Following the standards, the command and headers are converted to Strings\n * and the body is returned as Octets.\n * Headers are returned as an array and not as Hash - to allow multiple occurrence of an header.\n *\n * This parser does not use Regular Expressions as that can only operate on Strings.\n *\n * It handles if multiple STOMP frames are given as one chunk, a frame is split into multiple chunks, or\n * any combination there of. The parser remembers its state (any partial frame) and continues when a new chunk\n * is pushed.\n *\n * Typically the higher level function will convert headers to Hash, handle unescaping of header values\n * (which is protocol version specific), and convert body to text.\n *\n * Check the parser.spec.js to understand cases that this parser is supposed to handle.\n *\n * Part of `@stomp/stompjs`.\n *\n * @internal\n */\nexport class Parser {\n    constructor(onFrame, onIncomingPing) {\n        this.onFrame = onFrame;\n        this.onIncomingPing = onIncomingPing;\n        this._encoder = new TextEncoder();\n        this._decoder = new TextDecoder();\n        this._token = [];\n        this._initState();\n    }\n    parseChunk(segment, appendMissingNULLonIncoming = false) {\n        let chunk;\n        if (typeof segment === 'string') {\n            chunk = this._encoder.encode(segment);\n        }\n        else {\n            chunk = new Uint8Array(segment);\n        }\n        // See https://github.com/stomp-js/stompjs/issues/89\n        // Remove when underlying issue is fixed.\n        //\n        // Send a NULL byte, if the last byte of a Text frame was not NULL.F\n        if (appendMissingNULLonIncoming && chunk[chunk.length - 1] !== 0) {\n            const chunkWithNull = new Uint8Array(chunk.length + 1);\n            chunkWithNull.set(chunk, 0);\n            chunkWithNull[chunk.length] = 0;\n            chunk = chunkWithNull;\n        }\n        // tslint:disable-next-line:prefer-for-of\n        for (let i = 0; i < chunk.length; i++) {\n            const byte = chunk[i];\n            this._onByte(byte);\n        }\n    }\n    // The following implements a simple Rec Descent Parser.\n    // The grammar is simple and just one byte tells what should be the next state\n    _collectFrame(byte) {\n        if (byte === NULL) {\n            // Ignore\n            return;\n        }\n        if (byte === CR) {\n            // Ignore CR\n            return;\n        }\n        if (byte === LF) {\n            // Incoming Ping\n            this.onIncomingPing();\n            return;\n        }\n        this._onByte = this._collectCommand;\n        this._reinjectByte(byte);\n    }\n    _collectCommand(byte) {\n        if (byte === CR) {\n            // Ignore CR\n            return;\n        }\n        if (byte === LF) {\n            this._results.command = this._consumeTokenAsUTF8();\n            this._onByte = this._collectHeaders;\n            return;\n        }\n        this._consumeByte(byte);\n    }\n    _collectHeaders(byte) {\n        if (byte === CR) {\n            // Ignore CR\n            return;\n        }\n        if (byte === LF) {\n            this._setupCollectBody();\n            return;\n        }\n        this._onByte = this._collectHeaderKey;\n        this._reinjectByte(byte);\n    }\n    _reinjectByte(byte) {\n        this._onByte(byte);\n    }\n    _collectHeaderKey(byte) {\n        if (byte === COLON) {\n            this._headerKey = this._consumeTokenAsUTF8();\n            this._onByte = this._collectHeaderValue;\n            return;\n        }\n        this._consumeByte(byte);\n    }\n    _collectHeaderValue(byte) {\n        if (byte === CR) {\n            // Ignore CR\n            return;\n        }\n        if (byte === LF) {\n            this._results.headers.push([\n                this._headerKey,\n                this._consumeTokenAsUTF8(),\n            ]);\n            this._headerKey = undefined;\n            this._onByte = this._collectHeaders;\n            return;\n        }\n        this._consumeByte(byte);\n    }\n    _setupCollectBody() {\n        const contentLengthHeader = this._results.headers.filter((header) => {\n            return header[0] === 'content-length';\n        })[0];\n        if (contentLengthHeader) {\n            this._bodyBytesRemaining = parseInt(contentLengthHeader[1], 10);\n            this._onByte = this._collectBodyFixedSize;\n        }\n        else {\n            this._onByte = this._collectBodyNullTerminated;\n        }\n    }\n    _collectBodyNullTerminated(byte) {\n        if (byte === NULL) {\n            this._retrievedBody();\n            return;\n        }\n        this._consumeByte(byte);\n    }\n    _collectBodyFixedSize(byte) {\n        // It is post decrement, so that we discard the trailing NULL octet\n        if (this._bodyBytesRemaining-- === 0) {\n            this._retrievedBody();\n            return;\n        }\n        this._consumeByte(byte);\n    }\n    _retrievedBody() {\n        this._results.binaryBody = this._consumeTokenAsRaw();\n        try {\n            this.onFrame(this._results);\n        }\n        catch (e) {\n            console.log(`Ignoring an exception thrown by a frame handler. Original exception: `, e);\n        }\n        this._initState();\n    }\n    // Rec Descent Parser helpers\n    _consumeByte(byte) {\n        this._token.push(byte);\n    }\n    _consumeTokenAsUTF8() {\n        return this._decoder.decode(this._consumeTokenAsRaw());\n    }\n    _consumeTokenAsRaw() {\n        const rawResult = new Uint8Array(this._token);\n        this._token = [];\n        return rawResult;\n    }\n    _initState() {\n        this._results = {\n            command: undefined,\n            headers: [],\n            binaryBody: undefined,\n        };\n        this._token = [];\n        this._headerKey = undefined;\n        this._onByte = this._collectFrame;\n    }\n}\n//# sourceMappingURL=parser.js.map","/**\n * Possible states for the IStompSocket\n */\nexport var StompSocketState;\n(function (StompSocketState) {\n    StompSocketState[StompSocketState[\"CONNECTING\"] = 0] = \"CONNECTING\";\n    StompSocketState[StompSocketState[\"OPEN\"] = 1] = \"OPEN\";\n    StompSocketState[StompSocketState[\"CLOSING\"] = 2] = \"CLOSING\";\n    StompSocketState[StompSocketState[\"CLOSED\"] = 3] = \"CLOSED\";\n})(StompSocketState = StompSocketState || (StompSocketState = {}));\n/**\n * Possible activation state\n */\nexport var ActivationState;\n(function (ActivationState) {\n    ActivationState[ActivationState[\"ACTIVE\"] = 0] = \"ACTIVE\";\n    ActivationState[ActivationState[\"DEACTIVATING\"] = 1] = \"DEACTIVATING\";\n    ActivationState[ActivationState[\"INACTIVE\"] = 2] = \"INACTIVE\";\n})(ActivationState = ActivationState || (ActivationState = {}));\n//# sourceMappingURL=types.js.map","/**\n * Supported STOMP versions\n *\n * Part of `@stomp/stompjs`.\n */\nexport class Versions {\n    /**\n     * Takes an array of versions, typical elements '1.2', '1.1', or '1.0'\n     *\n     * You will be creating an instance of this class if you want to override\n     * supported versions to be declared during STOMP handshake.\n     */\n    constructor(versions) {\n        this.versions = versions;\n    }\n    /**\n     * Used as part of CONNECT STOMP Frame\n     */\n    supportedVersions() {\n        return this.versions.join(',');\n    }\n    /**\n     * Used while creating a WebSocket\n     */\n    protocolVersions() {\n        return this.versions.map(x => `v${x.replace('.', '')}.stomp`);\n    }\n}\n/**\n * Indicates protocol version 1.0\n */\nVersions.V1_0 = '1.0';\n/**\n * Indicates protocol version 1.1\n */\nVersions.V1_1 = '1.1';\n/**\n * Indicates protocol version 1.2\n */\nVersions.V1_2 = '1.2';\n/**\n * @internal\n */\nVersions.default = new Versions([\n    Versions.V1_2,\n    Versions.V1_1,\n    Versions.V1_0,\n]);\n//# sourceMappingURL=versions.js.map","import { BYTE } from './byte.js';\nimport { FrameImpl } from './frame-impl.js';\nimport { Parser } from './parser.js';\nimport { StompSocketState, } from './types.js';\nimport { Versions } from './versions.js';\nimport { augmentWebsocket } from './augment-websocket.js';\n/**\n * The STOMP protocol handler\n *\n * Part of `@stomp/stompjs`.\n *\n * @internal\n */\nexport class StompHandler {\n    constructor(_client, _webSocket, config) {\n        this._client = _client;\n        this._webSocket = _webSocket;\n        this._connected = false;\n        this._serverFrameHandlers = {\n            // [CONNECTED Frame](https://stomp.github.com/stomp-specification-1.2.html#CONNECTED_Frame)\n            CONNECTED: frame => {\n                this.debug(`connected to server ${frame.headers.server}`);\n                this._connected = true;\n                this._connectedVersion = frame.headers.version;\n                // STOMP version 1.2 needs header values to be escaped\n                if (this._connectedVersion === Versions.V1_2) {\n                    this._escapeHeaderValues = true;\n                }\n                this._setupHeartbeat(frame.headers);\n                this.onConnect(frame);\n            },\n            // [MESSAGE Frame](https://stomp.github.com/stomp-specification-1.2.html#MESSAGE)\n            MESSAGE: frame => {\n                // the callback is registered when the client calls\n                // `subscribe()`.\n                // If there is no registered subscription for the received message,\n                // the default `onUnhandledMessage` callback is used that the client can set.\n                // This is useful for subscriptions that are automatically created\n                // on the browser side (e.g. [RabbitMQ's temporary\n                // queues](https://www.rabbitmq.com/stomp.html)).\n                const subscription = frame.headers.subscription;\n                const onReceive = this._subscriptions[subscription] || this.onUnhandledMessage;\n                // bless the frame to be a Message\n                const message = frame;\n                const client = this;\n                const messageId = this._connectedVersion === Versions.V1_2\n                    ? message.headers.ack\n                    : message.headers['message-id'];\n                // add `ack()` and `nack()` methods directly to the returned frame\n                // so that a simple call to `message.ack()` can acknowledge the message.\n                message.ack = (headers = {}) => {\n                    return client.ack(messageId, subscription, headers);\n                };\n                message.nack = (headers = {}) => {\n                    return client.nack(messageId, subscription, headers);\n                };\n                onReceive(message);\n            },\n            // [RECEIPT Frame](https://stomp.github.com/stomp-specification-1.2.html#RECEIPT)\n            RECEIPT: frame => {\n                const callback = this._receiptWatchers[frame.headers['receipt-id']];\n                if (callback) {\n                    callback(frame);\n                    // Server will acknowledge only once, remove the callback\n                    delete this._receiptWatchers[frame.headers['receipt-id']];\n                }\n                else {\n                    this.onUnhandledReceipt(frame);\n                }\n            },\n            // [ERROR Frame](https://stomp.github.com/stomp-specification-1.2.html#ERROR)\n            ERROR: frame => {\n                this.onStompError(frame);\n            },\n        };\n        // used to index subscribers\n        this._counter = 0;\n        // subscription callbacks indexed by subscriber's ID\n        this._subscriptions = {};\n        // receipt-watchers indexed by receipts-ids\n        this._receiptWatchers = {};\n        this._partialData = '';\n        this._escapeHeaderValues = false;\n        this._lastServerActivityTS = Date.now();\n        this.debug = config.debug;\n        this.stompVersions = config.stompVersions;\n        this.connectHeaders = config.connectHeaders;\n        this.disconnectHeaders = config.disconnectHeaders;\n        this.heartbeatIncoming = config.heartbeatIncoming;\n        this.heartbeatOutgoing = config.heartbeatOutgoing;\n        this.splitLargeFrames = config.splitLargeFrames;\n        this.maxWebSocketChunkSize = config.maxWebSocketChunkSize;\n        this.forceBinaryWSFrames = config.forceBinaryWSFrames;\n        this.logRawCommunication = config.logRawCommunication;\n        this.appendMissingNULLonIncoming = config.appendMissingNULLonIncoming;\n        this.discardWebsocketOnCommFailure = config.discardWebsocketOnCommFailure;\n        this.onConnect = config.onConnect;\n        this.onDisconnect = config.onDisconnect;\n        this.onStompError = config.onStompError;\n        this.onWebSocketClose = config.onWebSocketClose;\n        this.onWebSocketError = config.onWebSocketError;\n        this.onUnhandledMessage = config.onUnhandledMessage;\n        this.onUnhandledReceipt = config.onUnhandledReceipt;\n        this.onUnhandledFrame = config.onUnhandledFrame;\n    }\n    get connectedVersion() {\n        return this._connectedVersion;\n    }\n    get connected() {\n        return this._connected;\n    }\n    start() {\n        const parser = new Parser(\n        // On Frame\n        rawFrame => {\n            const frame = FrameImpl.fromRawFrame(rawFrame, this._escapeHeaderValues);\n            // if this.logRawCommunication is set, the rawChunk is logged at this._webSocket.onmessage\n            if (!this.logRawCommunication) {\n                this.debug(`<<< ${frame}`);\n            }\n            const serverFrameHandler = this._serverFrameHandlers[frame.command] || this.onUnhandledFrame;\n            serverFrameHandler(frame);\n        }, \n        // On Incoming Ping\n        () => {\n            this.debug('<<< PONG');\n        });\n        this._webSocket.onmessage = (evt) => {\n            this.debug('Received data');\n            this._lastServerActivityTS = Date.now();\n            if (this.logRawCommunication) {\n                const rawChunkAsString = evt.data instanceof ArrayBuffer\n                    ? new TextDecoder().decode(evt.data)\n                    : evt.data;\n                this.debug(`<<< ${rawChunkAsString}`);\n            }\n            parser.parseChunk(evt.data, this.appendMissingNULLonIncoming);\n        };\n        this._webSocket.onclose = (closeEvent) => {\n            this.debug(`Connection closed to ${this._webSocket.url}`);\n            this._cleanUp();\n            this.onWebSocketClose(closeEvent);\n        };\n        this._webSocket.onerror = (errorEvent) => {\n            this.onWebSocketError(errorEvent);\n        };\n        this._webSocket.onopen = () => {\n            // Clone before updating\n            const connectHeaders = Object.assign({}, this.connectHeaders);\n            this.debug('Web Socket Opened...');\n            connectHeaders['accept-version'] = this.stompVersions.supportedVersions();\n            connectHeaders['heart-beat'] = [\n                this.heartbeatOutgoing,\n                this.heartbeatIncoming,\n            ].join(',');\n            this._transmit({ command: 'CONNECT', headers: connectHeaders });\n        };\n    }\n    _setupHeartbeat(headers) {\n        if (headers.version !== Versions.V1_1 &&\n            headers.version !== Versions.V1_2) {\n            return;\n        }\n        // It is valid for the server to not send this header\n        // https://stomp.github.io/stomp-specification-1.2.html#Heart-beating\n        if (!headers['heart-beat']) {\n            return;\n        }\n        // heart-beat header received from the server looks like:\n        //\n        //     heart-beat: sx, sy\n        const [serverOutgoing, serverIncoming] = headers['heart-beat']\n            .split(',')\n            .map((v) => parseInt(v, 10));\n        if (this.heartbeatOutgoing !== 0 && serverIncoming !== 0) {\n            const ttl = Math.max(this.heartbeatOutgoing, serverIncoming);\n            this.debug(`send PING every ${ttl}ms`);\n            this._pinger = setInterval(() => {\n                if (this._webSocket.readyState === StompSocketState.OPEN) {\n                    this._webSocket.send(BYTE.LF);\n                    this.debug('>>> PING');\n                }\n            }, ttl);\n        }\n        if (this.heartbeatIncoming !== 0 && serverOutgoing !== 0) {\n            const ttl = Math.max(this.heartbeatIncoming, serverOutgoing);\n            this.debug(`check PONG every ${ttl}ms`);\n            this._ponger = setInterval(() => {\n                const delta = Date.now() - this._lastServerActivityTS;\n                // We wait twice the TTL to be flexible on window's setInterval calls\n                if (delta > ttl * 2) {\n                    this.debug(`did not receive server activity for the last ${delta}ms`);\n                    this._closeOrDiscardWebsocket();\n                }\n            }, ttl);\n        }\n    }\n    _closeOrDiscardWebsocket() {\n        if (this.discardWebsocketOnCommFailure) {\n            this.debug('Discarding websocket, the underlying socket may linger for a while');\n            this.discardWebsocket();\n        }\n        else {\n            this.debug('Issuing close on the websocket');\n            this._closeWebsocket();\n        }\n    }\n    forceDisconnect() {\n        if (this._webSocket) {\n            if (this._webSocket.readyState === StompSocketState.CONNECTING ||\n                this._webSocket.readyState === StompSocketState.OPEN) {\n                this._closeOrDiscardWebsocket();\n            }\n        }\n    }\n    _closeWebsocket() {\n        this._webSocket.onmessage = () => { }; // ignore messages\n        this._webSocket.close();\n    }\n    discardWebsocket() {\n        if (typeof this._webSocket.terminate !== 'function') {\n            augmentWebsocket(this._webSocket, (msg) => this.debug(msg));\n        }\n        // @ts-ignore - this method will be there at this stage\n        this._webSocket.terminate();\n    }\n    _transmit(params) {\n        const { command, headers, body, binaryBody, skipContentLengthHeader } = params;\n        const frame = new FrameImpl({\n            command,\n            headers,\n            body,\n            binaryBody,\n            escapeHeaderValues: this._escapeHeaderValues,\n            skipContentLengthHeader,\n        });\n        let rawChunk = frame.serialize();\n        if (this.logRawCommunication) {\n            this.debug(`>>> ${rawChunk}`);\n        }\n        else {\n            this.debug(`>>> ${frame}`);\n        }\n        if (this.forceBinaryWSFrames && typeof rawChunk === 'string') {\n            rawChunk = new TextEncoder().encode(rawChunk);\n        }\n        if (typeof rawChunk !== 'string' || !this.splitLargeFrames) {\n            this._webSocket.send(rawChunk);\n        }\n        else {\n            let out = rawChunk;\n            while (out.length > 0) {\n                const chunk = out.substring(0, this.maxWebSocketChunkSize);\n                out = out.substring(this.maxWebSocketChunkSize);\n                this._webSocket.send(chunk);\n                this.debug(`chunk sent = ${chunk.length}, remaining = ${out.length}`);\n            }\n        }\n    }\n    dispose() {\n        if (this.connected) {\n            try {\n                // clone before updating\n                const disconnectHeaders = Object.assign({}, this.disconnectHeaders);\n                if (!disconnectHeaders.receipt) {\n                    disconnectHeaders.receipt = `close-${this._counter++}`;\n                }\n                this.watchForReceipt(disconnectHeaders.receipt, frame => {\n                    this._closeWebsocket();\n                    this._cleanUp();\n                    this.onDisconnect(frame);\n                });\n                this._transmit({ command: 'DISCONNECT', headers: disconnectHeaders });\n            }\n            catch (error) {\n                this.debug(`Ignoring error during disconnect ${error}`);\n            }\n        }\n        else {\n            if (this._webSocket.readyState === StompSocketState.CONNECTING ||\n                this._webSocket.readyState === StompSocketState.OPEN) {\n                this._closeWebsocket();\n            }\n        }\n    }\n    _cleanUp() {\n        this._connected = false;\n        if (this._pinger) {\n            clearInterval(this._pinger);\n            this._pinger = undefined;\n        }\n        if (this._ponger) {\n            clearInterval(this._ponger);\n            this._ponger = undefined;\n        }\n    }\n    publish(params) {\n        const { destination, headers, body, binaryBody, skipContentLengthHeader } = params;\n        const hdrs = Object.assign({ destination }, headers);\n        this._transmit({\n            command: 'SEND',\n            headers: hdrs,\n            body,\n            binaryBody,\n            skipContentLengthHeader,\n        });\n    }\n    watchForReceipt(receiptId, callback) {\n        this._receiptWatchers[receiptId] = callback;\n    }\n    subscribe(destination, callback, headers = {}) {\n        headers = Object.assign({}, headers);\n        if (!headers.id) {\n            headers.id = `sub-${this._counter++}`;\n        }\n        headers.destination = destination;\n        this._subscriptions[headers.id] = callback;\n        this._transmit({ command: 'SUBSCRIBE', headers });\n        const client = this;\n        return {\n            id: headers.id,\n            unsubscribe(hdrs) {\n                return client.unsubscribe(headers.id, hdrs);\n            },\n        };\n    }\n    unsubscribe(id, headers = {}) {\n        headers = Object.assign({}, headers);\n        delete this._subscriptions[id];\n        headers.id = id;\n        this._transmit({ command: 'UNSUBSCRIBE', headers });\n    }\n    begin(transactionId) {\n        const txId = transactionId || `tx-${this._counter++}`;\n        this._transmit({\n            command: 'BEGIN',\n            headers: {\n                transaction: txId,\n            },\n        });\n        const client = this;\n        return {\n            id: txId,\n            commit() {\n                client.commit(txId);\n            },\n            abort() {\n                client.abort(txId);\n            },\n        };\n    }\n    commit(transactionId) {\n        this._transmit({\n            command: 'COMMIT',\n            headers: {\n                transaction: transactionId,\n            },\n        });\n    }\n    abort(transactionId) {\n        this._transmit({\n            command: 'ABORT',\n            headers: {\n                transaction: transactionId,\n            },\n        });\n    }\n    ack(messageId, subscriptionId, headers = {}) {\n        headers = Object.assign({}, headers);\n        if (this._connectedVersion === Versions.V1_2) {\n            headers.id = messageId;\n        }\n        else {\n            headers['message-id'] = messageId;\n        }\n        headers.subscription = subscriptionId;\n        this._transmit({ command: 'ACK', headers });\n    }\n    nack(messageId, subscriptionId, headers = {}) {\n        headers = Object.assign({}, headers);\n        if (this._connectedVersion === Versions.V1_2) {\n            headers.id = messageId;\n        }\n        else {\n            headers['message-id'] = messageId;\n        }\n        headers.subscription = subscriptionId;\n        return this._transmit({ command: 'NACK', headers });\n    }\n}\n//# sourceMappingURL=stomp-handler.js.map","/**\n * @internal\n */\nexport function augmentWebsocket(webSocket, debug) {\n    webSocket.terminate = function () {\n        const noOp = () => { };\n        // set all callbacks to no op\n        this.onerror = noOp;\n        this.onmessage = noOp;\n        this.onopen = noOp;\n        const ts = new Date();\n        const id = Math.random().toString().substring(2, 8); // A simulated id\n        const origOnClose = this.onclose;\n        // Track delay in actual closure of the socket\n        this.onclose = closeEvent => {\n            const delay = new Date().getTime() - ts.getTime();\n            debug(`Discarded socket (#${id})  closed after ${delay}ms, with code/reason: ${closeEvent.code}/${closeEvent.reason}`);\n        };\n        this.close();\n        origOnClose?.call(webSocket, {\n            code: 4001,\n            reason: `Quick discarding socket (#${id}) without waiting for the shutdown sequence.`,\n            wasClean: false,\n        });\n    };\n}\n//# sourceMappingURL=augment-websocket.js.map","import { StompHandler } from './stomp-handler.js';\nimport { ActivationState, StompSocketState, } from './types.js';\nimport { Versions } from './versions.js';\n/**\n * STOMP Client Class.\n *\n * Part of `@stomp/stompjs`.\n */\nexport class Client {\n    /**\n     * Create an instance.\n     */\n    constructor(conf = {}) {\n        /**\n         * STOMP versions to attempt during STOMP handshake. By default, versions `1.2`, `1.1`, and `1.0` are attempted.\n         *\n         * Example:\n         * ```javascript\n         *        // Try only versions 1.1 and 1.0\n         *        client.stompVersions = new Versions(['1.1', '1.0'])\n         * ```\n         */\n        this.stompVersions = Versions.default;\n        /**\n         * Will retry if Stomp connection is not established in specified milliseconds.\n         * Default 0, which switches off automatic reconnection.\n         */\n        this.connectionTimeout = 0;\n        /**\n         *  automatically reconnect with delay in milliseconds, set to 0 to disable.\n         */\n        this.reconnectDelay = 5000;\n        /**\n         * Incoming heartbeat interval in milliseconds. Set to 0 to disable.\n         */\n        this.heartbeatIncoming = 10000;\n        /**\n         * Outgoing heartbeat interval in milliseconds. Set to 0 to disable.\n         */\n        this.heartbeatOutgoing = 10000;\n        /**\n         * This switches on a non-standard behavior while sending WebSocket packets.\n         * It splits larger (text) packets into chunks of [maxWebSocketChunkSize]{@link Client#maxWebSocketChunkSize}.\n         * Only Java Spring brokers seem to support this mode.\n         *\n         * WebSockets, by itself, split large (text) packets,\n         * so it is not needed with a truly compliant STOMP/WebSocket broker.\n         * Setting it for such a broker will cause large messages to fail.\n         *\n         * `false` by default.\n         *\n         * Binary frames are never split.\n         */\n        this.splitLargeFrames = false;\n        /**\n         * See [splitLargeFrames]{@link Client#splitLargeFrames}.\n         * This has no effect if [splitLargeFrames]{@link Client#splitLargeFrames} is `false`.\n         */\n        this.maxWebSocketChunkSize = 8 * 1024;\n        /**\n         * Usually the\n         * [type of WebSocket frame]{@link https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/send#Parameters}\n         * is automatically decided by type of the payload.\n         * Default is `false`, which should work with all compliant brokers.\n         *\n         * Set this flag to force binary frames.\n         */\n        this.forceBinaryWSFrames = false;\n        /**\n         * A bug in ReactNative chops a string on occurrence of a NULL.\n         * See issue [https://github.com/stomp-js/stompjs/issues/89]{@link https://github.com/stomp-js/stompjs/issues/89}.\n         * This makes incoming WebSocket messages invalid STOMP packets.\n         * Setting this flag attempts to reverse the damage by appending a NULL.\n         * If the broker splits a large message into multiple WebSocket messages,\n         * this flag will cause data loss and abnormal termination of connection.\n         *\n         * This is not an ideal solution, but a stop gap until the underlying issue is fixed at ReactNative library.\n         */\n        this.appendMissingNULLonIncoming = false;\n        /**\n         * Browsers do not immediately close WebSockets when `.close` is issued.\n         * This may cause reconnection to take a significantly long time in case\n         *  of some types of failures.\n         * In case of incoming heartbeat failure, this experimental flag instructs\n         * the library to discard the socket immediately\n         * (even before it is actually closed).\n         */\n        this.discardWebsocketOnCommFailure = false;\n        /**\n         * Activation state.\n         *\n         * It will usually be ACTIVE or INACTIVE.\n         * When deactivating, it may go from ACTIVE to INACTIVE without entering DEACTIVATING.\n         */\n        this.state = ActivationState.INACTIVE;\n        // No op callbacks\n        const noOp = () => { };\n        this.debug = noOp;\n        this.beforeConnect = noOp;\n        this.onConnect = noOp;\n        this.onDisconnect = noOp;\n        this.onUnhandledMessage = noOp;\n        this.onUnhandledReceipt = noOp;\n        this.onUnhandledFrame = noOp;\n        this.onStompError = noOp;\n        this.onWebSocketClose = noOp;\n        this.onWebSocketError = noOp;\n        this.logRawCommunication = false;\n        this.onChangeState = noOp;\n        // These parameters would typically get proper values before connect is called\n        this.connectHeaders = {};\n        this._disconnectHeaders = {};\n        // Apply configuration\n        this.configure(conf);\n    }\n    /**\n     * Underlying WebSocket instance, READONLY.\n     */\n    get webSocket() {\n        return this._stompHandler?._webSocket;\n    }\n    /**\n     * Disconnection headers.\n     */\n    get disconnectHeaders() {\n        return this._disconnectHeaders;\n    }\n    set disconnectHeaders(value) {\n        this._disconnectHeaders = value;\n        if (this._stompHandler) {\n            this._stompHandler.disconnectHeaders = this._disconnectHeaders;\n        }\n    }\n    /**\n     * `true` if there is an active connection to STOMP Broker\n     */\n    get connected() {\n        return !!this._stompHandler && this._stompHandler.connected;\n    }\n    /**\n     * version of STOMP protocol negotiated with the server, READONLY\n     */\n    get connectedVersion() {\n        return this._stompHandler ? this._stompHandler.connectedVersion : undefined;\n    }\n    /**\n     * if the client is active (connected or going to reconnect)\n     */\n    get active() {\n        return this.state === ActivationState.ACTIVE;\n    }\n    _changeState(state) {\n        this.state = state;\n        this.onChangeState(state);\n    }\n    /**\n     * Update configuration.\n     */\n    configure(conf) {\n        // bulk assign all properties to this\n        Object.assign(this, conf);\n    }\n    /**\n     * Initiate the connection with the broker.\n     * If the connection breaks, as per [Client#reconnectDelay]{@link Client#reconnectDelay},\n     * it will keep trying to reconnect.\n     *\n     * Call [Client#deactivate]{@link Client#deactivate} to disconnect and stop reconnection attempts.\n     */\n    activate() {\n        const _activate = () => {\n            if (this.active) {\n                this.debug('Already ACTIVE, ignoring request to activate');\n                return;\n            }\n            this._changeState(ActivationState.ACTIVE);\n            this._connect();\n        };\n        // if it is deactivating, wait for it to complete before activating.\n        if (this.state === ActivationState.DEACTIVATING) {\n            this.debug('Waiting for deactivation to finish before activating');\n            this.deactivate().then(() => {\n                _activate();\n            });\n        }\n        else {\n            _activate();\n        }\n    }\n    async _connect() {\n        await this.beforeConnect();\n        if (this._stompHandler) {\n            this.debug('There is already a stompHandler, skipping the call to connect');\n            return;\n        }\n        if (!this.active) {\n            this.debug('Client has been marked inactive, will not attempt to connect');\n            return;\n        }\n        // setup connection watcher\n        if (this.connectionTimeout > 0) {\n            // clear first\n            if (this._connectionWatcher) {\n                clearTimeout(this._connectionWatcher);\n            }\n            this._connectionWatcher = setTimeout(() => {\n                if (this.connected) {\n                    return;\n                }\n                // Connection not established, close the underlying socket\n                // a reconnection will be attempted\n                this.debug(`Connection not established in ${this.connectionTimeout}ms, closing socket`);\n                this.forceDisconnect();\n            }, this.connectionTimeout);\n        }\n        this.debug('Opening Web Socket...');\n        // Get the actual WebSocket (or a similar object)\n        const webSocket = this._createWebSocket();\n        this._stompHandler = new StompHandler(this, webSocket, {\n            debug: this.debug,\n            stompVersions: this.stompVersions,\n            connectHeaders: this.connectHeaders,\n            disconnectHeaders: this._disconnectHeaders,\n            heartbeatIncoming: this.heartbeatIncoming,\n            heartbeatOutgoing: this.heartbeatOutgoing,\n            splitLargeFrames: this.splitLargeFrames,\n            maxWebSocketChunkSize: this.maxWebSocketChunkSize,\n            forceBinaryWSFrames: this.forceBinaryWSFrames,\n            logRawCommunication: this.logRawCommunication,\n            appendMissingNULLonIncoming: this.appendMissingNULLonIncoming,\n            discardWebsocketOnCommFailure: this.discardWebsocketOnCommFailure,\n            onConnect: frame => {\n                // Successfully connected, stop the connection watcher\n                if (this._connectionWatcher) {\n                    clearTimeout(this._connectionWatcher);\n                    this._connectionWatcher = undefined;\n                }\n                if (!this.active) {\n                    this.debug('STOMP got connected while deactivate was issued, will disconnect now');\n                    this._disposeStompHandler();\n                    return;\n                }\n                this.onConnect(frame);\n            },\n            onDisconnect: frame => {\n                this.onDisconnect(frame);\n            },\n            onStompError: frame => {\n                this.onStompError(frame);\n            },\n            onWebSocketClose: evt => {\n                this._stompHandler = undefined; // a new one will be created in case of a reconnect\n                if (this.state === ActivationState.DEACTIVATING) {\n                    // Mark deactivation complete\n                    this._changeState(ActivationState.INACTIVE);\n                }\n                // The callback is called before attempting to reconnect, this would allow the client\n                // to be `deactivated` in the callback.\n                this.onWebSocketClose(evt);\n                if (this.active) {\n                    this._schedule_reconnect();\n                }\n            },\n            onWebSocketError: evt => {\n                this.onWebSocketError(evt);\n            },\n            onUnhandledMessage: message => {\n                this.onUnhandledMessage(message);\n            },\n            onUnhandledReceipt: frame => {\n                this.onUnhandledReceipt(frame);\n            },\n            onUnhandledFrame: frame => {\n                this.onUnhandledFrame(frame);\n            },\n        });\n        this._stompHandler.start();\n    }\n    _createWebSocket() {\n        let webSocket;\n        if (this.webSocketFactory) {\n            webSocket = this.webSocketFactory();\n        }\n        else if (this.brokerURL) {\n            webSocket = new WebSocket(this.brokerURL, this.stompVersions.protocolVersions());\n        }\n        else {\n            throw new Error('Either brokerURL or webSocketFactory must be provided');\n        }\n        webSocket.binaryType = 'arraybuffer';\n        return webSocket;\n    }\n    _schedule_reconnect() {\n        if (this.reconnectDelay > 0) {\n            this.debug(`STOMP: scheduling reconnection in ${this.reconnectDelay}ms`);\n            this._reconnector = setTimeout(() => {\n                this._connect();\n            }, this.reconnectDelay);\n        }\n    }\n    /**\n     * Disconnect if connected and stop auto reconnect loop.\n     * Appropriate callbacks will be invoked if there is an underlying STOMP connection.\n     *\n     * This call is async. It will resolve immediately if there is no underlying active websocket,\n     * otherwise, it will resolve after the underlying websocket is properly disposed of.\n     *\n     * It is not an error to invoke this method more than once.\n     * Each of those would resolve on completion of deactivation.\n     *\n     * To reactivate, you can call [Client#activate]{@link Client#activate}.\n     *\n     * Experimental: pass `force: true` to immediately discard the underlying connection.\n     * This mode will skip both the STOMP and the Websocket shutdown sequences.\n     * In some cases, browsers take a long time in the Websocket shutdown\n     * if the underlying connection had gone stale.\n     * Using this mode can speed up.\n     * When this mode is used, the actual Websocket may linger for a while\n     * and the broker may not realize that the connection is no longer in use.\n     *\n     * It is possible to invoke this method initially without the `force` option\n     * and subsequently, say after a wait, with the `force` option.\n     */\n    async deactivate(options = {}) {\n        const force = options.force || false;\n        const needToDispose = this.active;\n        let retPromise;\n        if (this.state === ActivationState.INACTIVE) {\n            this.debug(`Already INACTIVE, nothing more to do`);\n            return Promise.resolve();\n        }\n        this._changeState(ActivationState.DEACTIVATING);\n        // Clear if a reconnection was scheduled\n        if (this._reconnector) {\n            clearTimeout(this._reconnector);\n            this._reconnector = undefined;\n        }\n        if (this._stompHandler &&\n            // @ts-ignore - if there is a _stompHandler, there is the webSocket\n            this.webSocket.readyState !== StompSocketState.CLOSED) {\n            const origOnWebSocketClose = this._stompHandler.onWebSocketClose;\n            // we need to wait for the underlying websocket to close\n            retPromise = new Promise((resolve, reject) => {\n                // @ts-ignore - there is a _stompHandler\n                this._stompHandler.onWebSocketClose = evt => {\n                    origOnWebSocketClose(evt);\n                    resolve();\n                };\n            });\n        }\n        else {\n            // indicate that auto reconnect loop should terminate\n            this._changeState(ActivationState.INACTIVE);\n            return Promise.resolve();\n        }\n        if (force) {\n            this._stompHandler?.discardWebsocket();\n        }\n        else if (needToDispose) {\n            this._disposeStompHandler();\n        }\n        return retPromise;\n    }\n    /**\n     * Force disconnect if there is an active connection by directly closing the underlying WebSocket.\n     * This is different from a normal disconnect where a DISCONNECT sequence is carried out with the broker.\n     * After forcing disconnect, automatic reconnect will be attempted.\n     * To stop further reconnects call [Client#deactivate]{@link Client#deactivate} as well.\n     */\n    forceDisconnect() {\n        if (this._stompHandler) {\n            this._stompHandler.forceDisconnect();\n        }\n    }\n    _disposeStompHandler() {\n        // Dispose STOMP Handler\n        if (this._stompHandler) {\n            this._stompHandler.dispose();\n        }\n    }\n    /**\n     * Send a message to a named destination. Refer to your STOMP broker documentation for types\n     * and naming of destinations.\n     *\n     * STOMP protocol specifies and suggests some headers and also allows broker-specific headers.\n     *\n     * `body` must be String.\n     * You will need to covert the payload to string in case it is not string (e.g. JSON).\n     *\n     * To send a binary message body, use `binaryBody` parameter. It should be a\n     * [Uint8Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array).\n     * Sometimes brokers may not support binary frames out of the box.\n     * Please check your broker documentation.\n     *\n     * `content-length` header is automatically added to the STOMP Frame sent to the broker.\n     * Set `skipContentLengthHeader` to indicate that `content-length` header should not be added.\n     * For binary messages, `content-length` header is always added.\n     *\n     * Caution: The broker will, most likely, report an error and disconnect\n     * if the message body has NULL octet(s) and `content-length` header is missing.\n     *\n     * ```javascript\n     *        client.publish({destination: \"/queue/test\", headers: {priority: 9}, body: \"Hello, STOMP\"});\n     *\n     *        // Only destination is mandatory parameter\n     *        client.publish({destination: \"/queue/test\", body: \"Hello, STOMP\"});\n     *\n     *        // Skip content-length header in the frame to the broker\n     *        client.publish({\"/queue/test\", body: \"Hello, STOMP\", skipContentLengthHeader: true});\n     *\n     *        var binaryData = generateBinaryData(); // This need to be of type Uint8Array\n     *        // setting content-type header is not mandatory, however a good practice\n     *        client.publish({destination: '/topic/special', binaryBody: binaryData,\n     *                         headers: {'content-type': 'application/octet-stream'}});\n     * ```\n     */\n    publish(params) {\n        this._checkConnection();\n        // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n        this._stompHandler.publish(params);\n    }\n    _checkConnection() {\n        if (!this.connected) {\n            throw new TypeError('There is no underlying STOMP connection');\n        }\n    }\n    /**\n     * STOMP brokers may carry out operation asynchronously and allow requesting for acknowledgement.\n     * To request an acknowledgement, a `receipt` header needs to be sent with the actual request.\n     * The value (say receipt-id) for this header needs to be unique for each use.\n     * Typically, a sequence, a UUID, a random number or a combination may be used.\n     *\n     * A complaint broker will send a RECEIPT frame when an operation has actually been completed.\n     * The operation needs to be matched based on the value of the receipt-id.\n     *\n     * This method allows watching for a receipt and invoking the callback\n     *  when the corresponding receipt has been received.\n     *\n     * The actual {@link IFrame} will be passed as parameter to the callback.\n     *\n     * Example:\n     * ```javascript\n     *        // Subscribing with acknowledgement\n     *        let receiptId = randomText();\n     *\n     *        client.watchForReceipt(receiptId, function() {\n     *          // Will be called after server acknowledges\n     *        });\n     *\n     *        client.subscribe(TEST.destination, onMessage, {receipt: receiptId});\n     *\n     *\n     *        // Publishing with acknowledgement\n     *        receiptId = randomText();\n     *\n     *        client.watchForReceipt(receiptId, function() {\n     *          // Will be called after server acknowledges\n     *        });\n     *        client.publish({destination: TEST.destination, headers: {receipt: receiptId}, body: msg});\n     * ```\n     */\n    watchForReceipt(receiptId, callback) {\n        this._checkConnection();\n        // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n        this._stompHandler.watchForReceipt(receiptId, callback);\n    }\n    /**\n     * Subscribe to a STOMP Broker location. The callback will be invoked for each\n     * received message with the {@link IMessage} as argument.\n     *\n     * Note: The library will generate a unique ID if there is none provided in the headers.\n     *       To use your own ID, pass it using the `headers` argument.\n     *\n     * ```javascript\n     *        callback = function(message) {\n     *        // called when the client receives a STOMP message from the server\n     *          if (message.body) {\n     *            alert(\"got message with body \" + message.body)\n     *          } else {\n     *            alert(\"got empty message\");\n     *          }\n     *        });\n     *\n     *        var subscription = client.subscribe(\"/queue/test\", callback);\n     *\n     *        // Explicit subscription id\n     *        var mySubId = 'my-subscription-id-001';\n     *        var subscription = client.subscribe(destination, callback, { id: mySubId });\n     * ```\n     */\n    subscribe(destination, callback, headers = {}) {\n        this._checkConnection();\n        // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n        return this._stompHandler.subscribe(destination, callback, headers);\n    }\n    /**\n     * It is preferable to unsubscribe from a subscription by calling\n     * `unsubscribe()` directly on {@link StompSubscription} returned by `client.subscribe()`:\n     *\n     * ```javascript\n     *        var subscription = client.subscribe(destination, onmessage);\n     *        // ...\n     *        subscription.unsubscribe();\n     * ```\n     *\n     * See: https://stomp.github.com/stomp-specification-1.2.html#UNSUBSCRIBE UNSUBSCRIBE Frame\n     */\n    unsubscribe(id, headers = {}) {\n        this._checkConnection();\n        // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n        this._stompHandler.unsubscribe(id, headers);\n    }\n    /**\n     * Start a transaction, the returned {@link ITransaction} has methods - [commit]{@link ITransaction#commit}\n     * and [abort]{@link ITransaction#abort}.\n     *\n     * `transactionId` is optional, if not passed the library will generate it internally.\n     */\n    begin(transactionId) {\n        this._checkConnection();\n        // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n        return this._stompHandler.begin(transactionId);\n    }\n    /**\n     * Commit a transaction.\n     *\n     * It is preferable to commit a transaction by calling [commit]{@link ITransaction#commit} directly on\n     * {@link ITransaction} returned by [client.begin]{@link Client#begin}.\n     *\n     * ```javascript\n     *        var tx = client.begin(txId);\n     *        //...\n     *        tx.commit();\n     * ```\n     */\n    commit(transactionId) {\n        this._checkConnection();\n        // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n        this._stompHandler.commit(transactionId);\n    }\n    /**\n     * Abort a transaction.\n     * It is preferable to abort a transaction by calling [abort]{@link ITransaction#abort} directly on\n     * {@link ITransaction} returned by [client.begin]{@link Client#begin}.\n     *\n     * ```javascript\n     *        var tx = client.begin(txId);\n     *        //...\n     *        tx.abort();\n     * ```\n     */\n    abort(transactionId) {\n        this._checkConnection();\n        // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n        this._stompHandler.abort(transactionId);\n    }\n    /**\n     * ACK a message. It is preferable to acknowledge a message by calling [ack]{@link IMessage#ack} directly\n     * on the {@link IMessage} handled by a subscription callback:\n     *\n     * ```javascript\n     *        var callback = function (message) {\n     *          // process the message\n     *          // acknowledge it\n     *          message.ack();\n     *        };\n     *        client.subscribe(destination, callback, {'ack': 'client'});\n     * ```\n     */\n    ack(messageId, subscriptionId, headers = {}) {\n        this._checkConnection();\n        // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n        this._stompHandler.ack(messageId, subscriptionId, headers);\n    }\n    /**\n     * NACK a message. It is preferable to acknowledge a message by calling [nack]{@link IMessage#nack} directly\n     * on the {@link IMessage} handled by a subscription callback:\n     *\n     * ```javascript\n     *        var callback = function (message) {\n     *          // process the message\n     *          // an error occurs, nack it\n     *          message.nack();\n     *        };\n     *        client.subscribe(destination, callback, {'ack': 'client'});\n     * ```\n     */\n    nack(messageId, subscriptionId, headers = {}) {\n        this._checkConnection();\n        // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n        this._stompHandler.nack(messageId, subscriptionId, headers);\n    }\n}\n//# sourceMappingURL=client.js.map","/**\n * Configuration options for STOMP Client, each key corresponds to\n * field by the same name in {@link Client}. This can be passed to\n * the constructor of {@link Client} or to [Client#configure]{@link Client#configure}.\n *\n * Part of `@stomp/stompjs`.\n */\nexport class StompConfig {\n}\n//# sourceMappingURL=stomp-config.js.map","/**\n * STOMP headers. Many functions calls will accept headers as parameters.\n * The headers sent by Broker will be available as [IFrame#headers]{@link IFrame#headers}.\n *\n * `key` and `value` must be valid strings.\n * In addition, `key` must not contain `CR`, `LF`, or `:`.\n *\n * Part of `@stomp/stompjs`.\n */\nexport class StompHeaders {\n}\n//# sourceMappingURL=stomp-headers.js.map","/**\n * Part of `@stomp/stompjs`.\n *\n * @internal\n */\nexport class HeartbeatInfo {\n    constructor(client) {\n        this.client = client;\n    }\n    get outgoing() {\n        return this.client.heartbeatOutgoing;\n    }\n    set outgoing(value) {\n        this.client.heartbeatOutgoing = value;\n    }\n    get incoming() {\n        return this.client.heartbeatIncoming;\n    }\n    set incoming(value) {\n        this.client.heartbeatIncoming = value;\n    }\n}\n//# sourceMappingURL=heartbeat-info.js.map","import { Client } from '../client.js';\nimport { HeartbeatInfo } from './heartbeat-info.js';\n/**\n * Available for backward compatibility, please shift to using {@link Client}.\n *\n * **Deprecated**\n *\n * Part of `@stomp/stompjs`.\n *\n * To upgrade, please follow the [Upgrade Guide](https://stomp-js.github.io/guide/stompjs/upgrading-stompjs.html)\n */\nexport class CompatClient extends Client {\n    /**\n     * Available for backward compatibility, please shift to using {@link Client}\n     * and [Client#webSocketFactory]{@link Client#webSocketFactory}.\n     *\n     * **Deprecated**\n     *\n     * @internal\n     */\n    constructor(webSocketFactory) {\n        super();\n        /**\n         * It is no op now. No longer needed. Large packets work out of the box.\n         */\n        this.maxWebSocketFrameSize = 16 * 1024;\n        this._heartbeatInfo = new HeartbeatInfo(this);\n        this.reconnect_delay = 0;\n        this.webSocketFactory = webSocketFactory;\n        // Default from previous version\n        this.debug = (...message) => {\n            console.log(...message);\n        };\n    }\n    _parseConnect(...args) {\n        let closeEventCallback;\n        let connectCallback;\n        let errorCallback;\n        let headers = {};\n        if (args.length < 2) {\n            throw new Error('Connect requires at least 2 arguments');\n        }\n        if (typeof args[1] === 'function') {\n            [headers, connectCallback, errorCallback, closeEventCallback] = args;\n        }\n        else {\n            switch (args.length) {\n                case 6:\n                    [\n                        headers.login,\n                        headers.passcode,\n                        connectCallback,\n                        errorCallback,\n                        closeEventCallback,\n                        headers.host,\n                    ] = args;\n                    break;\n                default:\n                    [\n                        headers.login,\n                        headers.passcode,\n                        connectCallback,\n                        errorCallback,\n                        closeEventCallback,\n                    ] = args;\n            }\n        }\n        return [headers, connectCallback, errorCallback, closeEventCallback];\n    }\n    /**\n     * Available for backward compatibility, please shift to using [Client#activate]{@link Client#activate}.\n     *\n     * **Deprecated**\n     *\n     * The `connect` method accepts different number of arguments and types. See the Overloads list. Use the\n     * version with headers to pass your broker specific options.\n     *\n     * overloads:\n     * - connect(headers, connectCallback)\n     * - connect(headers, connectCallback, errorCallback)\n     * - connect(login, passcode, connectCallback)\n     * - connect(login, passcode, connectCallback, errorCallback)\n     * - connect(login, passcode, connectCallback, errorCallback, closeEventCallback)\n     * - connect(login, passcode, connectCallback, errorCallback, closeEventCallback, host)\n     *\n     * params:\n     * - headers, see [Client#connectHeaders]{@link Client#connectHeaders}\n     * - connectCallback, see [Client#onConnect]{@link Client#onConnect}\n     * - errorCallback, see [Client#onStompError]{@link Client#onStompError}\n     * - closeEventCallback, see [Client#onWebSocketClose]{@link Client#onWebSocketClose}\n     * - login [String], see [Client#connectHeaders](../classes/Client.html#connectHeaders)\n     * - passcode [String], [Client#connectHeaders](../classes/Client.html#connectHeaders)\n     * - host [String], see [Client#connectHeaders](../classes/Client.html#connectHeaders)\n     *\n     * To upgrade, please follow the [Upgrade Guide](../additional-documentation/upgrading.html)\n     */\n    connect(...args) {\n        const out = this._parseConnect(...args);\n        if (out[0]) {\n            this.connectHeaders = out[0];\n        }\n        if (out[1]) {\n            this.onConnect = out[1];\n        }\n        if (out[2]) {\n            this.onStompError = out[2];\n        }\n        if (out[3]) {\n            this.onWebSocketClose = out[3];\n        }\n        super.activate();\n    }\n    /**\n     * Available for backward compatibility, please shift to using [Client#deactivate]{@link Client#deactivate}.\n     *\n     * **Deprecated**\n     *\n     * See:\n     * [Client#onDisconnect]{@link Client#onDisconnect}, and\n     * [Client#disconnectHeaders]{@link Client#disconnectHeaders}\n     *\n     * To upgrade, please follow the [Upgrade Guide](../additional-documentation/upgrading.html)\n     */\n    disconnect(disconnectCallback, headers = {}) {\n        if (disconnectCallback) {\n            this.onDisconnect = disconnectCallback;\n        }\n        this.disconnectHeaders = headers;\n        super.deactivate();\n    }\n    /**\n     * Available for backward compatibility, use [Client#publish]{@link Client#publish}.\n     *\n     * Send a message to a named destination. Refer to your STOMP broker documentation for types\n     * and naming of destinations. The headers will, typically, be available to the subscriber.\n     * However, there may be special purpose headers corresponding to your STOMP broker.\n     *\n     *  **Deprecated**, use [Client#publish]{@link Client#publish}\n     *\n     * Note: Body must be String. You will need to covert the payload to string in case it is not string (e.g. JSON)\n     *\n     * ```javascript\n     *        client.send(\"/queue/test\", {priority: 9}, \"Hello, STOMP\");\n     *\n     *        // If you want to send a message with a body, you must also pass the headers argument.\n     *        client.send(\"/queue/test\", {}, \"Hello, STOMP\");\n     * ```\n     *\n     * To upgrade, please follow the [Upgrade Guide](../additional-documentation/upgrading.html)\n     */\n    send(destination, headers = {}, body = '') {\n        headers = Object.assign({}, headers);\n        const skipContentLengthHeader = headers['content-length'] === false;\n        if (skipContentLengthHeader) {\n            delete headers['content-length'];\n        }\n        this.publish({\n            destination,\n            headers: headers,\n            body,\n            skipContentLengthHeader,\n        });\n    }\n    /**\n     * Available for backward compatibility, renamed to [Client#reconnectDelay]{@link Client#reconnectDelay}.\n     *\n     * **Deprecated**\n     */\n    set reconnect_delay(value) {\n        this.reconnectDelay = value;\n    }\n    /**\n     * Available for backward compatibility, renamed to [Client#webSocket]{@link Client#webSocket}.\n     *\n     * **Deprecated**\n     */\n    get ws() {\n        return this.webSocket;\n    }\n    /**\n     * Available for backward compatibility, renamed to [Client#connectedVersion]{@link Client#connectedVersion}.\n     *\n     * **Deprecated**\n     */\n    get version() {\n        return this.connectedVersion;\n    }\n    /**\n     * Available for backward compatibility, renamed to [Client#onUnhandledMessage]{@link Client#onUnhandledMessage}.\n     *\n     * **Deprecated**\n     */\n    get onreceive() {\n        return this.onUnhandledMessage;\n    }\n    /**\n     * Available for backward compatibility, renamed to [Client#onUnhandledMessage]{@link Client#onUnhandledMessage}.\n     *\n     * **Deprecated**\n     */\n    set onreceive(value) {\n        this.onUnhandledMessage = value;\n    }\n    /**\n     * Available for backward compatibility, renamed to [Client#onUnhandledReceipt]{@link Client#onUnhandledReceipt}.\n     * Prefer using [Client#watchForReceipt]{@link Client#watchForReceipt}.\n     *\n     * **Deprecated**\n     */\n    get onreceipt() {\n        return this.onUnhandledReceipt;\n    }\n    /**\n     * Available for backward compatibility, renamed to [Client#onUnhandledReceipt]{@link Client#onUnhandledReceipt}.\n     *\n     * **Deprecated**\n     */\n    set onreceipt(value) {\n        this.onUnhandledReceipt = value;\n    }\n    /**\n     * Available for backward compatibility, renamed to [Client#heartbeatIncoming]{@link Client#heartbeatIncoming}\n     * [Client#heartbeatOutgoing]{@link Client#heartbeatOutgoing}.\n     *\n     * **Deprecated**\n     */\n    get heartbeat() {\n        return this._heartbeatInfo;\n    }\n    /**\n     * Available for backward compatibility, renamed to [Client#heartbeatIncoming]{@link Client#heartbeatIncoming}\n     * [Client#heartbeatOutgoing]{@link Client#heartbeatOutgoing}.\n     *\n     * **Deprecated**\n     */\n    set heartbeat(value) {\n        this.heartbeatIncoming = value.incoming;\n        this.heartbeatOutgoing = value.outgoing;\n    }\n}\n//# sourceMappingURL=compat-client.js.map","import { Versions } from '../versions.js';\nimport { CompatClient } from './compat-client.js';\n/**\n * STOMP Class, acts like a factory to create {@link Client}.\n *\n * Part of `@stomp/stompjs`.\n *\n * **Deprecated**\n *\n * It will be removed in next major version. Please switch to {@link Client}.\n */\nexport class Stomp {\n    /**\n     * This method creates a WebSocket client that is connected to\n     * the STOMP server located at the url.\n     *\n     * ```javascript\n     *        var url = \"ws://localhost:61614/stomp\";\n     *        var client = Stomp.client(url);\n     * ```\n     *\n     * **Deprecated**\n     *\n     * It will be removed in next major version. Please switch to {@link Client}\n     * using [Client#brokerURL]{@link Client#brokerURL}.\n     */\n    static client(url, protocols) {\n        // This is a hack to allow another implementation than the standard\n        // HTML5 WebSocket class.\n        //\n        // It is possible to use another class by calling\n        //\n        //     Stomp.WebSocketClass = MozWebSocket\n        //\n        // *prior* to call `Stomp.client()`.\n        //\n        // This hack is deprecated and `Stomp.over()` method should be used\n        // instead.\n        // See remarks on the function Stomp.over\n        if (protocols == null) {\n            protocols = Versions.default.protocolVersions();\n        }\n        const wsFn = () => {\n            const klass = Stomp.WebSocketClass || WebSocket;\n            return new klass(url, protocols);\n        };\n        return new CompatClient(wsFn);\n    }\n    /**\n     * This method is an alternative to [Stomp#client]{@link Stomp#client} to let the user\n     * specify the WebSocket to use (either a standard HTML5 WebSocket or\n     * a similar object).\n     *\n     * In order to support reconnection, the function Client._connect should be callable more than once.\n     * While reconnecting\n     * a new instance of underlying transport (TCP Socket, WebSocket or SockJS) will be needed. So, this function\n     * alternatively allows passing a function that should return a new instance of the underlying socket.\n     *\n     * ```javascript\n     *        var client = Stomp.over(function(){\n     *          return new WebSocket('ws://localhost:15674/ws')\n     *        });\n     * ```\n     *\n     * **Deprecated**\n     *\n     * It will be removed in next major version. Please switch to {@link Client}\n     * using [Client#webSocketFactory]{@link Client#webSocketFactory}.\n     */\n    static over(ws) {\n        let wsFn;\n        if (typeof ws === 'function') {\n            wsFn = ws;\n        }\n        else {\n            console.warn('Stomp.over did not receive a factory, auto reconnect will not work. ' +\n                'Please see https://stomp-js.github.io/api-docs/latest/classes/Stomp.html#over');\n            wsFn = () => ws;\n        }\n        return new CompatClient(wsFn);\n    }\n}\n/**\n * In case you need to use a non standard class for WebSocket.\n *\n * For example when using within NodeJS environment:\n *\n * ```javascript\n *        StompJs = require('../../esm5/');\n *        Stomp = StompJs.Stomp;\n *        Stomp.WebSocketClass = require('websocket').w3cwebsocket;\n * ```\n *\n * **Deprecated**\n *\n *\n * It will be removed in next major version. Please switch to {@link Client}\n * using [Client#webSocketFactory]{@link Client#webSocketFactory}.\n */\n// tslint:disable-next-line:variable-name\nStomp.WebSocketClass = null;\n//# sourceMappingURL=stomp.js.map"],"names":["BYTE","FrameImpl","constructor","params","command","headers","body","binaryBody","escapeHeaderValues","skipContentLengthHeader","this","Object","assign","_binaryBody","isBinaryBody","_body","TextDecoder","decode","TextEncoder","encode","fromRawFrame","rawFrame","trim","str","replace","header","reverse","indexOf","key","value","hdrValueUnEscape","toString","serializeCmdAndHeaders","serialize","cmdAndHeaders","toUnit8Array","buffer","lines","name","keys","push","hdrValueEscape","isBodyEmpty","bodyLength","join","length","sizeOfUTF8","s","uint8CmdAndHeaders","nullTerminator","Uint8Array","uint8Frame","set","marshall","Parser","onFrame","onIncomingPing","_encoder","_decoder","_token","_initState","parseChunk","segment","appendMissingNULLonIncoming","chunk","chunkWithNull","i","byte","_onByte","_collectFrame","_collectCommand","_reinjectByte","_results","_consumeTokenAsUTF8","_collectHeaders","_consumeByte","_collectHeaderKey","_setupCollectBody","_headerKey","_collectHeaderValue","undefined","contentLengthHeader","filter","_bodyBytesRemaining","parseInt","_collectBodyFixedSize","_collectBodyNullTerminated","_retrievedBody","_consumeTokenAsRaw","e","console","log","rawResult","StompSocketState","ActivationState","Versions","versions","supportedVersions","protocolVersions","map","x","V1_0","V1_1","V1_2","default","StompHandler","_client","_webSocket","config","_connected","_serverFrameHandlers","CONNECTED","frame","debug","server","_connectedVersion","version","_escapeHeaderValues","_setupHeartbeat","onConnect","MESSAGE","subscription","onReceive","_subscriptions","onUnhandledMessage","message","client","messageId","ack","nack","RECEIPT","callback","_receiptWatchers","onUnhandledReceipt","ERROR","onStompError","_counter","_partialData","_lastServerActivityTS","Date","now","stompVersions","connectHeaders","disconnectHeaders","heartbeatIncoming","heartbeatOutgoing","splitLargeFrames","maxWebSocketChunkSize","forceBinaryWSFrames","logRawCommunication","discardWebsocketOnCommFailure","onDisconnect","onWebSocketClose","onWebSocketError","onUnhandledFrame","connectedVersion","connected","start","parser","onmessage","evt","rawChunkAsString","data","ArrayBuffer","onclose","closeEvent","url","_cleanUp","onerror","errorEvent","onopen","_transmit","serverOutgoing","serverIncoming","split","v","ttl","Math","max","_pinger","setInterval","readyState","OPEN","send","_ponger","delta","_closeOrDiscardWebsocket","discardWebsocket","_closeWebsocket","forceDisconnect","CONNECTING","close","webSocket","terminate","msg","noOp","ts","id","random","substring","origOnClose","delay","getTime","code","reason","call","wasClean","rawChunk","out","dispose","receipt","watchForReceipt","error","clearInterval","publish","destination","hdrs","receiptId","subscribe","unsubscribe","begin","transactionId","txId","transaction","commit","abort","subscriptionId","Client","conf","connectionTimeout","reconnectDelay","state","INACTIVE","beforeConnect","onChangeState","_disconnectHeaders","configure","_stompHandler","active","ACTIVE","_changeState","activate","_activate","_connect","DEACTIVATING","deactivate","then","_connectionWatcher","clearTimeout","setTimeout","_createWebSocket","_disposeStompHandler","_schedule_reconnect","webSocketFactory","brokerURL","Error","WebSocket","binaryType","_reconnector","options","force","needToDispose","retPromise","Promise","resolve","CLOSED","origOnWebSocketClose","reject","_checkConnection","TypeError","StompConfig","StompHeaders","HeartbeatInfo","outgoing","incoming","CompatClient","super","maxWebSocketFrameSize","_heartbeatInfo","reconnect_delay","_parseConnect","args","closeEventCallback","connectCallback","errorCallback","login","passcode","host","connect","disconnect","disconnectCallback","ws","onreceive","onreceipt","heartbeat","Stomp","protocols","WebSocketClass","over","wsFn","warn"],"sourceRoot":""}