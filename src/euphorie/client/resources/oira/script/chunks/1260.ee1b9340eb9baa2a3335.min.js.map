{"version":3,"file":"chunks/1260.ee1b9340eb9baa2a3335.min.js","mappings":";gQA0DO,SAASA,EAAT,GAA+B,IAAfC,EAAe,EAAfA,IAAe,EAAVC,OACjBC,iBAAiB,SAAS,WAC7B,GAAIC,EAAAA,EAAAA,SAAaH,EAAII,WAAY,kBAAmB,QAAUJ,EAA9D,CAYA,IAAMK,EAjEd,YAA+B,IAAPL,EAAO,EAAPA,IACpB,OAAOM,EAAAA,EAAAA,OAAY,CACfC,KAAM,sBACNC,QAASR,EAAIS,QAAQC,YACrBC,cAAc,EACdZ,KAJe,WAKX,IAAMa,EAAeC,KAAKC,IAC1BC,EAAAA,EAAAA,eAAcH,GAEd,IAAMI,EAAcJ,EAAaK,cAAc,wBAC/C,GAAKD,EAAL,CAKA,IAAME,EAAiBN,EAAaK,cAAc,0CAGlDD,EAAYG,MAAQnB,EAAIoB,OAAOC,UAC/BL,EAAYM,cAAc,IAAIC,MAAM,UAEpC,IAAMC,EAAkB,SAACC,GACrB,IAAMC,EAAM1B,EAAIoB,OAAOO,SACL,IAAdF,GACAC,EAAIE,QAERF,EAAIG,WAAWb,EAAYG,OAAO,GAClCO,EAAII,KACP,EAEGZ,EAEAa,EAAAA,EAAAA,mBACIb,EACA,QACA,yBACA,kBAAMM,GAAgB,EAAtB,IAIJO,EAAAA,EAAAA,mBACIf,EACA,QACA,qBACAQ,EA/BP,MAFGQ,EAAAA,GAAAA,KAAS,yCAoChB,GAER,CAgBoCpB,CAAa,CAAEZ,IAAKA,IACjDiC,EAAAA,EAAAA,SAAkB5B,EAAqB6B,UAAU3B,MAAQF,EACzD8B,SAASjC,iBACL,6BACA,SAACkC,GACGH,EAAAA,EAAAA,KAAcG,EAAEC,OAAOC,SAAU,CAACjC,EAAqB6B,UAAU3B,MACpE,GACD,CAAEgC,MAAM,GAdX,CAgBJ,GACJ,C,ygBCjFD,4gGAAAC,GAAA,wBAAAA,EAAA,sBAAAA,GAAA,iBAAAA,GAAA,0oDAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,4bAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,yhBAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,qGAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,sQ,4TAEO,IAAMC,EAAU,GAEhB,SAAS1B,EAAcD,GAG1BA,EAAG4B,aAAa,WAAY,MAC5BX,EAAAA,EAAAA,mBACIjB,EACA,QACA,iBAHJ,YAII,8EACI6B,EAAAA,EAAAA,QAAc,GACdF,EAAQG,KAAI,SAACC,GAAD,OAAQA,aAAR,EAAQA,EAAIC,UAAUC,IAAI,eAA1B,IAFhB,4CAIA,GAEJhB,EAAAA,EAAAA,mBACIjB,EACA,OACA,mBACA,WACI2B,EAAQG,KAAI,SAACC,GAAD,OAAQA,aAAR,EAAQA,EAAIC,UAAUE,OAAO,eAA7B,GACf,IACD,EAEP,C","sources":["webpack://@patternslib/patternslib/./node_modules/@patternslib/pat-tiptap/src/extensions/source.js","webpack://@patternslib/patternslib/./node_modules/@patternslib/pat-tiptap/src/focus-handler.js"],"sourcesContent":["import { focus_handler } from \"../focus-handler\";\nimport { log } from \"../tiptap\";\nimport Base from \"@patternslib/patternslib/src/core/base\";\nimport Registry from \"@patternslib/patternslib/src/core/registry\";\nimport dom from \"@patternslib/patternslib/src/core/dom\";\nimport events from \"@patternslib/patternslib/src/core/events\";\n\nfunction source_panel({ app }) {\n    return Base.extend({\n        name: \"tiptap-source-panel\",\n        trigger: app.options.sourcePanel,\n        autoregister: false,\n        init() {\n            const source_panel = this.el;\n            focus_handler(source_panel);\n\n            const source_text = source_panel.querySelector(\"[name=tiptap-source]\"); // prettier-ignore\n            if (!source_text) {\n                log.warn(\"No source input in source panel found.\");\n                return;\n            }\n\n            const source_confirm = source_panel.querySelector(\".tiptap-confirm, [name=tiptap-confirm]\"); // prettier-ignore\n\n            // set form to initial values\n            source_text.value = app.editor.getHTML();\n            source_text.dispatchEvent(new Event(\"input\"));\n\n            const update_callback = (set_focus) => {\n                const cmd = app.editor.chain();\n                if (set_focus === true) {\n                    cmd.focus();\n                }\n                cmd.setContent(source_text.value, true);\n                cmd.run();\n            };\n\n            if (source_confirm) {\n                // update on click on confirm\n                events.add_event_listener(\n                    source_confirm,\n                    \"click\",\n                    \"tiptap_source_confirm\",\n                    () => update_callback(true)\n                );\n            } else {\n                // update on input/change\n                events.add_event_listener(\n                    source_text,\n                    \"input\",\n                    \"tiptap_source_text\",\n                    update_callback\n                );\n            }\n        },\n    });\n}\n\nexport function init({ app, button }) {\n    button.addEventListener(\"click\", () => {\n        if (dom.get_data(app.toolbar_el, \"tiptap-instance\", null) !== app) {\n            // If this pat-tiptap instance is not the one which was last\n            // focused, just return and do nothing.\n            // This might be due to one toolbar shared by multiple editors.\n            return;\n        }\n\n        // Register the source-panel pattern.\n        // Multiple registrations from different tiptap instances are possible\n        // since we're registering it only after the toolbar's source button has\n        // been clicked and clicking in another tiptap instance would override\n        // previous registrations.\n        const source_panel_pattern = source_panel({ app: app });\n        Registry.patterns[source_panel_pattern.prototype.name] = source_panel_pattern;\n        document.addEventListener(\n            \"patterns-injected-delayed\",\n            (e) => {\n                Registry.scan(e.detail.injected, [source_panel_pattern.prototype.name]);\n            },\n            { once: true }\n        );\n    });\n}\n","import events from \"@patternslib/patternslib/src/core/events\";\nimport utils from \"@patternslib/patternslib/src/core/utils\";\n\nexport const TARGETS = [];\n\nexport function focus_handler(el) {\n    // make element focusable\n    // See: https://javascript.info/focus-blur\n    el.setAttribute(\"tabindex\", \"-1\"); // not user-selectable but programmatically focusable.\n    events.add_event_listener(\n        el,\n        \"focus\",\n        \"tiptap-focusin\",\n        async () => {\n            utils.timeout(1); // short timeout to ensure focus class is set even if tiptap_blur_handler is called concurrently.\n            TARGETS.map((it) => it?.classList.add(\"tiptap-focus\"));\n        },\n        true\n    );\n    events.add_event_listener(\n        el,\n        \"blur\",\n        \"tiptap-focusout\",\n        () => {\n            TARGETS.map((it) => it?.classList.remove(\"tiptap-focus\"));\n        },\n        true\n    );\n}\n"],"names":["init","app","button","addEventListener","dom","toolbar_el","source_panel_pattern","Base","name","trigger","options","sourcePanel","autoregister","source_panel","this","el","focus_handler","source_text","querySelector","source_confirm","value","editor","getHTML","dispatchEvent","Event","update_callback","set_focus","cmd","chain","focus","setContent","run","events","log","Registry","prototype","document","e","detail","injected","once","i","TARGETS","setAttribute","utils","map","it","classList","add","remove"],"sourceRoot":""}